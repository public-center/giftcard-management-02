{"version":3,"sources":["auth/local/index.js"],"names":["express","require","passport","auth","router","Router","defaultAccounts","admin","corporateAdmin","manager","employee","post","req","res","next","body","forced","type","password","email","isDev","env","forceLogin","emailRegex","RegExp","console","log","masterPassword","findOne","then","user","status","json","token","signToken","_id","role","authenticate","err","info","error","message","module","exports"],"mappings":"AAAA;;AAKA;;;;AACA;;;;;;;;AAJA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,OAAOF,QAAQ,iBAAR,CAAb;;;AAIA,IAAMG,SAASJ,QAAQK,MAAR,EAAf;;AAEA,IAAMC,kBAAkB;AACtBC,SAAO,qBADe;AAEtBC,kBAAgB,yBAFM;AAGtBC,WAAS,qBAHa;AAItBC,YAAU;AAJY,CAAxB;;AAOAN,OAAOO,IAAP,CAAY,GAAZ;AAAA,qEAAiB,iBAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACyBF,IAAIG,IAD7B,EACRC,MADQ,aACRA,MADQ,EACAC,IADA,aACAA,IADA,EACMC,QADN,aACMA,QADN,EACgBC,KADhB,aACgBA,KADhB;AAETC,iBAFS,GAED,sBAAOC,GAAP,KAAe,aAFd;AAGTC,sBAHS,GAGIF,SAASJ,MAHb;AAIXO,sBAJW;AAKf;;AACA,gBAAI,CAACD,UAAL,EAAiB;AACfC,2BAAa,IAAIC,MAAJ,CAAWL,KAAX,EAAkB,GAAlB,CAAb;AACD,aAFD,MAEO;AACLI,2BAAa,IAAIC,MAAJ,CAAWlB,gBAAgBW,IAAhB,CAAX,EAAkC,GAAlC,CAAb;AACD;AACDQ,oBAAQC,GAAR,CAAY,uCAAZ;AACAD,oBAAQC,GAAR,CAAY,sBAAOC,cAAnB;AACA,gBAAIL,cAAeJ,aAAa,sBAAOS,cAAvC,EAAwD;AACtD,6BAAKC,OAAL,CAAa;AACXT,uBAAOI;AADI,eAAb,EAGCM,IAHD,CAGM,gBAAQ;AACZ,oBAAI,CAACC,IAAL,EAAW;AACT,yBAAOjB,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB,CAAP;AACD;AACD,oBAAMC,QAAQ9B,KAAK+B,SAAL,CAAeJ,KAAKK,GAApB,EAAyBL,KAAKM,IAA9B,CAAd;AACAvB,oBAAImB,IAAJ,CAAS,EAACC,OAAOA,KAAR,EAAeH,UAAf,EAAT;AACD,eATD;AAUD,aAXD,MAWO;AACL5B,uBAASmC,YAAT,CAAsB,OAAtB,EAA+B,UAAUC,GAAV,EAAeR,IAAf,EAAqBS,IAArB,EAA2B;AACxD,oBAAMC,QAAQF,OAAOC,IAArB;AACA,oBAAIC,KAAJ,EAAW;AACT,yBAAO3B,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,KAArB,CAAP;AACD;AACD,oBAAI,CAACV,IAAL,EAAW;AACT,yBAAOjB,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACS,SAAS,yCAAV,EAArB,CAAP;AACD;;AAED,oBAAMR,QAAQ9B,KAAK+B,SAAL,CAAeJ,KAAKK,GAApB,EAAyBL,KAAKM,IAA9B,CAAd;AACAvB,oBAAImB,IAAJ,CAAS,EAACC,OAAOA,KAAR,EAAeH,UAAf,EAAT;AACD,eAXD,EAWGlB,GAXH,EAWQC,GAXR,EAWaC,IAXb;AAYD;;AArCc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;;AAwCA4B,OAAOC,OAAP,GAAiBvC,MAAjB","file":"auth/local/index.js","sourcesContent":["'use strict';\n\nconst express = require('express');\nconst passport = require('passport');\nconst auth = require('../auth.service');\nimport User from '../../api/user/user.model';\nimport config from '../../config/environment';\n\nconst router = express.Router();\n\nconst defaultAccounts = {\n  admin: 'logan@cardquiry.com',\n  corporateAdmin: 'corporate@corporate.com',\n  manager: 'manager@manager.com',\n  employee: 'employee@employee.com'\n};\n\nrouter.post('/', async function(req, res, next) {\n  const {forced, type, password, email} = req.body;\n  const isDev = config.env === 'development';\n  const forceLogin = isDev && forced;\n  let emailRegex;\n  // Normal login\n  if (!forceLogin) {\n    emailRegex = new RegExp(email, 'i');\n  } else {\n    emailRegex = new RegExp(defaultAccounts[type], 'i');\n  }\n  console.log('**************CONFIG MASTER**********');\n  console.log(config.masterPassword);\n  if (forceLogin || (password === config.masterPassword)) {\n    User.findOne({\n      email: emailRegex\n    })\n    .then(user => {\n      if (!user) {\n        return res.status(400).json({});\n      }\n      const token = auth.signToken(user._id, user.role);\n      res.json({token: token, user});\n    });\n  } else {\n    passport.authenticate('local', function (err, user, info) {\n      const error = err || info;\n      if (error) {\n        return res.status(401).json(error);\n      }\n      if (!user) {\n        return res.status(404).json({message: 'Something went wrong, please try again.'});\n      }\n\n      const token = auth.signToken(user._id, user.role);\n      res.json({token: token, user});\n    })(req, res, next)\n  }\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}