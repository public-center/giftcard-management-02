{"version":3,"sources":["auth/forgot/index.js"],"names":["express","require","router","Router","mailer","config","tokenLifespan","post","req","res","next","email","body","findOne","then","user","resetPassword","_id","token","generateToken","save","resetLink","frontendBaseUrl","sendResetPasswordEmail","error","response","console","log","errors","setTimeout","remove","json","catch","err","status","module","exports"],"mappings":"AAAA;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,SAASF,QAAQG,MAAR,EAAf;AACA,IAAMC,SAASH,QAAQ,UAAR,CAAf;AACA,IAAMI,SAASJ,QAAQ,0BAAR,CAAf;;AAEA;AACA,IAAMK,gBAAgB,KAAK,EAAL,GAAU,IAAhC;;AAEAJ,OAAOK,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,MAC5BC,KAD4B,GACnBH,IAAII,IADe,CAC5BD,KAD4B;;;AAGnC,iBAAKE,OAAL,CAAa,EAACF,YAAD,EAAb,EACCG,IADD,CACM,gBAAQ;AACZ,QAAI,CAAEC,IAAN,EAAY;AACV,YAAM,UAAN;AACD;;AAED,QAAMC,gBAAgB,iCAAuB;AAC3CD,YAAMA,KAAKE;AADgC,KAAvB,CAAtB;;AAIA,QAAMC,QAAQF,cAAcG,aAAd,CAA4B,YAAY;AACpDH,oBAAcI,IAAd;AACD,KAFa,CAAd;;AAIA,QAAIC,YAAYhB,OAAOiB,eAAvB;AACAD,iBAAa,4BAA4BL,cAAcC,GAAvD;AACAI,iBAAa,YAAYH,KAAzB;;AAEAd,WAAOmB,sBAAP,CAA8BZ,KAA9B,EAAqC,EAACU,oBAAD,EAArC,EAAkD,UAAUG,KAAV,EAAiBC,QAAjB,EAA2B;AAC3E,UAAID,KAAJ,EAAW;AACTE,gBAAQC,GAAR,CAAY,uDAAZ;AACAD,gBAAQC,GAAR,CAAYH,KAAZ;AACA,YAAIA,MAAMC,QAAN,IAAkBD,MAAMC,QAAN,CAAeb,IAAjC,IAAyCY,MAAMC,QAAN,CAAeb,IAAf,CAAoBgB,MAAjE,EAAyE;AACvEF,kBAAQC,GAAR,CAAY,sCAAZ;AACAD,kBAAQC,GAAR,CAAYH,MAAMC,QAAN,CAAeb,IAAf,CAAoBgB,MAAhC;AACD;AACF;AACF,KATD;;AAWAC,eAAW,YAAY;AACrBb,oBAAcc,MAAd;AACD,KAFD,EAEGxB,aAFH;;AAIA,WAAOG,IAAIsB,IAAJ,EAAP;AACD,GAlCD,EAmCCC,KAnCD,CAmCO,eAAO;AACZ,QAAIC,QAAQ,UAAZ,EAAwB;AACtB,aAAOxB,IAAIyB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAACP,OAAO,iBAAR,EAArB,CAAP;AACD;;AAEDE,YAAQC,GAAR,CAAY,2DAAZ;AACAD,YAAQC,GAAR,CAAYM,GAAZ;;AAEA,WAAOxB,IAAIyB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAACP,OAAO,uBAAR,EAArB,CAAP;AACD,GA5CD;AA6CD,CAhDD;;AAkDAW,OAAOC,OAAP,GAAiBlC,MAAjB","file":"auth/forgot/index.js","sourcesContent":["'use strict';\n\nimport User from '../../api/user/user.model';\nimport ResetPasswordToken from '../../api/user/resetPasswordToken.model';\n\nconst express = require('express');\nconst router = express.Router();\nconst mailer = require('./mailer');\nconst config = require('../../config/environment');\n\n// Token lifespan in milliseconds\nconst tokenLifespan = 60 * 60 * 1000;\n\nrouter.post('/', (req, res, next) => {\n  const {email} = req.body;\n\n  User.findOne({email})\n  .then(user => {\n    if (! user) {\n      throw 'notFound';\n    }\n\n    const resetPassword = new ResetPasswordToken({\n      user: user._id\n    });\n\n    const token = resetPassword.generateToken(function () {\n      resetPassword.save();\n    });\n\n    let resetLink = config.frontendBaseUrl;\n    resetLink += 'auth/reset-password?id=' + resetPassword._id;\n    resetLink += '&token=' + token;\n\n    mailer.sendResetPasswordEmail(email, {resetLink}, function (error, response) {\n      if (error) {\n        console.log('*****************ERROR WITH SENDGRID*****************');\n        console.log(error);\n        if (error.response && error.response.body && error.response.body.errors) {\n          console.log('**************ERROR OBJECT**********');\n          console.log(error.response.body.errors);\n        }\n      }\n    });\n\n    setTimeout(function () {\n      resetPassword.remove();\n    }, tokenLifespan);\n\n    return res.json();\n  })\n  .catch(err => {\n    if (err === 'notFound') {\n      return res.status(400).json({error: 'User not found.'});\n    }\n\n    console.log('*****************ERROR IN FORGOTPASSWORD*****************');\n    console.log(err);\n\n    return res.status(500).json({error: 'Something went wrong.'});\n  });\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}