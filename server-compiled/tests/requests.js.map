{"version":3,"sources":["tests/requests.js"],"names":["Requests","type","setNumber","request","post","send","email","credentials","password","then","res","to","have","status","body","token","not","be","empty","tokens","_id","user","toString","catch","equal","retailerId","getDefaultReferenceId","customerId","storeId","cardNumber","balance","tokenType","params","Date","set","number","pin","retailer","customer","userTime","format","Object","assign","find","cards","requestBody","userType","merchandise","memo","transactionTotal","transactionId","prefix","vmMemo1","vmMemo2","vmMemo3","vmMemo4","biLogParams","requestId","employee1","callbackType","inventories","put","admin1","force","findById","gsId","aiId","biCallbackKeyHeader","biCallbackKey","ids"],"mappings":"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","file":"tests/requests.js","sourcesContent":["import {expect} from 'chai';\nimport moment from 'moment';\n\nimport Card from '../api/card/card.model';\nimport config from '../config/environment';\nimport Retailer from '../api/retailer/retailer.model';\n\nexport default class Requests {\n  /**\n   * Login as a user of any type\n   * @param type Type of user\n   * @param setNumber Which set of data we're referring to\n   */\n  async loginUserSaveToken(type, setNumber = 1) {\n    return await this.request\n    .post('/api/auth/local')\n    .send({\n      email   : this.credentials[`${type}${setNumber}`].email,\n      password: this.credentials[`${type}${setNumber}`].password\n    })\n    .then(res => {\n      expect(res).to.have.status(200);\n      expect(res.body.token).to.not.be.empty;\n      this.tokens[`${type}${setNumber}`].token = res.body.token;\n      this.tokens[`${type}${setNumber}`]._id   = res.body.user._id.toString();\n    })\n    .catch(() => {\n      expect(false).to.be.equal(true)\n    });\n  }\n\n  /**\n   * Create a card from UI interaction\n   * @param setNumber\n   * @return {Promise.<void>}\n   */\n  async createCardFromUi(setNumber = 1) {\n    const retailerId = this.getDefaultReferenceId('retailers', setNumber);\n    const customerId = this.getDefaultReferenceId('customers', setNumber);\n    const storeId    = this.getDefaultReferenceId('stores', setNumber);\n    this.cardNumber  = this.cardNumber + 1;\n    const balance    = 50 * setNumber;\n    const tokenType  = `employee${setNumber}`;\n    const params     = {\n      \"retailer\": retailerId,\n      \"number\"  : this.cardNumber,\n      \"pin\"     : this.cardNumber,\n      \"customer\": customerId,\n      \"store\"   : storeId,\n      \"userTime\": new Date(),\n      \"balance\" : balance\n    };\n    await this.request\n    .post('/api/card/newCard')\n    .set('Authorization', `bearer ${this.tokens[tokenType].token}`)\n    .send(params)\n    .then(async res => {\n      expect(res).to.have.status(200);\n      return res;\n    });\n  }\n\n  /**\n   * Create a card from lq/new\n   * @param setNumber\n   * @return {Promise.<TResult>}\n   */\n  async createCardFromLqNew(setNumber = 1) {\n    this.cardNumber = this.cardNumber + 1;\n    const balance   = 50 * setNumber;\n    const tokenType = `employee${setNumber}`;\n    const params    = {\n      number  : this.cardNumber,\n      pin     : this.cardNumber,\n      retailer: this.getDefaultReferenceId('retailers', setNumber),\n      customer: this.getDefaultReferenceId('customers', setNumber),\n      userTime: moment().format(),\n      balance : balance\n    };\n\n    return await this.request\n    .post('/api/lq/new')\n    .set('Authorization', `bearer ${this.tokens[tokenType].token}`)\n    .send(params)\n    .then(async res => {\n      expect(res).to.have.status(200);\n      return res;\n    });\n  }\n\n  /**\n   * Create a card from a transaction\n   * @param params Additional params\n   * @param setNumber\n   * @return {Promise.<TResult>}\n   */\n  async createCardFromTransaction(params, setNumber = 1) {\n    this.cardNumber = this.cardNumber + 1;\n    const balance   = 50 * setNumber;\n    const tokenType = `employee${setNumber}`;\n    params    = Object.assign({\n      number            : this.cardNumber,\n      pin               : this.cardNumber,\n      retailer          : this.getDefaultReferenceId('retailers', setNumber),\n      \"userTime\"        : moment().format(),\n      \"balance\"         : balance,\n      \"memo\"            : `memo${setNumber}`,\n      \"merchandise\"     : false,\n      \"transactionTotal\": 50,\n      \"transactionId\"   : 12345,\n      \"customerId\"      : this.getDefaultReferenceId('customers', setNumber),\n      \"storeId\"         : this.getDefaultReferenceId('stores', setNumber),\n      \"prefix\"          : `prefix${setNumber}`,\n      \"vmMemo1\"         : \"a\",\n      \"vmMemo2\"         : \"b\",\n      \"vmMemo3\"         : \"c\",\n      \"vmMemo4\"         : \"d\"\n    }, params);\n\n    return await this.request\n    .post('/api/lq/transactions')\n    .set('Authorization', `bearer ${this.tokens[tokenType].token}`)\n    .send(params)\n    .then(async res => {\n      expect(res).to.have.status(200);\n      return res;\n    });\n  }\n\n  /**\n   * Add card to inventory from UI\n   * @param setNumber\n   * @return {Promise.<TResult>}\n   */\n  async addCardsToInventory(setNumber = 1) {\n    const tokenType   = `employee${setNumber}`;\n    const cards       = await Card.find({user: this.tokens[tokenType]._id});\n    const requestBody = {\n      \"cards\"          : cards,\n      \"userTime\"       : new Date(),\n      \"receipt\"        : false,\n      \"modifiedDenials\": 0,\n    };\n    return await this.request\n    .post('/api/card/addToInventory')\n    .set('Authorization', `bearer ${this.tokens[tokenType].token}`)\n    .send(requestBody)\n    .then(async res => {\n      expect(res).to.have.status(200);\n      return res;\n    });\n  }\n\n  /**\n   * Request /lq/new\n   * @param params Request body\n   * @param userType Type of user making request\n   * @param setNumber Set of cards, users, etc\n   * @return {Promise.<*>}\n   */\n  async lqNew(params, userType = 'corporateAdmin', setNumber = 1) {\n    if (!params) {\n      this.cardNumber = this.cardNumber + 1;\n      params          = {\n        number     : this.cardNumber,\n        pin        : this.cardNumber,\n        retailer   : this.getDefaultReferenceId('retailers', setNumber),\n        userTime   : moment().format(),\n        balance    : 40,\n        merchandise: false\n      };\n    }\n\n    return await this.request\n    .post('/api/lq/new')\n    .set('Authorization', `bearer ${this.tokens[`${userType}${setNumber}`].token}`)\n    .send(params);\n  }\n\n  /**\n   * Request /lq/transactions\n   * @param params Request body\n   * @param userType Type of user making request\n   * @param setNumber Set of cards, users, etc\n   * @return {Promise.<*>}\n   */\n  async lqTransactions(params = {}, userType = 'corporateAdmin', setNumber = 1) {\n    this.cardNumber = this.cardNumber + 1;\n    const balance   = 50 * setNumber;\n    if (params === null) {\n      params = {};\n    } else {\n      params = Object.assign({\n        number          : this.cardNumber,\n        pin             : this.cardNumber,\n        retailer        : this.getDefaultReferenceId('retailers', setNumber),\n        userTime        : new Date(),\n        balance         : balance,\n        memo            : \"Match example\",\n        merchandise     : false,\n        transactionTotal: 50,\n        transactionId   : 12345,\n        customerId      : this.getDefaultReferenceId('customers', setNumber),\n        storeId         : this.getDefaultReferenceId('stores', setNumber),\n        prefix          : \"xyz\",\n        vmMemo1         : \"a\",\n        vmMemo2         : \"b\",\n        vmMemo3         : \"c\",\n        vmMemo4         : \"d\"\n      }, params);\n    }\n\n    return await this.request\n    .post('/api/lq/transactions')\n    .set('Authorization', `bearer ${this.tokens[`${userType}${setNumber}`].token}`)\n    .send(params);\n  }\n\n  /**\n   * Create a BI request log\n   * @param params Additional params for log\n   * @return {Promise.<void>}\n   */\n  async createBiLog(params = {}) {\n    const biLogParams = Object.assign({\n      number   : '1',\n      pin      : '1',\n      retailer : this.getDefaultReferenceId('retailers'),\n      requestId: '1',\n      prefix   : '1'\n    }, params);\n    return await this.request\n    .post('/api/lq/bi')\n    .set('Authorization', `bearer ${this.tokens.employee1.token}`)\n    .send(biLogParams);\n  }\n\n  /**\n   * Send callbacks for transaction\n   * @param callbackType Callback type\n   * @param inventories Inventories to send callbacks for\n   * @return {Promise.<*>}\n   */\n  async sendTransactionCallback(callbackType, inventories) {\n    return this.request.put(`/api/admin/callbacks/${callbackType}`)\n    .set('Authorization', `bearer ${this.tokens.admin1.token}`)\n    .send({\n      inventories,\n      type : callbackType,\n      force: true\n    });\n  }\n\n  /**\n   * Complete a BI log\n   * @param params\n   * @param requestId BI request ID\n   * @return {Promise.<void>}\n   */\n  async completeBiLog(params = {}, requestId = '1') {\n    if (params === null) {\n      params = {};\n    } else {\n      params            = Object.assign({\n        \"number\"    : 1,\n        \"pin\"       : 1,\n        \"retailerId\": this.getDefaultReferenceId('retailers'),\n        \"invalid\"   : 0,\n        \"balance\"   : 100,\n        \"fixed\"     : 0\n      }, params);\n    }\n    const retailer = await Retailer.findById(params.retailerId);\n    if (retailer) {\n      // Set the BI value for retailer\n      params.retailerId = retailer.gsId || retailer.aiId;\n    }\n    return this.request.post(`/api/lq/bi/${requestId}`)\n    .set(config.biCallbackKeyHeader, config.biCallbackKey)\n    .send(params);\n  }\n\n  /**\n   * Update inventory details\n   * @param {Array} inventories Selected inventories\n   * @param {Object} params\n   */\n  async updateInventoryDetails(inventories, params = {}) {\n    return this.request.post(`/api/card/updateDetails`)\n    .set('Authorization', `bearer ${this.tokens.admin1.token}`)\n    .send(Object.assign({\n      ids: inventories\n    }, params));\n  }\n\n  /**\n   * Reject card\n   */\n  async rejectCard(inventories) {\n    return this.request.post(`/api/card/reject`)\n    .set('Authorization', `bearer ${this.tokens.admin1.token}`)\n    .send({\n      inventories: inventories\n    });\n  }\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}