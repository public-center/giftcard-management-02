{"version":3,"sources":["tests/helpers.js"],"names":["TestHelper","chaiRequest","companies","users","stores","customers","retailers","biRequestLogs","references","credentials","resetCredentials","tokens","resetTokens","cardNumber","before","clearData","connection","db","clearDb","connect","uri","done","remove","admin1","email","password","admin2","corporateAdmin1","corporateAdmin2","manager1","manager2","employee1","employee2","_id","token","Error","error","console","log","stack","type","setNumber","generateStackTrace","reference","to","be","equal","adminUserParams","create","companyParams","userParams","settingsParams","storeParams","name","address1","address2","city","state","zip","phone","store","Object","assign","company","getSettings","settings","findById","entries","key","value","save","user","push","managerParams","getDefaultReferenceId","companyId","storeData","managerData","storeId","employeeParams","customerJson","customer","attrs","retailerParams","sellRates","cardCash","cardPool","giftcardZen","smpMaxMin","max","min","smpType","retailer","params","createRetailer","completed","logParams","pin","number","retailerId","fixed","finalized","created","Date","balance","requestId","responseCode","responseDateTime","format","responseMessage","verificationType","responseBody","properties","forEach","have","property","prop","err","response","res","body","errorNames","status","getErrBody","errors","lengthOf","length","i","response_datetime","toString","request_id","recheck","recheckDateTime","add","userType","customerId","employeeToken","request","post","set","send","use"],"mappings":"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","file":"tests/helpers.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport mongoose from 'mongoose';\nimport {expect} from 'chai';\nimport moment from 'moment';\n\nimport {mongo} from '../config/environment'\n\nimport Batch from '../api/batch/batch.model';\nimport BiRequestLog from '../api/biRequestLog/biRequestLog.model';\nimport BuyRate from '../api/buyRate/buyRate.model';\nimport CallbackLog from '../api/callbackLog/callbackLog.model';\nimport Card from '../api/card/card.model';\nimport CardUpdates from '../api/cardUpdates/cardUpdates.model';\nimport Company from '../api/company/company.model';\nimport Customer from '../api/customer/customer.model';\nimport CustomerEdit from '../api/customerEdit/customerEdit.model';\nimport DemonError from '../api/daemonError/daemonError.model';\nimport DeferredBalanceUpdates from '../api/deferredBalanceInquiries/deferredBalanceInquiries.model';\nimport DenialPayment from '../api/denialPayment/denialPayment.model';\nimport Inventory from '../api/inventory/inventory.model';\nimport Log from '../api/log/logs.model';\nimport Receipt from '../api/receipt/receipt.model';\nimport Reconciliation from '../api/reconciliation/reconciliation';\nimport Reserve from '../api/reserve/reserve.model';\nimport Retailer from '../api/retailer/retailer.model';\nimport Store from '../api/stores/store.model';\nimport SystemSettings from '../api/systemSettings/systemSettings.model';\nimport Tango from '../api/tango/tango.model';\nimport User from '../api/user/user.model';\n\nimport app from '../app';\nimport Requests from './requests';\nimport '../api/company/autoBuyRate.model';\nimport CompanySettings from '../api/company/companySettings.model';\n\nexport default class TestHelper extends Requests {\n  /**\n   * Store information on users, companies, stores, and customers\n   * @type {{}}\n   */\n  constructor() {\n    super();\n    this.chaiRequest = null;\n    // Created objects\n    this.companies = [];\n    this.users = [];\n    this.stores = [];\n    this.customers = [];\n    this.retailers = [];\n    this.biRequestLogs = [];\n    /**\n     * Keep reference to all of the above in a single data structure\n     */\n    this.references = {};\n    /**\n     * Credentials used for creating test users\n     */\n    this.credentials = this.resetCredentials();\n    /**\n     * Store login tokens so we can send them with subsequent requests\n     */\n    this.tokens = this.resetTokens();\n    // Current card number (when creating new cards)\n    this.cardNumber = 0;\n  }\n\n  /**\n   * Request singleton\n   * @return {null|*}\n   */\n  get request() {\n    if (this.chaiRequest) {\n      return this.chaiRequest;\n    }\n    chai.use(chaiHttp);\n    this.chaiRequest = chai.request(app);\n    return this.chaiRequest;\n  }\n\n  /**\n   * Initialize the DB for testing\n   */\n  initDb() {\n    before(async () => {\n      this.clearData();\n      if (mongoose.connection.db) {\n        return await this.clearDb();\n      }\n      mongoose.connect(mongo.uri, done);\n    });\n  }\n\n  /**\n   * Reset all data\n   */\n  clearData() {\n    this.users = [];\n    this.companies = [];\n    this.stores = [];\n    this.customers = [];\n    // Set references to the data\n    this.references.companies = this.companies;\n    this.references.users = this.users;\n    this.references.stores = this.stores;\n    this.references.customers = this.customers;\n    this.references.retailers = this.retailers;\n\n    this.credentials = this.resetCredentials();\n    this.tokens = this.resetTokens();\n    // Reset card number for iterating multiple cards\n    this.cardNumber = 0;\n  }\n\n  /**\n   * Clear the DB after each run\n   * @return {Promise.<void>}\n   */\n  async clearDb() {\n    await Batch.remove();\n    await BiRequestLog.remove();\n    await BuyRate.remove();\n    await CallbackLog.remove();\n    await Card.remove();\n    await CardUpdates.remove();\n    await Company.remove();\n    await Customer.remove();\n    await CustomerEdit.remove();\n    await DemonError.remove();\n    await DeferredBalanceUpdates.remove();\n    await DenialPayment.remove();\n    await Inventory.remove();\n    await Log.remove();\n    await Receipt.remove();\n    await Reconciliation.remove();\n    await Reserve.remove();\n    await Retailer.remove();\n    await Store.remove();\n    await SystemSettings.remove();\n    await Tango.remove();\n    await Retailer.remove();\n    await User.remove();\n  }\n\n  /**\n   * Reset credentials for each new test set\n   */\n  resetCredentials() {\n    return {\n      admin1: {\n        email: 'admin1@test.com',\n        password: 'test'\n      },\n      admin2: {\n        email: 'admin2@test.com',\n        password: 'test'\n      },\n      corporateAdmin1: {\n        email: 'corporateadmin1@test.com',\n        password: 'test'\n      },\n      corporateAdmin2: {\n        email: 'corporateadmin2@test.com',\n        password: 'test'\n      },\n      manager1: {\n        email: 'manager1@test.com',\n        password: 'test'\n      },\n      manager2: {\n        email: 'manager2@test.com',\n        password: 'test'\n      },\n      employee1: {\n        email: 'employee1@test.com',\n        password: 'test'\n      },\n      employee2: {\n        email: 'employee2@test.com',\n        password: 'test'\n      }\n    };\n  }\n\n  /**\n   * Reset tokens for each test set\n   */\n  resetTokens() {\n    return {\n      admin1: {\n        _id: null,\n        token: null\n      },\n      admin2: {\n        _id: null,\n        token: null\n      },\n      corporateAdmin1: {\n        _id: null,\n        token: null\n      },\n      corporateAdmin2: {\n        _id: null,\n        token: null\n      },\n      manager1: {\n        _id: null,\n        token: null\n      },\n      manager2: {\n        _id: null,\n        token: null\n      },\n      employee1: {\n        _id: null,\n        token: null\n      },\n      employee2: {\n        _id: null,\n        token: null\n      }\n    };\n  }\n\n  /**\n   * Generate a stacktrace\n   */\n  generateStackTrace() {\n    try {\n      throw Error();\n    } catch (error) {\n      console.log(error.stack);\n    }\n  }\n\n  /**\n   * Get reference ID of a default record (default being the first one in the array of references)\n   * @param type\n   * @param setNumber Which set of data we're referring to\n   */\n  getDefaultReferenceId(type, setNumber = 1) {\n    if (!type) {\n      this.generateStackTrace();\n      throw 'Unable to determine reference type';\n    }\n    const reference = this.references[type];\n    if (!reference) {\n      expect(true).to.be.equal(false);\n    }\n    return reference[setNumber - 1]._id;\n  }\n\n  /**\n   * Create an admin user\n   * @param setNumber Which set of data we're referring to\n   * @return {Promise.<void>}\n   */\n  async createAdminUser(setNumber = 1) {\n    const adminUserParams = {\n      'firstName': 'test',\n      'lastName' : 'test',\n      'email'    : this.credentials[`admin${setNumber}`].email,\n      'password' : this.credentials[`admin${setNumber}`].password,\n      'role'     : 'admin'\n    };\n    return await User.create(adminUserParams);\n  }\n\n  /**\n   * Create company and admin user\n   * @param setNumber Set number\n   * @param companyParams Additional company params\n   * @param userParams Additional user params\n   * @param settingsParams Additional company settings params\n   * @return {Promise.<void>}\n   */\n  async createCompanyAndCorporateAdminUser(setNumber = 1, companyParams = {}, userParams = {}, settingsParams = {}) {\n    const storeParams = {\n      name: `testStore${setNumber}`,\n      address1: 'test',\n      address2: 'test',\n      city: 'test',\n      state: 'TN',\n      zip: '77777',\n      phone: '333333333'\n    };\n    // Create store\n    const store = await Store.create(storeParams);\n    companyParams = Object.assign({\n      'name'       : `Test${setNumber}`,\n      'address1'   : 'test',\n      'address2'   : 'test',\n      'city'       : 'test',\n      'state'      : 'TN',\n      'zip'        : '55555',\n      'stores'      : [store._id]\n    }, companyParams);\n    // Create company\n    let company = await Company.create(companyParams);\n    let settings = await company.getSettings();\n    settings = await CompanySettings.findById(settings._id);\n    // Update company settings\n    for (const [key, value] of Object.entries(settingsParams)) {\n      settings[key] = value;\n    }\n    await settings.save();\n    userParams = Object.assign({\n      'firstName': 'corporate',\n      'lastName' : 'corporate',\n      'email'    : this.credentials[`corporateAdmin${setNumber}`].email,\n      'password' : this.credentials[`corporateAdmin${setNumber}`].password,\n      'role'     : 'corporate-admin',\n      'company'  : company._id,\n    }, userParams);\n    const user = await User.create(userParams);\n    // Retrieve records from DB\n    this.companies.push(company);\n    this.users.push(user);\n  }\n\n  /**\n   * Create a store and manager\n   * @param setNumber Which set of data we're referring to\n   * @param storeParams Addition store parameters\n   * @param managerParams Additional manager parameters\n   * @return {Promise.<void>}\n   */\n  async createStoreAndManager(setNumber = 1, storeParams = {}, managerParams = {}) {\n    // Default to first company\n    const companyId = await this.getDefaultReferenceId('companies', setNumber);\n    // Create store\n    const storeData = Object.assign({\n      name: `Test${setNumber}`,\n      companyId: companyId\n    }, storeParams);\n    const store = await Store.create(storeData);\n    this.stores.push(store);\n    // Create store manager\n    const managerData = Object.assign({\n      'firstName': 'manager',\n      'lastName' : 'manager',\n      'email'    : this.credentials[`manager${setNumber}`].email,\n      'password' : this.credentials[`manager${setNumber}`].password,\n      'role'     : 'manager',\n      'company'  : companyId,\n      'store'    : store._id\n    }, managerParams);\n    const user = await User.create(managerData);\n    this.users.push(user);\n  }\n\n  /**\n   * Create an employee\n   * @param setNumber Which set of data we're referencing\n   */\n  async createEmployee(setNumber = 1) {\n    const storeId = this.getDefaultReferenceId('stores', setNumber);\n    const companyId = this.getDefaultReferenceId('companies', setNumber);\n    // Create employee\n    const employeeParams = {\n      'firstName': 'employee',\n      'lastName' : 'employee',\n      'email'    : this.credentials[`employee${setNumber}`].email,\n      'password' : this.credentials[`employee${setNumber}`].password,\n      'role'     : 'employee',\n      'company'  : companyId,\n      'store'    : storeId\n    };\n    const user = await User.create(employeeParams);\n    this.users.push(user);\n  }\n\n  /**\n   * Create a customer\n   * @param setNumber Which set of data we're referring to\n   * @return {Promise.<void>}\n   */\n  async createCustomer(setNumber = 1) {\n    const companyId = this.getDefaultReferenceId('companies', setNumber);\n    const storeId = this.getDefaultReferenceId('stores', setNumber);\n    // Example customer creation JSON\n    const customerJson = {\n      \"state\"     : \"IA\",\n      \"firstName\" : \"test_customer\",\n      \"middleName\": \"test_customer\",\n      \"lastName\"  : \"test_customer\",\n      \"stateId\"   : \"test_customer\",\n      \"phone\"     : \"5555555555\",\n      \"address1\"  : \"50 test_customer street\",\n      \"address2\"  : \"\",\n      \"city\"      : \"Cincinnati\",\n      \"zip\"       : \"45243\",\n      \"systemId\"  : \"test_customer\",\n      \"company\"   : companyId,\n      \"store\"     : [storeId]\n    };\n    const customer = await Customer.create(customerJson);\n    this.customers.push(customer);\n  }\n\n  /**\n   * Create a test retailer\n   * @param attrs Attributes\n   * @return {Promise.<void>}\n   */\n  async createRetailer(attrs) {\n    const retailerParams = Object.assign({\n      name: 'New Retailer',\n      sellRates: {\n        cardCash: 0.9,\n        cardPool: 0.8,\n        giftcardZen: 0.7\n      },\n      smpMaxMin: {\n        cardCash: {\n          max: 50,\n          min: 0\n        },\n        cardPool: {\n          max: 100,\n          min: 10\n        },\n        giftcardZen: {\n          max: 0,\n          min: 100\n        }\n      },\n      smpType: {\n        cardCash: 'electronic',\n        cardPool: 'physical',\n        giftcardZen: 'electronic'\n      },\n    }, attrs);\n\n    const retailer = await Retailer.create(retailerParams);\n    this.retailers.push(retailer);\n  }\n\n  /**\n   * Create best buy retailer\n   * @return {Promise.<void>}\n   */\n  async createBestBuy(params = {}) {\n    const attrs = Object.assign({\n      \"buyRate\" : 87,\n      \"imageOriginal\" : \"best_buy gift card.jpg (https://dl.airtable.com/nInFcIH7TsuDVvSef6Cn_best_buy%20gift%20card.jpg)\",\n      \"imageUrl\" : \"https://dl.airtable.com/nInFcIH7TsuDVvSef6Cn_best_buy%20gift%20card.jpg\",\n      \"offerType\" : \"\",\n      \"name\" : \"Best Buy\",\n      \"sellRates\" : {\n        \"giftcardZen\" : 0.9,\n        \"cardPool\" : 0.9075,\n        \"best\" : 0.9,\n        \"saveYa\" : 0,\n        \"cardCash\" : 0.91,\n        \"sellTo\" : \"cardcash\"\n      },\n      \"__v\" : 1,\n      \"imageType\" : \"jpg\",\n      \"buyRateRelations\" : [ ],\n      \"verification\" : {\n        \"url\" : \"https://www-ssl.bestbuy.com/site/olstemplatemapper.jsp?id=pcat17043&type=page\",\n        \"phone\" : \"888-716-7994\"\n      },\n      \"smpSpelling\" : {\n        \"cardCash\" : \"Best Buy\",\n        \"saveYa\" : \"Best Buy\",\n        \"cardPool\" : \"Best Buy\"\n      },\n      \"smpType\" : {\n        \"giftcardZen\" : \"electronic\",\n        \"cardPool\" : \"electronic\",\n        \"saveYa\" : \"disabled\",\n        \"cardCash\" : \"electronic\"\n      },\n      \"smpMaxMin\" : {\n        \"saveYa\" : {\n          \"max\" : 1000,\n          \"min\" : 10\n        },\n        \"cardCash\" : {\n          \"max\" : 2000,\n          \"min\" : 50\n        },\n        \"cardPool\" : {\n          \"max\" : 1000,\n          \"min\" : 25\n        },\n        \"giftcardZen\" : {\n          \"min\" : 5,\n          \"max\" : 2000\n        }\n      },\n      \"apiId\" : {\n        \"cardCash\" : \"8\",\n        \"saveYa\" : \"57007\",\n        \"cardPool\" : \"0\"\n      },\n      \"aiId\" : \"7\",\n      \"sellRatesMerch\" : {\n        \"giftcardZen\" : 0.9\n      },\n      \"smpTypeMerch\" : {\n        \"giftcardZen\" : \"electronic\"\n      },\n      \"smpMaxMinMerch\" : {\n        \"cardCash\" : {\n          \"min\" : 50\n        },\n        \"cardPool\" : {\n          \"max\" : 1000\n        },\n        \"giftcardZen\" : {\n          \"max\" : 2000,\n          \"min\" : 5\n        }\n      },\n      \"gsId\" : \"5112\"\n    }, params);\n    await this.createRetailer(attrs);\n  }\n\n  /**\n   * Create a BI request log entry\n   * @param completed BI completed\n   * @param attrs Attributed\n   * @return {Promise.<void>}\n   */\n  async createBiRequestLog(completed = false, attrs = {}) {\n    let logParams;\n    if (completed) {\n      logParams = Object.assign({\n        pin: '1',\n        number: '1',\n        retailerId: this.getDefaultReferenceId('retailers'),\n        fixed : false,\n        finalized : true,\n        created : new Date(),\n        balance : 50,\n        requestId : \"2\",\n        responseCode : \"000\",\n        responseDateTime : moment().format('YYYY-MM-DD'),\n        responseMessage : \"success\",\n        verificationType : \"PJVT_BOT\"\n      }, attrs);\n    } else {\n      logParams = Object.assign({\n        pin: '1',\n        number: '1',\n        retailerId: this.getDefaultReferenceId('retailers')\n      }, attrs);\n    }\n    const log = await BiRequestLog.create(logParams);\n    this.biRequestLogs.push(log);\n  }\n\n  /**\n   * Check that all expected properties are returned from an endpoint query\n   * @param responseBody API response body (res.body)\n   * @param properties Array of properties\n   */\n  checkResponseProperties(responseBody, properties) {\n    properties.forEach(prop => {\n      expect(responseBody).to.have.property(prop);\n    });\n  }\n\n  /**\n   * Get the response body of an error response\n   * @param err\n   */\n  getErrBody(err) {\n    return err.response.res.body;\n  }\n\n  /**\n   * Check validation error response properties\n   * @param err Error response\n   * @param errorNames Name of all validation items that should have failed\n   */\n  checkErrorResponseProperties(err, errorNames) {\n    expect(err).to.have.status(400);\n    const body = this.getErrBody(err);\n    expect(body).to.have.property('error');\n    expect(body.error).to.have.property('errors');\n    const errors = body.error.errors;\n    expect(errors).to.have.lengthOf(errors.length);\n    for (let i = 0; i < errorNames.length; i++) {\n      expect(errors[i].name).to.be.equal(errorNames[i]);\n    }\n  }\n\n  /**\n   * Create a mock BI response\n   * @param setNumber Set number to determine cards and retailers\n   * @param params\n   * @return {*}\n   */\n  createMockBiDeferResponse(setNumber = 1, params = {}) {\n    return {\n      params  : Object.assign({\n        verificationType : 'PJVT_BOT',\n        balance          : 'Null',\n        response_datetime: moment().format(),\n        responseMessage  : 'Delayed Verification Required',\n        requestId        : setNumber.toString(),\n        responseCode     : '010',\n        request_id       : setNumber.toString(),\n        responseDateTime : moment().format(),\n        recheck          : 'True',\n        recheckDateTime  : moment().add(1, 'hours').format()\n      }, params),\n      response: null\n    };\n  }\n\n  /**\n   * Create a mock BI response to gcmgr as callback\n   * @param setNumber Set number to determine cards and retailers\n   * @param params\n   * @return {*}\n   */\n  createMockBiSuccessResponseToGcmgr(setNumber = 1, params = {}) {\n    return Object.assign({\n      params  : {\n        \"number\": setNumber.toString(),\n        \"pin\": setNumber.toString(),\n        \"retailerId\": setNumber.toString(),\n        \"invalid\": 0,\n        \"balance\": 100,\n        \"fixed\": 0\n      },\n    }, params);\n  }\n\n  /**\n   * Create a card so it can be sold\n   * @param {Number} setNumber Set number to use\n   * @param {Object} params Additional params\n   * @param {String} userType Type of user making the request\n   * @return {Promise.<*>}\n   */\n  async createCard(setNumber = 1, params = {}, userType = 'employee') {\n    const retailerId = this.getDefaultReferenceId('retailers', setNumber);\n    const customerId = this.getDefaultReferenceId('customers', setNumber);\n    const storeId    = this.getDefaultReferenceId('stores', setNumber);\n    const employeeToken = `${userType}${setNumber}`;\n    params     = Object.assign({\n      \"retailer\": retailerId,\n      \"number\"  : \"1\",\n      \"pin\"     : \"1\",\n      \"customer\": customerId,\n      \"store\"   : storeId,\n      \"userTime\": new Date(),\n      \"balance\" : 100\n    }, params);\n    return await this.request\n    .post('/api/card/newCard')\n    .set('Authorization', `bearer ${this.tokens[employeeToken].token}`)\n    .send(params)\n  }\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}