{"version":3,"sources":["config/socketio.js"],"names":["config","require","onDisconnect","socket","onConnect","on","data","console","info","address","JSON","stringify","register","module","exports","socketio","handshake","port","process","env","DOMAIN","connectedAt","Date"],"mappings":"AAAA;;;;AAIA;;AAEA,IAAMA,SAASC,QAAQ,eAAR,CAAf;;AAEA;AACA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B,CAC7B;;AAED;AACA,SAASC,SAAT,CAAmBD,MAAnB,EAA2B;AACzB;AACAA,SAAOE,EAAP,CAAU,MAAV,EAAkB,UAAUC,IAAV,EAAgB;AAChCC,YAAQC,IAAR,CAAa,SAAb,EAAwBL,OAAOM,OAA/B,EAAwCC,KAAKC,SAAL,CAAeL,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAxC;AACD,GAFD;;AAIA;AACAL,UAAQ,yBAAR,EAAmCW,QAAnC,CAA4CT,MAA5C;AACD;;AAEDU,OAAOC,OAAP,GAAiB,UAAUC,QAAV,EAAoB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,WAASV,EAAT,CAAY,YAAZ,EAA0B,UAAUF,MAAV,EAAkB;AAC1CA,WAAOM,OAAP,GAAiBN,OAAOa,SAAP,CAAiBP,OAAjB,KAA6B,IAA7B,GACTN,OAAOa,SAAP,CAAiBP,OAAjB,CAAyBA,OAAzB,GAAmC,GAAnC,GAAyCN,OAAOa,SAAP,CAAiBP,OAAjB,CAAyBQ,IADzD,GAETC,QAAQC,GAAR,CAAYC,MAFpB;;AAIAjB,WAAOkB,WAAP,GAAqB,IAAIC,IAAJ,EAArB;;AAEA;AACAnB,WAAOE,EAAP,CAAU,YAAV,EAAwB,YAAY;AAClCH,mBAAaC,MAAb;AACAI,cAAQC,IAAR,CAAa,mBAAb,EAAkCL,OAAOM,OAAzC;AACD,KAHD;;AAKA;AACAL,cAAUD,MAAV;AACD,GAfD;AAgBD,CAhCD","file":"config/socketio.js","sourcesContent":["/**\n * Socket.io configuration\n */\n\n'use strict';\n\nconst config = require('./environment');\n\n// When the user disconnects.. perform this\nfunction onDisconnect(socket) {\n}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', function (data) {\n    console.info('[%s] %s', socket.address, JSON.stringify(data, null, 2));\n  });\n\n  // Insert sockets below\n  require('../api/card/card.socket').register(socket);\n}\n\nmodule.exports = function (socketio) {\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.handshake.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  // socketio.use(require('socketio-jwt').authorize({\n  //   secret: config.secrets.session,\n  //   handshake: true\n  // }));\n\n  socketio.on('connection', function (socket) {\n    socket.address = socket.handshake.address !== null ?\n            socket.handshake.address.address + ':' + socket.handshake.address.port :\n            process.env.DOMAIN;\n\n    socket.connectedAt = new Date();\n\n    // Call onDisconnect.\n    socket.on('disconnect', function () {\n      onDisconnect(socket);\n      console.info('[%s] DISCONNECTED', socket.address);\n    });\n\n    // Call onConnect.\n    onConnect(socket);\n  });\n};\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}