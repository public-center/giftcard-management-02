{"version":3,"sources":["config/express.js"],"names":["express","require","favicon","compression","bodyParser","methodOverride","cookieParser","errorHandler","path","config","passport","session","mongoStore","mongoose","Promise","cors","module","exports","app","use","env","get","urlencoded","extended","json","limit","initialize","static","join","root"],"mappings":"AAAA;;;;AAIA;;AAEA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,UAAUD,QAAQ,eAAR,CAAhB;AACA,IAAME,cAAcF,QAAQ,aAAR,CAApB;AACA,IAAMG,aAAaH,QAAQ,aAAR,CAAnB;AACA,IAAMI,iBAAiBJ,QAAQ,iBAAR,CAAvB;AACA,IAAMK,eAAeL,QAAQ,eAAR,CAArB;AACA,IAAMM,eAAeN,QAAQ,cAAR,CAArB;AACA,IAAMO,OAAOP,QAAQ,MAAR,CAAb;AACA,IAAMQ,SAASR,QAAQ,eAAR,CAAf;AACA,IAAMS,WAAWT,QAAQ,UAAR,CAAjB;AACA,IAAMU,UAAUV,QAAQ,iBAAR,CAAhB;AACA,IAAMW,aAAaX,QAAQ,eAAR,EAAyBU,OAAzB,CAAnB;AACA,IAAME,WAAWZ,QAAQ,UAAR,CAAjB;AACAY,SAASC,OAAT,GAAmBb,QAAQ,UAAR,CAAnB;AACA,IAAMc,OAAOd,QAAQ,MAAR,CAAb;;AAEAe,OAAOC,OAAP,GAAiB,UAASC,GAAT,EAAc;AAC7BA,MAAIC,GAAJ,CAAQJ,MAAR;AACA,MAAMK,MAAMF,IAAIG,GAAJ,CAAQ,KAAR,CAAZ;;AAEA;AACA;AACA;AACAH,MAAIC,GAAJ,CAAQhB,aAAR;AACAe,MAAIC,GAAJ,CAAQf,WAAWkB,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAL,MAAIC,GAAJ,CAAQf,WAAWoB,IAAX,CAAgB,EAACC,OAAO,MAAR,EAAhB,CAAR;AACAP,MAAIC,GAAJ,CAAQd,gBAAR;AACAa,MAAIC,GAAJ,CAAQb,cAAR;AACAY,MAAIC,GAAJ,CAAQT,SAASgB,UAAT,EAAR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI,iBAAiBN,GAArB,EAA0B;AACxBF,QAAIC,GAAJ,CAAQnB,QAAQ2B,MAAR,CAAenB,KAAKoB,IAAL,CAAUnB,OAAOoB,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACAX,QAAIC,GAAJ,CAAQnB,QAAQ2B,MAAR,CAAenB,KAAKoB,IAAL,CAAUnB,OAAOoB,IAAjB,EAAuB,QAAvB,CAAf,CAAR;AACA;AACAX,QAAIC,GAAJ,CAAQZ,cAAR,EAJwB,CAIC;AAC1B;;AAED,MAAI,kBAAkBa,GAAlB,IAAyB,WAAWA,GAAxC,EAA6C;AAC3CF,QAAIC,GAAJ,CAAQlB,QAAQ,oBAAR,GAAR;AACAiB,QAAIC,GAAJ,CAAQnB,QAAQ2B,MAAR,CAAenB,KAAKoB,IAAL,CAAUnB,OAAOoB,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACAX,QAAIC,GAAJ,CAAQnB,QAAQ2B,MAAR,CAAenB,KAAKoB,IAAL,CAAUnB,OAAOoB,IAAjB,EAAuB,QAAvB,CAAf,CAAR;AACA;AACAX,QAAIC,GAAJ,CAAQZ,cAAR,EAL2C,CAKlB;AAC1B;AACF,CAxCD","file":"config/express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nconst express = require('express');\nconst favicon = require('serve-favicon');\nconst compression = require('compression');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst cookieParser = require('cookie-parser');\nconst errorHandler = require('errorhandler');\nconst path = require('path');\nconst config = require('./environment');\nconst passport = require('passport');\nconst session = require('express-session');\nconst mongoStore = require('connect-mongo')(session);\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst cors = require('cors');\n\nmodule.exports = function(app) {\n  app.use(cors());\n  const env = app.get('env');\n\n  //app.set('views', config.root + '/server/views');\n  //app.engine('html', require('ejs').renderFile);\n  //app.set('view engine', 'html');\n  app.use(compression());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json({limit: '50mb'}));\n  app.use(methodOverride());\n  app.use(cookieParser());\n  app.use(passport.initialize());\n\n  // // Persist sessions with mongoStore\n  // // We need to enable sessions for passport twitter because its an oauth 1.0 strategy\n  // app.use(session({\n  //   secret: config.secrets.session,\n  //   resave: true,\n  //   saveUninitialized: true,\n  //   store: new mongoStore({\n  //     mongooseConnection: mongoose.connection,\n  //     db: 'test'\n  //   })\n  // }));\n\n  if ('production' === env) {\n    app.use(express.static(path.join(config.root, '.tmp')));\n    app.use(express.static(path.join(config.root, 'client')));\n    //app.set('appPath', path.join(config.root, 'client'));\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n\n  if ('development' === env || 'test' === env) {\n    app.use(require('connect-livereload')());\n    app.use(express.static(path.join(config.root, '.tmp')));\n    app.use(express.static(path.join(config.root, 'client')));\n    //app.set('appPath', path.join(config.root, 'client'));\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n};\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}