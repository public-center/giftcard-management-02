{"version":3,"sources":["config/environment/index.js"],"names":["path","require","_","envJson","process","env","secret","requiredProcessEnv","name","Error","SAVEYA","CARDCASH","CARDPOOL","GIFTCARDRESCUE","RAISE","EMPLOYEE","GIFTCARDZEN","INVALID","all","NODE_ENV","isStaging","IS_STAGING","debug","root","normalize","__dirname","port","PORT","ip","IP","seedDB","secrets","session","userRoles","testServer","mongo","options","db","safe","smpIds","smpNames","disabledSmps","retailersNoPin","serviceFee","margin","reserveRate","twoWeeks","eightWeeks","sgToken","biCallbackKeyHeader","biCallbackKey","biCodes","success","defer","timeout","headerError","authenticationError","unknownRequest","unauthorized","invalid","retailerNotSupported","retailerDisabled","inStoreBalanceOnly","phoneBalanceOnly","systemDown","statusDisplay","notShipped","shipped","receivedCq","sentToSmp","receivedSmp","rejected","testCardBegin","vistaBiUser","config","merge","IS_PS","isPs","masterPassword","getMasterPassword","findOne","then","isTest","systemSettings","staging","module","exports"],"mappings":"AAAA;;;;;;;;;AAKA;;;;;;;;AAHA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,IAAID,QAAQ,QAAR,CAAV;AACA,IAAME,UAAUF,QAAQ,mBAAR,CAAhB;;AAEA;AACAG,QAAQC,GAAR,CAAYC,MAAZ,GAAqBH,QAAQ,gBAAR,CAArB;;AAEA,SAASI,kBAAT,CAA4BC,IAA5B,EAAkC;AAChC,MAAG,CAACJ,QAAQC,GAAR,CAAYG,IAAZ,CAAJ,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,sBAAsBD,IAAtB,GAA6B,uBAAvC,CAAN;AACD;AACD,SAAOJ,QAAQC,GAAR,CAAYG,IAAZ,CAAP;AACD;;AAED;AACO,IAAME,0BAAS,GAAf;AACA,IAAMC,8BAAW,GAAjB;AACA,IAAMC,8BAAW,GAAjB;AACA,IAAMC,0CAAiB,GAAvB;AACA,IAAMC,wBAAQ,GAAd;AACA,IAAMC,8BAAW,GAAjB;AACA,IAAMC,oCAAc,GAApB;AACA,IAAMC,4BAAU,GAAhB;;AAEP;AACA;AACA,IAAMC,MAAM;AACVb,OAAKD,QAAQC,GAAR,CAAYc,QADP;AAEVC,aAAWhB,QAAQC,GAAR,CAAYgB,UAAZ,KAA2B,MAF5B;AAGVC,SAAO,IAHG;;AAKV;AACAC,QAAMvB,KAAKwB,SAAL,CAAeC,YAAY,WAA3B,CANI;;AAQV;AACAC,QAAMtB,QAAQC,GAAR,CAAYsB,IAAZ,IAAoB,IAThB;;AAWV;AACAC,MAAIxB,QAAQC,GAAR,CAAYwB,EAAZ,IAAkB,SAZZ;;AAcV;AACAC,UAAQ,KAfE;;AAiBV;AACAC,WAAS;AACPC,aAAS5B,QAAQC,GAAR,CAAYC;AADd,GAlBC;;AAsBV;AACA2B,aAAW,CAAC,OAAD,EAAU,UAAV,EAAsB,SAAtB,EAAiC,iBAAjC,EAAoD,OAApD,CAvBD;;AAyBV;AACAC,cAAY,uBA1BF;;AA4BV;AACAC,SAAO;AACLC,aAAS;AACPC,UAAI;AACFC,cAAM;AADJ;AADG;AADJ,GA7BG;;AAqCVC,UAAQ;AACNtB,oBADM;AAENP,kBAFM;AAGNC,sBAHM;AAINC,sBAJM;AAKNC,kCALM;AAMNC,gBANM;AAONC,sBAPM;AAQNC;AARM,GArCE;;AAgDV;AACAwB,wDACGvB,OADH,EACa,SADb,8BAEGP,MAFH,EAEY,QAFZ,8BAGGC,QAHH,EAGc,UAHd,8BAIGE,cAJH,EAIoB,gBAJpB,8BAKGD,QALH,EAKc,UALd,8BAMGE,KANH,EAMW,OANX,8BAOGC,QAPH,EAOc,UAPd,8BAQGC,WARH,EAQiB,aARjB,aAjDU;;AA4DV;;AAEAyB,oEACGxB,OADH,EACa,SADb,kCAEGP,MAFH,EAEY,QAFZ,kCAGGG,cAHH,EAGoB,gBAHpB,kCAIGC,KAJH,EAIW,OAJX,kCAKGC,QALH,EAKc,UALd,iBA9DU;;AAsEV;AACA2B,kBAAgB;AACd,gCAA4B;AADd,GAvEN;;AA2EV;AACAC,cAAY,MA5EF;AA6EV;AACAC,UAAQ,IA9EE;AA+EV;AACAC,eAAa,IAhFH;;AAkFV;AACAC,YAAU,OAnFA;AAoFV;AACAC,cAAY,OArFF;;AAuFV;AACAC,WAAS,uEAxFC;AAyFV;AACAC,uBAAqB,yBA1FX;AA2FVC,iBAAe,0FA3FL;AA4FV;AACAC,WAAS;AACPC,aAAuB,KADhB;AAEPC,WAAuB,KAFhB;AAGPC,aAAuB,KAHhB;AAIPC,iBAAuB,KAJhB;AAKPC,yBAAuB,KALhB;AAMPC,oBAAuB,KANhB;AAOPC,kBAAuB,KAPhB;AAQPC,aAAuB,QARhB;AASPC,0BAAuB,QAThB;AAUPC,sBAAuB,QAVhB;AAWPC,wBAAuB,QAXhB;AAYPC,sBAAuB,QAZhB;AAaPC,gBAAuB;AAbhB,GA7FC;AA4GV;AACAC,iBAAe;AACbC,gBAAY,aADC;AAEbC,aAAS,kBAFI;AAGbC,gBAAY,gBAHC;AAIbC,eAAW,aAJE;AAKbC,iBAAa,iBALA;AAMbC,cAAU;AANG,GA7GL;AAqHV;AACAC,iBAAe,0BAtHL;AAuHV;AACAC,eAAa,CAAC,0BAAD,EAA6B,0BAA7B,EAAyD,0BAAzD;AAxHH,CAAZ;;AA2HA;AACA;AACA,IAAIC,SAASxE,EAAEyE,KAAF,CACXzD,GADW,EAEXjB,QAAQ,OAAOG,QAAQC,GAAR,CAAYc,QAAnB,GAA8B,KAAtC,KAAgD,EAFrC,CAAb;;AAIA;AACA,IAAIuD,OAAOtD,SAAX,EAAsB;AACpBsD,WAASxE,EAAEyE,KAAF,CAAQD,MAAR,EAAgBzE,QAAQ,cAAR,KAA2B,EAA3C,CAAT;AACD;AACD;AACA,IAAIG,QAAQC,GAAR,CAAYuE,KAAhB,EAAuB;AACrBF,SAAOG,IAAP,GAAc,IAAd;AACD;AACD;AACAH,OAAOI,cAAP,GAAwB,IAAxB;;AAEA;;;;AAIA,IAAMC,oBAAoB,SAApBA,iBAAoB,GAAW;AACnC,2BAAeC,OAAf,CAAuB,EAAvB,EACCC,IADD,CACM,0BAAkB;AACtB,QAAIP,OAAOQ,MAAX,EAAmB;AACjB;AACD;AACD,QAAIR,OAAOtD,SAAX,EAAsB;AACpBsD,aAAOI,cAAP,GAAwBK,eAAeC,OAAvC;AACD,KAFD,MAEO;AACLV,aAAOI,cAAP,GAAwBK,eAAeT,OAAOrE,GAAtB,CAAxB;AACD;AACF,GAVD;AAWD,CAZD;;AAcA0E;;AAEAM,OAAOC,OAAP,GAAiBZ,MAAjB","file":"config/environment/index.js","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst _ = require('lodash');\nconst envJson = require('../../../env.json');\nimport SystemSettings from '../../api/systemSettings/systemSettings.model';\n// Set session secret\nprocess.env.secret = envJson['session-secret'];\n\nfunction requiredProcessEnv(name) {\n  if(!process.env[name]) {\n    throw new Error('You must set the ' + name + ' environment variable');\n  }\n  return process.env[name];\n}\n\n// SMP codes\nexport const SAVEYA = '1';\nexport const CARDCASH = '2';\nexport const CARDPOOL = '3';\nexport const GIFTCARDRESCUE = '4';\nexport const RAISE = '5';\nexport const EMPLOYEE = '6';\nexport const GIFTCARDZEN = '7';\nexport const INVALID = '0';\n\n// All configurations will extend these options\n// ============================================\nconst all = {\n  env: process.env.NODE_ENV,\n  isStaging: process.env.IS_STAGING === 'true',\n  debug: true,\n\n  // Root path of server\n  root: path.normalize(__dirname + '/../../..'),\n\n  // Server port\n  port: process.env.PORT || 9000,\n\n  // Server IP\n  ip: process.env.IP || '0.0.0.0',\n\n  // Should we populate the DB with sample data?\n  seedDB: false,\n\n  // Secret for session, you will want to change this and make it an environment variable\n  secrets: {\n    session: process.env.secret\n  },\n\n  // List of user roles\n  userRoles: ['guest', 'employee', 'manager', 'corporate-admin', 'admin'],\n\n  // Test server which simply echoes back the current IP. Used this for testing when you expect an http reques to be made\n  testServer: 'http://httpbin.org/ip',\n\n  // MongoDB connection options\n  mongo: {\n    options: {\n      db: {\n        safe: true\n      }\n    }\n  },\n\n  smpIds: {\n    INVALID,\n    SAVEYA,\n    CARDCASH,\n    CARDPOOL,\n    GIFTCARDRESCUE,\n    RAISE,\n    EMPLOYEE,\n    GIFTCARDZEN\n  },\n\n  // Availabile SMPs\n  smpNames: {\n    [INVALID]: 'invalid',\n    [SAVEYA]: 'saveya',\n    [CARDCASH]: 'cardcash',\n    [GIFTCARDRESCUE]: 'giftcardrescue',\n    [CARDPOOL]: 'cardpool',\n    [RAISE]: 'raise',\n    [EMPLOYEE]: 'employee',\n    [GIFTCARDZEN]: 'giftcardzen',\n  },\n\n  // Disabled SMPs\n\n  disabledSmps: {\n    [INVALID]: 'invalid',\n    [SAVEYA]: 'saveya',\n    [GIFTCARDRESCUE]: 'giftcardrescue',\n    [RAISE]: 'raise',\n    [EMPLOYEE]: 'employee',\n  },\n\n  // Retailers which don't need PIN codes\n  retailersNoPin: {\n    '5668fbff37226093139b9214': true\n  },\n\n  // CQ service fee\n  serviceFee: 0.0075,\n  // CQ margin\n  margin: 0.03,\n  // Reserve rate\n  reserveRate: 0.05,\n\n  // Two weeks in seconds\n  twoWeeks: 1209600,\n  // Two months in seconds\n  eightWeeks: 4838400,\n\n  // Sendgrid API key\n  sgToken: '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',\n  // BI callback key\n  biCallbackKeyHeader: 'x-bi-key-Geqwcak52dgwjh',\n  biCallbackKey: 'Lr9Aff32M9bGp9XKAFqBSzxtu385ioZLKiMz2be3Lhrfr52Jz7sipKicVuYVZimGXYgww9g63JDuYAww7MPsdLYU',\n  // Bi response codes\n  biCodes: {\n    success              : '000',\n    defer                : '010',\n    timeout              : '179',\n    headerError          : '180',\n    authenticationError  : '181',\n    unknownRequest       : '182',\n    unauthorized         : '183',\n    invalid              : '900011',\n    retailerNotSupported : '900016',\n    retailerDisabled     : '900017',\n    inStoreBalanceOnly   : '900020',\n    phoneBalanceOnly     : '900021',\n    systemDown           : '900030'\n  },\n  // Activity status display values\n  statusDisplay: {\n    notShipped: 'Not shipped',\n    shipped: 'In transit to CQ',\n    receivedCq: 'Received by CQ',\n    sentToSmp: 'Sent to SMP',\n    receivedSmp: 'Received by SMP',\n    rejected: 'Rejected by CQ'\n  },\n  // Card status test card begin value\n  testCardBegin: '588689835dbe802d2b0f6074',\n  // Vista's BI user name\n  vistaBiUser: ['5942a7a36c098f61d50e62dc', '5887a9b48b9508e0227749e2', '5887a7218b9508e0227749dd'],\n};\n\n// Export the config object based on the NODE_ENV\n// ==============================================\nlet config = _.merge(\n  all,\n  require('./' + process.env.NODE_ENV + '.js') || {});\n\n// Staging config\nif (config.isStaging) {\n  config = _.merge(config, require('./staging.js') || {});\n}\n// Posting Solutions\nif (process.env.IS_PS) {\n  config.isPs = true;\n}\n// Master password\nconfig.masterPassword = null;\n\n/**\n * Get master password from DB\n * @return {Promise.<void>}\n */\nconst getMasterPassword = function() {\n  SystemSettings.findOne({})\n  .then(systemSettings => {\n    if (config.isTest) {\n      return;\n    }\n    if (config.isStaging) {\n      config.masterPassword = systemSettings.staging;\n    } else {\n      config.masterPassword = systemSettings[config.env];\n    }\n  });\n};\n\ngetMasterPassword();\n\nmodule.exports = config;\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}