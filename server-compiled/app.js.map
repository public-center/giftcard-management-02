{"version":3,"sources":["app.js"],"names":["require","install","process","env","NODE_ENV","express","mongoose","Promise","config","connect","mongo","uri","options","connection","on","err","console","error","exit","app","server","IS_PS","key","readFileSync","cert","requestCert","rejectUnauthorized","createServer","socketio","serveClient","path","use","req","res","next","bind","RUN_DEFER","AUTO_RECON","listen","port","ip","log","get","module","exports"],"mappings":"AAAA;;;;AAIA;;AAIA;;AAuBA;;;;AAEA;;;;AAEA;;;;AAGA;;;;AACA;;;;;;AAjCAA,QAAQ,oBAAR,EAA8BC,OAA9B;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACAC,QAAQC,GAAR,CAAYC,QAAZ,GAAuBF,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAA/C;;AAEA,IAAMC,UAAUL,QAAQ,SAAR,CAAhB;AACA,IAAMM,WAAWN,QAAQ,UAAR,CAAjB;AACAM,SAASC,OAAT,GAAmBP,QAAQ,UAAR,CAAnB;AACA,IAAMQ,SAASR,QAAQ,sBAAR,CAAf;AAEA;;AAEA;;AAEA,0BAAWM,QAAX;AACA;;AAGA;AACAA,SAASG,OAAT,CAAiBD,OAAOE,KAAP,CAAaC,GAA9B,EAAmCH,OAAOE,KAAP,CAAaE,OAAhD;AACAN,SAASO,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAASC,GAAT,EAAc;AAC7CC,UAAQC,KAAR,CAAc,+BAA+BF,GAA7C;AACAb,UAAQgB,IAAR,CAAa,CAAC,CAAd;AACC,CAHF;;AAMA;AACA,IAAMC,MAAMd,SAAZ;;AAEA,IAAIe,eAAJ;AACA;AACA,IAAIlB,QAAQC,GAAR,CAAYkB,KAAZ,KAAsB,MAA1B,EAAkC;AAChC,MAAMT,UAAU;AACdU,SAAK,aAAGC,YAAH,CAAgB,kBAAhB,CADS;AAEdC,UAAM,aAAGD,YAAH,CAAgB,kBAAhB,CAFQ;AAGdE,iBAAa,KAHC;AAIdC,wBAAoB;AAJN,GAAhB;AAMAN,WAASpB,QAAQ,OAAR,EAAiB2B,YAAjB,CAA8Bf,OAA9B,EAAuCO,GAAvC,CAAT;AACD,CARD,MAQO;AACLC,WAASpB,QAAQ,MAAR,EAAgB2B,YAAhB,CAA6BR,GAA7B,CAAT;AACD;AACD,IAAMS,WAAW5B,QAAQ,WAAR,EAAqBoB,MAArB,EAA6B;AAC5CS,eAAarB,OAAOL,GAAP,KAAe,YADgB;AAE5C2B,QAAM;AAFsC,CAA7B,CAAjB;;AAKA;AACAX,IAAIY,GAAJ,CAAQ,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAwB;AAC9BD,MAAInB,EAAJ,CAAO,QAAP,EAAiB,iBAAOqB,IAAP,CAAY,IAAZ,EAAkBH,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,CAAjB;AACAA;AACD,CAHD;;AAKA;AACAlC,QAAQ,mBAAR,EAA6B4B,QAA7B;AACA5B,QAAQ,kBAAR,EAA4BmB,GAA5B;AACAnB,QAAQ,UAAR,EAAoBmB,GAApB;;AAEA;AACA,IAAIjB,QAAQC,GAAR,CAAYiC,SAAZ,KAA0B,MAA1B,IAAoClC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAjE,EAAgF;AAC9E;AACD;;AAED,IAAIF,QAAQC,GAAR,CAAYkC,UAAZ,KAA2B,MAA3B,IAAqCnC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAlE,EAAiF;AAC/E;AACD;;AAED;AACAgB,OAAOkB,MAAP,CAAc9B,OAAO+B,IAArB,EAA2B/B,OAAOgC,EAAlC,EAAsC,YAAY;AAChDxB,UAAQyB,GAAR,CAAY,4CAAZ,EAA0DjC,OAAO+B,IAAjE,EAAuEpB,IAAIuB,GAAJ,CAAQ,KAAR,CAAvE;AACD,CAFD;;AAIA;AACAC,OAAOC,OAAP,GAAiBzB,GAAjB","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nrequire('source-map-support').install();\n\nimport 'babel-polyfill'\n\n// // Register models\n// // Company references\n// import './api/company/autoBuyRate.model';\n// import './api/company/companySettings.model';\n// // Inventory references\n// import './api/inventory/InventoryCache.model';\n// import './api/inventory/inventoryParamCache.model';\n// import './api/log/logs.model';\n// import './api/company/company.model';\n// import './api/card/card.model';\n// import './api/stores/store.model';\n// import './api/reserve/reserve.mode\n\n\n// Set default node environment to development\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nconst express = require('express');\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst config = require('./config/environment');\nimport fs from 'fs';\n// Basic logger\nimport logger from './config/logger';\n// Debug mongoose\nimport debugMongo from './config/debugMongo';\ndebugMongo(mongoose);\n// Run defers\nimport runDefers from './api/deferredBalanceInquiries/runDefers';\nimport autoRecon from './api/reconciliation/autoRecon';\n// Connect to database\nmongoose.connect(config.mongo.uri, config.mongo.options);\nmongoose.connection.on('error', function(err) {\n\tconsole.error('MongoDB connection error: ' + err);\n\tprocess.exit(-1);\n\t}\n);\n\n// Setup server\nconst app = express();\n\nlet server;\n// Run PS without a load balancer, self-signed cert\nif (process.env.IS_PS === 'true') {\n  const options = {\n    key: fs.readFileSync('./ssl/server.key'),\n    cert: fs.readFileSync('./ssl/server.crt'),\n    requestCert: false,\n    rejectUnauthorized: false\n  };\n  server = require('https').createServer(options, app);\n} else {\n  server = require('http').createServer(app);\n}\nconst socketio = require('socket.io')(server, {\n  serveClient: config.env !== 'production',\n  path: '/socket.io-client'\n});\n\n// Log all requests and responses\napp.use(function(req, res, next){\n  res.on('finish', logger.bind(null, req, res, next));\n  next();\n});\n\n// Init app\nrequire('./config/socketio')(socketio);\nrequire('./config/express')(app);\nrequire('./routes')(app);\n\n// Run defer if in development or\nif (process.env.RUN_DEFER === 'true' || process.env.NODE_ENV === 'development') {\n  runDefers();\n}\n\nif (process.env.AUTO_RECON === 'true' || process.env.NODE_ENV === 'development') {\n  autoRecon();\n}\n\n// Start server\nserver.listen(config.port, config.ip, function () {\n  console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n});\n\n// Expose app\nmodule.exports = app;\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}