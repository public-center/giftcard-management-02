{"version":3,"sources":["api/tango/tango_connect.js"],"names":["options","token","Buffer","username","password","toString","domain","_request","method","uri","payload","callback","toUpperCase","qs","headers","json","body","agentOptions","ca","certContent","request","err","req","Error","success","error_message","createAccount","customerId","registerCreditCard","fundAccount","deleteCreditCard","getRewards","placeOrder","getOrderInfo","orderId","getOrderHistory","getCustomers","newCustomer","getAccounts","getAccountById","id","getCustomerAccounts","getCatalogs","verbose","newCard","fund","require","fs","path","readFileSync","join","__dirname"],"mappings":"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","file":"api/tango/tango_connect.js","sourcesContent":["const request = require('request');\nconst fs = require('fs');\nconst path = require('path');\n\nconst certContent = fs.readFileSync(path.join(__dirname, 'ca_cert', 'digicert_chain.pem'));\n\nexport default function (options) {\n  const token = new Buffer(options.username + ':' + options.password).toString('base64'), domain = options.domain ||\n                                                                                          'https://api.tangocard.com';\n\n  const _request = function (method, uri, payload, callback) {\n    if ('undefined' === typeof callback) {\n      callback = payload;\n      payload = null;\n    }\n\n    method = method.toUpperCase() || 'GET';\n\n    const options = {\n      uri: domain + uri,\n      method: method,\n      qs: 'GET' === method ? payload : null,\n      headers: {'Authorization': 'Basic ' + token},\n      json: true,\n      body: 'GET' !== method ? payload : null,\n      agentOptions: {ca: certContent}\n    };\n\n    return request(options, function (err, req, body) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (!body) {\n        return callback(new Error('API Response is empty'));\n      }\n\n      if (false === body.success && 'string' === typeof body.error_message) {\n        return callback(new Error(body.error_message));\n      }\n\n      return callback(null, body);\n    });\n  };\n\n  return {\n    createAccount: function (customerId, payload, callback) {\n      return _request('POST', `customers/${customerId}/accounts`, payload, callback);\n    },\n\n    registerCreditCard: function (payload, callback) {\n      return _request('POST', 'cc_register', payload, callback);\n    },\n\n    fundAccount: function (payload, callback) {\n      return _request('POST', 'cc_fund', payload, callback);\n    },\n\n    deleteCreditCard: function (payload, callback) {\n      return _request('POST', 'cc_unregister', payload, callback);\n    },\n\n    getRewards: function (callback) {\n      return _request('GET', 'rewards', callback);\n    },\n\n    placeOrder: function (payload, callback) {\n      return _request('POST', 'orders', payload, callback);\n    },\n\n    getOrderInfo: function (orderId, callback) {\n      return _request('GET', 'orders/' + orderId, callback);\n    },\n\n    getOrderHistory: function (qs, callback) {\n      return _request('GET', 'orders', qs, callback);\n    },\n\n    getCustomers: function (qs, callback) {\n      return _request('GET', 'customers', qs, callback);\n    },\n\n    /**\n     * Create a new customer\n     * @param payload\n     *    {\n            \"createdAt\": \"string\",\n            \"customerIdentifier\": \"string\",\n            \"displayName\": \"string\",\n            \"status\": \"string\"\n          }\n     * @param callback\n     */\n    newCustomer: (payload, callback) => {\n      return _request('POST', 'customers', payload, callback);\n    },\n    /**\n     * Get accounts\n     */\n    getAccounts: callback => {\n      return _request('GET', 'accounts', callback);\n    },\n    /**\n     * Get an account by ID\n     * @param id\n     * @param callback\n     */\n    getAccountById: (id, callback) => {\n      return _request('GET', `accounts/${id}`, callback);\n    },\n    /**\n     * Get a customer's accounts\n     * @param {Number} customerId\n     * @param {Function} callback\n     */\n    getCustomerAccounts: (customerId, callback) => {\n      return _request('GET', `customers/${customerId}/accounts`, callback);\n    },\n    /**\n     * Get catalogs\n     */\n    getCatalogs: callback => {\n      return _request('GET', 'catalogs', {verbose: false}, callback);\n    },\n    /**\n     * Add a new card\n     */\n    newCard: (payload, callback) => {\n      return _request('POST', 'creditCards', payload, callback);\n    },\n    /**\n     * Fund via a card\n     */\n    fund: (payload, callback) => {\n      return _request('POST', 'creditCardDeposits', payload, callback);\n    }\n  }\n};\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}