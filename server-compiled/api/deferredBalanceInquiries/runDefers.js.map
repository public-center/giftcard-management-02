{"version":3,"sources":["api/deferredBalanceInquiries/runDefers.js"],"names":["find","soldToLiquidation","proceedWithSale","$ne","disableAddToLiquidation","$nin","type","locked","isTransaction","limit","inventories","inventory","findById","_id","populate","save","retailer","populateMerchValues","company","getSettings","companySettings","sellTo","balance","smp","status","liquidationRate","rate","liquidationSoldFor","cqTransactionId","socketUpdate","console","log","create","method","controller","revision","stack","error","sellCardsInLiquidation","dbCompanySettings","recalculating","retailerId","constructor","name","isPlainObject","ObjectId","determineSmp","serviceFeeRate","serviceFee","margin","verifiedBalance","transaction","parseFloat","toFixed","cqPaid","getCqPaid","reserveAmount","getReserveAmount","reserveRate","getTransactionValues","finalizeTransaction","dbInventories","finalInventories","push","finalizeTransactionValues","final","createReserve","createInventoryReserves","dbReserves","valid","then","lockInventories","promises","forEach","Promise","all","settings","setting","index","reserves","reserve","addToRelatedReserveRecords","catch","err","completeTransactions","getRequestOptions","runDefers","Types","biUpdateInteralLength","daemonEmail","intervalLength","daemonUser","dbDeferred","interval","biInterval","activityPath","csvRatesPath","deletePath","liquidationApiKey","liquidationApiPort","liquidationApiUrl","ratesPath","smpMaxMinPath","updateRatesFromLqPath","updateRatesPath","updateRetailerPath","SAVEYA","CARDCASH","CARDPOOL","GIFTCARDRESCUE","INVALID","defaultMargin","queryParams","path","overrides","Object","assign","host","port","stringify","headers","apiKey","lock","updateBiActive","fakeRes","json","startInterval","findOne","email","daemon","setInterval","writeErrors","daemonError","referenceId","referenceModel","e","clearInterval"],"mappings":"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","file":"api/deferredBalanceInquiries/runDefers.js","sourcesContent":["import mongoose from 'mongoose';\nconst ObjectId = mongoose.Types.ObjectId;\nimport _ from 'lodash';\nimport querystring from 'querystring';\nimport uuid from 'node-uuid';\n\nimport '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport config from '../../config/environment';\nimport DaemonError from '../daemonError/daemonError.model';\nimport Inventory from '../inventory/inventory.model';\nimport Retailer from '../retailer/retailer.model';\nimport User from '../user/user.model';\nimport {determineSellTo} from '../card/card.helpers';\nimport {DocumentNotFoundException, SellLimitViolationException} from '../../exceptions/exceptions';\nimport {syncWithBi} from '../retailer/retailer.controller';\nimport {updateInventory} from '../card/card.socket';\n\nimport ErrorLog from '../errorLog/errorLog.model';\nimport {getGitRev} from '../../helpers/errors';\n\nconst biUpdateInteralLength = 1000 * 60 * 60 * 5;\nconst daemonEmail = 'daemon@daemon.com';\nconst intervalLength = 5000;\nlet daemonUser;\nlet dbDeferred;\nlet interval, biInterval;\nlet promises = [];\n\n\n// If I use the http library I can't include http:. If I switch, I should add it back\n// Liquidation API URL\nexport const activityPath = 'sell/activity';\nexport const csvRatesPath = 'sell/smp/update_rate/csv';\nexport const deletePath = 'giftcard/delete';\nexport const liquidationApiKey = '1W7dti8ocRGLl7U';\nexport const liquidationApiPort = 8080;\nexport const liquidationApiUrl = 'http://localhost';\nexport const ratesPath = 'sell/retailers/rates';\nexport const smpMaxMinPath = 'sell/smp/max_min';\nexport const updateRatesFromLqPath = 'sell/retailers/rates?combine=true';\nexport const updateRatesPath = 'sell/retailers/update';\nexport const updateRetailerPath = 'sell/update_retailer';\n\n// SMP codes\nexport const SAVEYA = '1';\nexport const CARDCASH = '2';\nexport const CARDPOOL = '3';\nexport const GIFTCARDRESCUE = '4';\nexport const INVALID = '0';\n\n// Default margin\nexport const defaultMargin = 0.03;\n\n/**\n * Get request options for a particular request\n * @param queryParams Object of query params\n * @param path API path\n * @param overrides\n */\nexport function getRequestOptions(queryParams, path, overrides = {}) {\n  // Initial liquidation communication object\n  return Object.assign({\n    host: liquidationApiUrl,\n    port: liquidationApiPort,\n    path: path + '?' + querystring.stringify(queryParams),\n    headers: {apiKey: liquidationApiKey},\n    method: 'post'\n  }, overrides);\n}\n\n/**\n * Lock/unlock all inventories\n * @param inventories\n * @param lock Lock or unlock\n * @return {Promise.<*>}\n */\nfunction lockInventories(inventories, lock = true) {\n  const promises = [];\n  inventories.forEach(inventory => {\n    inventory.locked = lock;\n    promises.push(inventory.save());\n  });\n  return Promise.all(promises);\n}\n\n/**\n * Sell cards which have been added to the liquidation API\n */\nexport async function sellCardsInLiquidation() {\n  try {\n    const inventories = await Inventory.find({\n      soldToLiquidation: false,\n      // Only if allowed to proceed\n      proceedWithSale: {$ne: false},\n      disableAddToLiquidation: { $nin: ['sell', 'all'] },\n      // Don't sell disabled cards\n      type: {$ne: 'DISABLED'},\n      locked: {$ne: true},\n      // Don't run transactions\n      isTransaction: {$ne: true}\n    })\n    .limit(10);\n\n    for (let inventory of inventories) {\n      // Stop if inventory got locked by another server\n      inventory = await Inventory.findById(inventory._id)\n      .populate('card')\n      .populate('retailer')\n      .populate('company');\n      if (inventory.locked) {\n        continue;\n      }\n      // Lock inventory\n      inventory.locked = true;\n      await inventory.save();\n      // Get retailer with merch values\n      const retailer = inventory.retailer.populateMerchValues(inventory);\n      if (retailer) {\n        const companySettings = await inventory.company.getSettings();\n        const sellTo = determineSellTo(retailer, inventory.balance, companySettings);\n        inventory.soldToLiquidation = true;\n        // No sale\n        if (!sellTo || sellTo.smp === null) {\n          sellTo.smp = '0';\n          inventory.status = 'SALE_FAILED';\n          // Sale\n        } else {\n          inventory.smp = sellTo.smp;\n          inventory.liquidationRate = sellTo.rate;\n          inventory.type = sellTo.type;\n        }\n        if (inventory.smp === '0') {\n          inventory.status = 'SALE_FAILED';\n          inventory.type = 'DISABLED';\n        } else {\n          inventory.status = 'SALE_NON_API';\n          let balance = inventory.balance;\n          let liquidationRate = inventory.liquidationRate;\n          if (typeof balance !== 'number') {\n            balance = 0 ;\n          }\n          if (typeof liquidationRate !== 'number') {\n            liquidationRate = 0;\n          }\n          inventory.liquidationSoldFor = liquidationRate * balance;\n          inventory.cqTransactionId = uuid();\n        }\n        // Unlock card\n        inventory.locked = false;\n        await inventory.save();\n        // Notify frontend\n        updateInventory.socketUpdate(inventory);\n      }\n    }\n  } catch (err) {\n    console.log('**************SELL CARDS ERR**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'sellCardsInLiquidation',\n      controller: 'runDefers',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n  }\n}\n\n/**\n * Determine SMP\n * @param sellTo { rate: 0.58, smp: 'cardCash', type: 'electronic' }\n * @param inventory\n * @return {*}\n */\nfunction determineSmp(sellTo, inventory) {\n  // No sale\n  if (!sellTo || sellTo.smp === null) {\n    sellTo.smp = '0';\n    inventory.status = 'SALE_FAILED';\n    // Sale\n  } else {\n    inventory.smp = sellTo.smp;\n    inventory.liquidationRate = sellTo.rate;\n    inventory.type = sellTo.type;\n  }\n  if (inventory.smp === '0') {\n    inventory.status = 'SALE_FAILED';\n    inventory.type = 'DISABLED';\n  } else {\n    inventory.status = 'SALE_NON_API';\n    let balance = inventory.balance;\n    let liquidationRate = inventory.liquidationRate;\n    if (typeof balance !== 'number') {\n      balance = 0 ;\n    }\n    if (typeof liquidationRate !== 'number') {\n      liquidationRate = 0;\n    }\n    inventory.liquidationSoldFor = liquidationRate * balance;\n    inventory.cqTransactionId = uuid();\n  }\n  return inventory;\n}\n\n/**\n * Finalize transaction values\n * @param inventory\n * @param dbCompanySettings\n * @param recalculating Recalculating a transaction which was previously calculated\n * @return {Promise.<*>}\n */\nexport async function finalizeTransaction(inventory, dbCompanySettings, recalculating = false) {\n  // Use either array of settings or a single settings\n  const companySettings = dbCompanySettings[inventory._id] ? dbCompanySettings[inventory._id] : dbCompanySettings;\n  let retailer;\n  // Populate retailer if we have a plain object\n  let retailerId = null;\n  // Make sure we have a valid retailer object\n  if (inventory.retailer.constructor.name === 'model') {\n    retailer = inventory.retailer;\n  } else {\n    if (_.isPlainObject(inventory.retailer)) {\n      retailerId = inventory.retailer._id;\n    } else if (inventory.retailer instanceof ObjectId) {\n      retailerId = inventory.retailer;\n    }\n    retailer = await Retailer.findById(retailerId);\n  }\n  if (!retailer) {\n    throw new DocumentNotFoundException('Retailer not found', 404);\n  }\n  retailer = retailer.populateMerchValues(inventory);\n  // Don't redetermine SMP if we're recalculating, since SMP might have changes since original purchase\n  if (!recalculating) {\n    // Sell to rates\n    const sellTo = determineSellTo(retailer, inventory.balance, companySettings);\n    // Unable to sell card\n    if (!sellTo) {\n      throw new SellLimitViolationException('Card violates sell limits', 400);\n    }\n    inventory = determineSmp(sellTo, inventory);\n  }\n  // Service fee RATE\n  const serviceFeeRate = typeof inventory.serviceFee !== 'undefined' ? inventory.serviceFee : companySettings.serviceFee;\n  const margin = typeof inventory.margin !== 'undefined' ? inventory.margin : companySettings.margin;\n  const balance = typeof inventory.verifiedBalance === 'number' ? inventory.verifiedBalance : inventory.balance;\n  // Service fee dollar value\n  inventory.transaction.serviceFee = parseFloat((serviceFeeRate * (balance * (inventory.liquidationRate - margin))).toFixed(3));\n  inventory.margin = typeof inventory.margin !== 'undefined' ? inventory.margin : companySettings.margin;\n  // Lock\n  inventory.soldToLiquidation = true;\n  // Determine amount paid\n  const cqPaid = Inventory.getCqPaid(balance, (inventory.liquidationRate - inventory.margin));\n  // Create reserve\n  const reserveAmount = Inventory.getReserveAmount(balance, config.reserveRate);\n  inventory.transaction.reserveAmount = reserveAmount;\n  // Get transaction values\n  inventory = inventory.getTransactionValues(reserveAmount, cqPaid, balance);\n  return inventory.save();\n}\n\n/**\n * Calculate transaction values\n * @param dbInventories\n * @param dbCompanySettings\n * @return {Promise.<*>}\n */\nexport async function finalizeTransactionValues(dbInventories, dbCompanySettings) {\n  const finalInventories = [];\n  for (let inventory of dbInventories) {\n    finalInventories.push(await finalizeTransaction(inventory, dbCompanySettings));\n  }\n  return finalInventories;\n}\n\n/**\n * Create reserve for inventories\n * @param inventories\n * @return {Promise.<Array|*>}\n */\nasync function createInventoryReserves(inventories) {\n  let final = [];\n  for (let inventory of inventories) {\n    final.push(await inventory.createReserve());\n  }\n  return final;\n}\n\n/**\n * Sell cards for transactions\n */\nexport async function completeTransactions() {\n  const dbCompanySettings = {};\n  let dbInventories;\n  let dbReserves;\n  return Inventory.find({\n    soldToLiquidation: false,\n    // Only if allowed to proceed\n    proceedWithSale: {$ne: false},\n    disableAddToLiquidation: { $nin: ['sell', 'all'] },\n    // Don't sell disabled cards\n    type: {$ne: 'DISABLED'},\n    locked: {$ne: true},\n    // Don't run transactions\n    isTransaction: true,\n    // Make sure not invalid\n    valid: {$ne: false}\n  })\n  .populate('card')\n  .populate('retailer')\n  .populate('company')\n  .populate('store')\n  .limit(10)\n  .then(inventories => lockInventories(inventories))\n  .then(inventories => {\n    dbInventories = inventories;\n    const promises = [];\n    inventories.forEach(inventory => {\n      promises.push(inventory.company.getSettings());\n    });\n    return Promise.all(promises);\n  })\n  .then(settings => {\n    settings.forEach((setting, index) =>{\n      dbCompanySettings[dbInventories[index]._id] = setting;\n    });\n  })\n  // Create reserve\n  .then(async () => {\n    // Calculate values for transactions\n    let inventories = await finalizeTransactionValues(dbInventories, dbCompanySettings);\n    return await createInventoryReserves(inventories);\n  })\n  // Add reserve reference to inventory, store, and company\n  .then(async reserves => {\n    dbReserves = reserves;\n    for (let reserve of reserves) {\n      await Inventory.addToRelatedReserveRecords(reserve);\n    }\n  })\n  .then(inventories => lockInventories(dbInventories, false))\n  .then(() => {})\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'completeTransactions',\n      controller: 'runDefers',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    console.log('**************RESOLVE TRANSACTION ERR**********');\n    console.log(err);\n    // Unlock on fuck up\n    lockInventories(dbInventories, false).then(() => {})\n  });\n}\n\n/**\n * Update bi active every 5 hours\n */\nfunction updateBiActive() {\n  const fakeRes = {json: () => {}, status: () => {\n    return {\n      json: () => {}\n    };\n  }};\n  syncWithBi({}, fakeRes);\n}\n\n/**\n * Begin the process\n */\nfunction startInterval() {\n  promises = [];\n  // Find daemon\n  User.findOne({email: daemonEmail})\n  .then(daemon => {\n    // Use daemon for making BI requests\n    if (daemon) {\n      daemonUser = daemon;\n    } else {\n      throw 'Could not find daemon';\n    }\n  })\n  .then(() => {\n    interval = setInterval(() => {\n      // Attempt to sell any cards already in liquidation\n      sellCardsInLiquidation();\n      completeTransactions();\n    }, intervalLength);\n    biInterval = setInterval(() => {\n      // Update BI active\n      updateBiActive();\n    }, biUpdateInteralLength);\n  });\n}\n\n/**\n * Write errors to the Db\n */\nfunction writeErrors() {\n  const daemonError =  new DaemonError();\n  daemonError.referenceId = dbDeferred._id;\n  daemonError.referenceModel = 'DeferredBalanceInquiry';\n  daemonError.save()\n  .catch(err => {\n    console.log('**************DAEMON ERROR SAVE ERROR**********');\n    console.log(err);\n  });\n}\n/**\n * Continually perform balance inquiries on those cards which were returned deferred\n *\n * @todo I need to run this using forever.js, just need to figure out how to get socket into it\n */\nexport default function runDefers() {\n  try {\n    startInterval();\n  } catch (e) {\n    console.log('**************CATCH RUN DEFERS**********');\n    console.log(e);\n    // Make note of the error\n    writeErrors();\n    // Kill the old\n    clearInterval(interval);\n    clearInterval(biInterval);\n    // Bring in the new\n    startInterval();\n  }\n}\n\n/*\n We care about balance, remove buy rate and buy amount\n We need CQ buy amount and CQ buy rate\n We need what we're supposed to pay the customer\n We need to total the columns after filtering\n\n We really need how much we pay and how much our rate is\n We want to see the rate that we got from secondary market at the time which it is sold\n */\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}