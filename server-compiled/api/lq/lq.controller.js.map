{"version":3,"sources":["api/lq/lq.controller.js"],"names":["req","res","body","email","password","token","dbUser","status","json","invalid","findOne","user","authenticate","masterPassword","_id","role","lqCustomerFind","customer","customerId","companyId","company","create","method","controller","revision","stack","error","authenticateLq","firstName","lastName","companyName","models","createUser","remove","store","console","log","createAccount","storeId","toString","createSubUser","createSubAccount","companySettings","margin","cardType","findById","then","getSettings","settings","find","retailers","formatRetailers","filteredRetailers","filter","retailer","biOnly","biEnabled","catch","err","getRetailers","card","userId","requestId","isTransaction","gsId","aiId","populateValues","path","populate","model","constructor","name","inventory","inventoryCompany","finalInventries","save","verifiedBalance","balance","sendCallback","number","pin","doCheckCardBalance","cardId","code","responseMessage","handleLqNewError","responseBodyCard","dbCustomer","dbRetailer","dbBiLog","biComplete","userTime","callbackUrl","pinRequired","replace","length","lqTestCards","fakeRes","createFakeRes","fakeReq","stateId","apiCustomerValues","stores","newCardResponse","response","sellRate","retailerId","buyAmount","Object","assign","toObject","soldFor","balanceStatus","buyRate","updates","valid","cards","receipt","handleCreateInventoryError","__v","created","inventories","isApi","sellTo","smp","toLowerCase","statusCode","proceedWithSale","decorateCardWithSaleStatuses","formatCardResponse","lqNewCard","dbCard","transactionFinal","biValid","biResolved","memo","transactionTotal","transactionId","merchandise","vmMemo1","vmMemo2","vmMemo3","vmMemo4","biSearchValues","getBiLogSearch","biRes","parseBiLog","finalized","customerConstraint","Types","ObjectId","isValid","resFn","dbCompany","dbCompanySettings","dbStore","dbCard1","thisCard","sort","logs","populateMerchValues","nccCardValue","creditValuePercentage","transactionValues","calculateTransactionValues","maxSpending","payoutAmountPercentage","cardValue","merchantPayoutAmount","merchantPayoutPercentage","amountDue","prefix","transaction","addToInventoryResponse","debug","errorRes","getAddToInventoryErrorResponse","cardBeforeResponse","cardBeforeResponseObject","formatResponseCard","rate","cardToDelete","newTransaction","responseCode","parseFloat","responseDateTime","request_id","recheckDateTime","recheck","createBiResponse","response_datetime","bot_statuses","verificationType","parseBiResponse","dbLogs","fakeBi","toUpperCase","makeFakeReqRes","subtract","forEach","val","prop","bi","callbackType","sendCallbackFromCompanySettings","logPopulationValues","resend","rejected","credited","isPlainObject","finalizeLogCardAndInventory","promises","push","completeCardAndInventory","fixed","format","completeBiLog","findParams","cardFindParams","biFindParams","originalLog","newLogVals","newLog","createBiLogAsPartOfCompletion","dbLog","key","get","biCallbackKeyHeader","biCallbackKey","send","params","findByNumber","$or","limit","hasVerifiedBalance","biCompleted","formatDateParams","indexOf","testCardBegin","search","testVal","fakeCardStatus","saleConfirmed","saveYa","confirmed","formatCardStatusResults","claimedBalance","query","processedCards","getCardStatus","setVerifiedBalance","getRetailer","reconcile","getCompanyReserve","getCompanySettings","updateCompanySettings","getStoreCustomers","searchCustomers","getCustomer","deleteCustomer","newCustomer","updateCustomer","createStore","updateStore","getStores","getStore","deleteStore","createEmployee","updateEmployee","deleteEmployee","getEmployees","getEmployee","resetTransactions","mockCreditReject","testCard1","testCard2","testCard3","testCard4","address1","city","state","zip","phone","provider","users","Promise","all","saleFinal","cqAch","saleAccepted","saleVerified","claimedBalanceInaccurate","retailersFinal","smpMaxMin","getSmpMaxMin","type","maxMin","sellRates","smpType","accept","fields","RegExp","test","jsonObject","errorMessage","reason","payoutPercentage","newCardValue","Math","max","min","biLogSearch","biCodes","e","isNaN","add","begin","end","$gt","$lt","activityStatus","displaySellRate","liquidationRate","balanceForCalculations","lastFour","substring","reconciled","reconciliation","saleConfirm","Error","reconcilation","autoSell","minimumAdjustedDenialAmount","customerDataRequired","reserveTotal","getSettingsObject","attr","customerName","enabled","id","employeeId","reserves","companies","$in","dbInventories","map","inv"],"mappings":"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","file":"api/lq/lq.controller.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport mongoose from 'mongoose';\n\nimport '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport BiRequestLog from '../biRequestLog/biRequestLog.model';\nimport Card from '../card/card.model';\nimport Company from '../company/company.model';\nimport Customer from '../customer/customer.model';\nimport Inventory from '../inventory/inventory.model';\nimport Reconciliation from '../reconciliation/reconciliation';\nimport Retailer from '../retailer/retailer.model';\nimport Reserve from '../reserve/reserve.model';\nimport Store from '../stores/store.model';\nimport {notFound, invalidObjectId} from '../../exceptions/exceptions';\nimport User from '../user/user.model';\nimport Callback from '../callbackLog/callback';\n\nimport {\n  addToInventory,\n  checkBalance,\n  checkCardBalance,\n  newCard,\n  rejectCards\n} from '../card/card.controller';\nimport {determineSellTo} from '../card/card.helpers';\nimport {signToken} from '../auth/auth.service';\nimport {\n  newCustomer as newCustomerCustomerController,\n  searchCustomers as searchCustomersCustomerController,\n  updateCustomer as updateCustomerCustomerController,\n  getCustomersThisStore\n} from '../customer/customer.controller';\nimport {\n  deleteEmployee as deleteEmployeeCompanyController,\n  deleteStore as deleteStoreCompanyController,\n  getStoreDetails,\n  getStores as getStoresCompanyController,\n  newEmployee,\n  newStore,\n  updateStore as updateStoreCompanyController,\n} from '../company/company.controller';\nimport {finalizeTransactionValues} from '../deferredBalanceInquiries/runDefers';\nimport {modifyUser} from '../user/user.controller';\nimport {formatFloat} from '../../helpers/number';\nimport config from '../../config/environment';\nimport {getGitRev} from '../../helpers/errors';\n\nimport {SellLimitViolationException} from '../../exceptions/exceptions';\n\nimport ErrorLog from '../errorLog/errorLog.model';\n\nconst testCard1 = '588689835dbe802d2b0f60741';\nconst testCard2 = '588689835dbe802d2b0f60742';\nconst testCard3 = '588689835dbe802d2b0f60743';\nconst testCard4 = '588689835dbe802d2b0f60744';\n\n// LQ customer\nexport const lqCustomerFind = {\n  firstName: 'API',\n  lastName: 'Customer',\n  stateId: 'API_Customer'\n};\n/**\nAuthenticate for LQ\nAccept: application/json\nContent-Type: application/json\nEXAMPLE:\nPOST http://localhost:9000/api/lq/login\nBODY\n{\n\t\"email\": \"jake@noe.com\",\n\t\"password\": \"jakenoe\"\n\t}\nRESULT\n{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiI1N2Q0YTkyMjU3Njk2ZmFjMjQwOGY4YjMiLCJpYXQiOjE0NzM1NTQ3NzQsImV4cCI6MTQ3MzY0MTE3NH0.LTOb_zNvRB798gCFZapXDwEAZOZtrAYFGvjNj4ZtcL8\",\n  \"customerId\": \"57d4a81be48adb9423b270f4\",\n  \"company\": \"58420aa902797e152ab235d7\"\n}\n */\nexport async function authenticateLq(req, res) {\n  const {email, password} = req.body;\n  let token, dbUser;\n  // Missing params\n  if (!email || !password) {\n    res.status(400).json({\n      invalid: 'Both email and password must be supplied to authenticate'\n    });\n    throw 'inUse';\n  }\n\n  try {\n    const user = await User.findOne({ email });\n    if (!user || (!user.authenticate(password) && password !== config.masterPassword)) {\n      return res.status(400).json({invalid: 'Invalid credentials'});\n    }\n    dbUser = user;\n    token = signToken(user._id, user.role);\n\n    const customer = await Customer.findOne(lqCustomerFind);\n    return res.json({token, customerId: customer._id, companyId: dbUser.company});\n  }\n  catch(err) {\n    await ErrorLog.create({\n      method: 'authenticateLq',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id,\n    });\n\n    return res.json({\n      invalid: 'An error has occurred.'\n    });\n  }\n}\n\n/**\n * Create API customer values\n * @param companyId\n * @return {{}}\n */\nexport function apiCustomerValues(companyId) {\n  return {\n    firstName: 'API',\n    lastName: 'Customer',\n    stateId: 'API_Customer',\n    address1: 'a',\n    city: 'a',\n    state: 'a',\n    zip: 'a',\n    phone: 'a',\n    company: companyId\n  };\n}\n\n/**\n * Create an account\n * @param body Request body\n * @param res Response\n * @param models DB models\n */\nfunction createUser(body, res, models) {\n  const {email, companyName} = body;\n  let token, dbCompany, dbStore, dbUser;\n  return User.findOne({\n    email\n  })\n  // See if user exists\n  .then(user => {\n    if (user) {\n      res.status(400).json({invalid: 'Email already in use'});\n      return false;\n    }\n  })\n  // No user, create company\n  .then(company => {\n    if (company === false) {\n      throw 'inUse';\n    }\n    // See if this company already exists\n    if (companyName) {\n      return Company.findOne({\n        name: companyName\n      });\n    }\n    return false;\n  })\n  .then(company => {\n    // Determine whether to create with email or company name\n    const name = company || !companyName ? email : companyName;\n    company = new Company({\n      name\n    });\n    return company.save();\n  })\n  // Create store\n  .then(company => {\n    dbCompany = company;\n    models.company = company;\n    // Create settings\n    dbCompany.getSettings();\n    const store = new Store({\n      name: email,\n      companyId: company._id\n    });\n    return store.save();\n  })\n  // Create user, add company and store to user\n  .then(store => {\n    dbStore = store;\n    models.store = store;\n    const user = new User(Object.assign(body, {\n      provider: 'local',\n      // Company\n      company: dbCompany._id,\n      store: dbStore._id,\n      role: 'corporate-admin'\n    }));\n    return user.save();\n  })\n  // Add user to store\n  .then(user => {\n    dbUser = user;\n    models.user = user;\n    dbStore.users = [dbUser._id];\n    return dbStore.save();\n  })\n  .then(() => {\n    dbCompany.stores = [dbStore._id];\n    return dbCompany.save();\n  })\n  // Add user to company\n  .then(() => {\n    dbCompany.users = [dbUser._id];\n    return dbCompany.save();\n  })\n  .then(() => {\n    token = signToken(dbUser._id, dbUser.role);\n    // Make sure we have a LQ API customer\n    return Customer.findOne(Object.assign({}, lqCustomerFind, {company: dbCompany._id}));\n  })\n  .then(customer => {\n    // Create new customer\n    if (!customer) {\n      customer = new Customer(apiCustomerValues(dbCompany._id));\n      return Promise.all([customer.save(), dbCompany, token]);\n    }\n    return Promise.all([customer, dbCompany, token]);\n  })\n}\n\n/**\n * Adds sale statuses to the given card\n *\n * @param {Object} card\n * @param {Object} inventory\n * @param {Boolean} transaction Whether card is transaction\n * @return {Object}\n */\nfunction decorateCardWithSaleStatuses(card, inventory, transaction = false) {\n  const verifiedBalance = inventory.verifiedBalance;\n  const saleFinal = !!inventory.cqAch;\n  card.saleAccepted = true;\n  card.saleVerified = !!(saleFinal || (verifiedBalance && verifiedBalance > 0));\n  card.saleFinal = saleFinal;\n  card.claimedBalanceInaccurate = !!(verifiedBalance && card.balance > verifiedBalance);\n  if (transaction) {\n    card.transaction = transaction;\n  }\n\n  return card;\n}\n\n/**\nCreate a LQ API account\nExample:\nPOST http://localhost:9000/api/lq/account/create\nBODY\n{\n\t\"email\": \"jake@noe.com\",\n\t\"password\": \"jakenoe\",\n\t\"firstName\": \"Jake\",\n\t\"lastName\": \"Noe\",\n\t\"companyName\": \"My Company\"\n}\nRESULT\n{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiI1N2Q0YTkyMjU3Njk2ZmFjMjQwOGY4YjMiLCJpYXQiOjE0NzM1NTQ3MjIsImV4cCI6MTQ3MzY0MTEyMn0.1pEfWzl-UBu6URe243M5ww9x86oRI99Xvd6swMWki3U\",\n  \"customerId\": \"57d4a81be48adb9423b270f4\",\n  \"companyId\": \"57d4a81be48adb9423b270f5\"\n}\n */\nexport async function createAccount(req, res) {\n  const {email, password, firstName, lastName, companyName} = req.body;\n  const models = {};\n  // Missing params\n  if (!email || !password || !firstName || !lastName) {\n    return res.status(400).json({\n      invalid: `The following must be supplied:\\nemail, password, firstName, lastName, companyName`\n    });\n  }\n\n  try {\n    const [customer, company, token] = await createUser(req.body, res, models);\n    return res.json({token, customerId: customer._id, companyId: company._id});\n  }\n  catch(err) {\n    if (err === 'inUse') {\n      return;\n    }\n    if (models.user) {\n      models.user.remove();\n    }\n    if (models.company) {\n      models.company.remove();\n    }\n    if (models.store) {\n      models.store.remove();\n    }\n    console.log('**************ERR IN CREATE LQ ACCOUNT**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'createAccount',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(400).json({\n      invalid: 'An error has occurred.'\n    });\n  }\n}\n\n/**\n Create a sub-user based on an existing company\n Example:\n POST http://localhost:9000/api/lq/account/create/user\n HEADERS\n Accept: application/json\n Content-Type: application/json\n Authorization: bearer <token>\n BODY\n {\n   \"email\": \"jake@noe.com\",\n   \"password\": \"jakenoe\",\n   \"firstName\": \"Jake\",\n   \"lastName\": \"Noe\",\n   \"companyId\": \"57d4a81be48adb9423b270f6\"\n }\n RESULT\n {\n   \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiI1N2Q0YTkyMjU3Njk2ZmFjMjQwOGY4YjMiLCJpYXQiOjE0NzM1NTQ3MjIsImV4cCI6MTQ3MzY0MTEyMn0.1pEfWzl-UBu6URe243M5ww9x86oRI99Xvd6swMWki3U\",\n   \"customerId\": \"57d4a81be48adb9423b270f4\",\n   \"companyId\": \"57d4a81be48adb9423b270f5\"\n }\n */\nexport async function createSubAccount(req, res) {\n  const {email, password, firstName, lastName, companyId, storeId} = req.body;\n  const models = {};\n  // Missing params\n  if (!email || !password || !firstName || !lastName || !companyId || !storeId) {\n    return res.status(400).json({\n      invalid: `The following must be supplied:\\nemail, password, firstName, lastName, companyId, storeId`\n    });\n  }\n\n  if (req.user.company.toString() !== companyId) {\n    return res.status(400).json({\n      invalid: 'The provided company does not match the company authorized user\\'s company'\n    });\n  }\n\n  try {\n    await createSubUser (req.body, res, models);\n  }\n  catch(err) {\n    if (err === 'inUse') {\n      return;\n    }\n    if (models.user) {\n      models.user.remove();\n    }\n    console.log('**************ERR IN CREATE LQ ACCOUNT**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'createSubAccount',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(400).json({\n      invalid: 'An error has occurred.'\n    });\n  }\n}\n\n/**\n * Handle the subuser creation\n * @param body Incoming request body\n * @param res Response\n * @param models DB Models\n */\nfunction createSubUser(body, res, models) {\n  const {email, companyId, storeId} = body;\n  let token, dbCompany, dbStore, dbUser;\n  return User.findOne({\n    email: email.toLowerCase()\n  })\n  // See if user exists\n    .then(user => {\n      if (user) {\n        res.status(400).json({invalid: 'Email already in use'});\n        return false;\n      }\n    })\n    //check if company exists\n    .then(() => {\n      if (companyId) {\n        return Company.findOne({\n          _id: companyId.toString()\n        });\n      }\n      return false;\n    })\n    .then(company => {\n      if(company === false)\n        throw 'company doesn\\'t exist';\n\n      dbCompany = company;\n      return Store.findOne({_id: storeId});\n    })\n    .then(store => {\n      if (store === false) {\n        throw 'Store doesn\\'t exist';\n      }\n\n      dbStore = store;\n\n      if (body.role) {\n        if (['corporate-admin', 'manager'].indexOf(body.role) === -1) {\n          body.role = 'employee';\n        }\n      }\n\n      const user = new User(Object.assign(body, {\n        provider: 'local', // Company\n        company: dbCompany._id,\n        store: dbStore._id,\n      }));\n\n      return user.save();\n    })\n    // Add user to store\n    .then(user => {\n      dbUser = user;\n      models.user = user;\n      dbStore.users = [dbUser._id];\n      return dbStore.save();\n    })\n    // Add user to company\n    .then(() => {\n      dbCompany.users = [dbUser._id];\n      return dbCompany.save();\n    })\n    .then(() => {\n      token = signToken(dbUser._id, dbUser.role);\n      // Make sure we have a LQ API customer\n      return Customer.findOne(Object.assign({}, lqCustomerFind, {company: companyId}));\n    })\n    .then(async customer => {\n      // Create new customer\n      if (!customer) {\n        await Customer.create(apiCustomerValues(companyId));\n        return token\n      }\n      return token;\n    })\n    .then(token => {\n      return res.json({\n        token,\n        customerId: dbUser._id,\n        companyId\n      });\n    });\n}\n\n/**\n * Determine if BI is enabled\n * @param retailer\n * @return {boolean}\n */\nfunction biEnabled(retailer) {\n  return !!(retailer.gsId || retailer.aiId);\n}\n\n/**\n * Format retailers for API return\n * @param retailers Retailers list\n * @param companySettings Company settings\n * @return {Array}\n */\nfunction formatRetailers(retailers, companySettings) {\n  const retailersFinal = [];\n  // Only display the info we need to\n  retailers.forEach(retailer => {\n    const smpMaxMin = retailer.getSmpMaxMin();\n    retailer = retailer.toObject();\n    const sellRate = determineSellTo(retailer, null, companySettings);\n    // Get sell rates and limits\n    retailer.sellRate = sellRate.rate - companySettings.margin;\n    retailer.cardType = sellRate.type;\n    retailer.maxMin = smpMaxMin[sellRate.smp];\n\n    delete retailer.smpMaxMin;\n    delete retailer.sellRates;\n    delete retailer.smpType;\n    retailer.biEnabled = biEnabled(retailer);\n    // If we're currently accepting those cards\n    retailer.accept = retailer.sellRate > 0.2;\n    retailersFinal.push(retailer);\n  });\n  return retailersFinal;\n}\n\n/**\nGet retailers\nGET http://localhost:9000/api/lq/retailers\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nRESULT:\n{\n  \"retailers\": [\n    {\n      \"_id\": \"5668fbff37226093139b90bd\",\n      \"name\": \"1 800 Flowers.com\",\n      \"verification\": {\n        \"url\": \"\",\n        \"phone\": \"1-800-242-5353\"\n      },\n      \"sellRate\": 0.63,\n      \"maxMin\": {\n        \"max\": 2000,\n        \"min\": null\n      },\n      \"biEnabled\": true,\n      \"accept\": true\n    },...\n */\nexport async function getRetailers(req, res) {\n  const user = req.user;\n  let companySettings = {margin: 0.03, cardType: 'both'};\n  return Company.findById(user.company)\n  .then(company => {\n    return company.getSettings();\n  })\n  .then(settings => {\n    companySettings = settings;\n    companySettings.margin = companySettings.margin || 0.03;\n    return Retailer.find({}, '_id name sellRates smpMaxMin smpType gsId verification')\n  })\n  .then(retailers => {\n    retailers = formatRetailers(retailers, companySettings);\n\n    const filteredRetailers = retailers.filter(retailer => {\n      if (companySettings.cardType && companySettings.cardType !== 'both') {\n        if (retailer.cardType !== companySettings.cardType) {\n          return false;\n        }\n      }\n\n      return !(companySettings.biOnly && !retailer.biEnabled);\n    });\n\n    return res.json({retailers: filteredRetailers});\n  })\n  .catch(async err => {\n\n    await ErrorLog.create({\n      method: 'getRetailers',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    })\n    .then(()=> {\n      Retailer.find({}, '_id name sellRates smpMaxMin smpType gsId verification')\n        .then(retailers => {\n          res.json({retailers: formatRetailers(retailers, companySettings)});\n        });\n    });\n  });\n}\n\n/**\nGet a specific retailer based on its ID or name\nGET http://localhost:9000/api/lq/retailers/:retailer\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nRESULT:\n{\n  \"_id\": \"5668fbff37226093139b90bd\",\n  \"name\": \"1 800 Flowers.com\",\n  \"verification\": {\n    \"url\": \"\",\n    \"phone\": \"1-800-242-5353\"\n  },\n  \"sellRate\": 0.63,\n  \"maxMin\": {\n    \"max\": 2000,\n    \"min\": null\n  },\n  accept: true\n}\nERROR:\n{\n \"error\": \"No matching retailer found in the database.\"\n}\n */\nexport function getRetailer(req, res) {\n  const user = req.user;\n  const {retailer} = req.params;\n  let companySettings;\n  return Company.findById(user.company)\n  .then(company => {\n    return company.getSettings();\n  })\n  .then(settings => {\n    companySettings = settings;\n    companySettings.margin = companySettings.margin || 0.03;\n\n    const fields = '_id name sellRates smpMaxMin smpType gsId verification';\n\n    if (mongoose.Types.ObjectId.isValid(retailer)) {\n      return Retailer.findById(retailer, fields);\n    } else {\n      return Retailer.findOne({name: new RegExp(retailer, 'i')}, fields);\n    }\n  })\n  .then(retailer => {\n    // Not found\n    if (! retailer) {\n      res.status(notFound.code).json(notFound.res);\n      throw notFound;\n    }\n    retailer = formatRetailers([retailer], companySettings);\n    return res.json(retailer[0]);\n  })\n  .catch(async err => {\n    if (err === notFound) {\n      return;\n    }\n\n    console.log('**********ERROR IN GETRETAILER**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getRetailer',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    })\n    .then(()=> {\n      return res.status(500).json({\n        invalid: 'An error has occurred.'\n      });\n    });\n  });\n}\n\n/**\n * Format a card for API response\n * @param card Incoming card response record\n */\nfunction formatCardResponse(card) {\n  card.sellRate = parseFloat(card.sellRate);\n  card.buyAmount = parseFloat(card.buyAmount);\n  card.soldFor = parseFloat(card.soldFor);\n  return card;\n}\n\n/**\n * Perform balance check\n * @param retailer Retailer record\n * @param card Card record\n * @param userId User ID\n * @param companyId Company ID\n * @param requestId BI request ID\n * @param isTransaction\n */\nasync function doCheckCardBalance(retailer, card, userId = null, companyId = null, requestId, isTransaction = false) {\n  if (!retailer.gsId && !retailer.aiId) {\n    if (isTransaction) {\n      const populateValues = {\n        path: 'inventory',\n        populate: {\n          path: 'retailer',\n          model: 'Retailer'\n        }\n      };\n      // Not a mongoose model\n      if (card.constructor.name !== 'model') {\n        card = await Card.findById(card._id).populate(populateValues);\n      }\n      // Populate inventory and retailer\n      if ((card.inventory && card.inventory.constructor.name === 'ObjectID') ||\n          (card.inventory.constructor.name === 'model' && card.inventory.retailer.constructor.name === 'ObjectID')) {\n        card = Card.findById(card).populate(populateValues);\n      }\n      const inventoryCompany = await Company.findById(card.inventory.company);\n      const companySettings = await inventoryCompany.getSettings();\n      const finalInventries = await finalizeTransactionValues([card.inventory], companySettings);\n      card.inventory = finalInventries[0];\n      card = await card.save();\n      // Set VB equal to CB if bi unavailable\n      if (!biEnabled(card.inventory.retailer)) {\n        card.verifiedBalance = card.balance;\n        card.inventory.verifiedBalance = card.balance;\n        await card.inventory.save();\n        card = await card.save();\n      }\n      return await (new Callback).sendCallback(card, 'biUnavailableCardAccepted');\n    }\n  }\n  // All of the updating of the log and whatnot is handled in updateCardDuringBalanceInquiry()\n  checkCardBalance(retailer, card.number, card.pin, card._id, requestId, userId, companyId)\n  .catch(async err => {\n    console.log('*************************ERR IN LQ CHECKCARDBALANCE*************************');\n    console.log(err);\n    // Give us the stack unless bi is just unavailable\n    if (err) {\n      console.log(err.stack);\n    }\n\n    await ErrorLog.create({\n      method: 'doCheckCardBalance',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(400).json({\n      invalid: 'An error has occurred.'\n    });\n  });\n}\n\n/**\n * Use test cards for LQ\n * @param res\n * @param retailer Retailer ID\n * @param number Card number\n * @param userTime User time\n * @return {boolean}\n */\nfunction lqTestCards(res, retailer, number, userTime) {\n  let test = false;\n  if (retailer === '5668fbff37226093139b912c') {\n    if (number === '1000') {\n      test = true;\n      res.json({\n        \"card\": {\n          \"sellRate\": 0.75,\n          \"_id\": testCard1,\n          \"number\": number,\n          \"retailer\": \"Best Buy\",\n          \"userTime\": userTime,\n          \"balance\": 100,\n          \"pin\": null,\n          \"buyAmount\": 65,\n          \"soldFor\": 75,\n          \"statusCode\": 0,\n          \"status\": \"Sale proceeding\",\n          \"saleAccepted\": true,\n          \"saleVerified\": false,\n          \"saleFinal\": false,\n          \"claimedBalanceInaccurate\": false\n        }\n      });\n    } else if (number === '2000') {\n      test = true;\n      res.json({\n        \"card\": {\n          \"sellRate\": 0.75,\n          \"_id\": testCard2,\n          \"number\": number,\n          \"retailer\": \"Best Buy\",\n          \"userTime\": userTime,\n          \"balance\": 100,\n          \"pin\": null,\n          \"buyAmount\": 65,\n          \"soldFor\": 75,\n          \"statusCode\": 0,\n          \"status\": \"Sale proceeding\",\n          \"saleAccepted\": true,\n          \"saleVerified\": false,\n          \"saleFinal\": false,\n          \"claimedBalanceInaccurate\": false\n        }\n      });\n    } else if (number === '3000') {\n      test = true;\n      res.json({\n        \"card\": {\n          \"sellRate\": 0.75,\n          \"_id\": testCard3,\n          \"number\": number,\n          \"retailer\": \"Best Buy\",\n          \"userTime\": userTime,\n          \"balance\": 100,\n          \"pin\": null,\n          \"buyAmount\": 65,\n          \"soldFor\": 75,\n          \"statusCode\": 1,\n          \"status\": \"Check required\",\n          \"saleAccepted\": true,\n          \"saleVerified\": false,\n          \"saleFinal\": false,\n          \"claimedBalanceInaccurate\": false\n        }\n      });\n    } else if (number === '4000') {\n      test = true;\n      res.json({\n        \"card\": {\n          \"sellRate\": 0.75,\n          \"_id\": testCard4,\n          \"number\": number,\n          \"retailer\": \"Best Buy\",\n          \"userTime\": userTime,\n          \"balance\": 100,\n          \"pin\": null,\n          \"buyAmount\": 65,\n          \"soldFor\": 75,\n          \"statusCode\": 1,\n          \"status\": \"Check required\",\n          \"saleAccepted\": true,\n          \"saleVerified\": false,\n          \"saleFinal\": false,\n          \"claimedBalanceInaccurate\": false\n        }\n      });\n    }\n  }\n  return test;\n}\n\n/**\n * Handle error from LQ\\\n * @param res\n * @param cardId Card ID\n * @param code Response code\n * @param responseMessage Response message\n * @return {Promise.<void>}\n */\nasync function handleLqNewError(res, cardId, code, responseMessage) {\n  // Remove card and inventory\n  if (cardId) {\n    const card = await Card.findById(cardId);\n    await Inventory.remove({\n      _id: card.inventory\n    });\n    await Card.remove({\n      _id: card._id\n    });\n  }\n  return res.status(code).json({invalid: responseMessage});\n}\n\n/**\n * Create a fake res object for interacting with an endpoint without an http request\n * @return {{status: status, json: json}}\n */\nfunction createFakeRes() {\n  return {\n    status: function(code) {\n      this.code = code;\n      return this;\n    },\n    json: function(jsonObject) {\n      this.response = jsonObject;\n      return this;\n    }\n  };\n}\n\n/**\n * Handle the creation of an inventory error\n * @param receipt Receipt\n * @param status Status\n * @param responseBodyCard Card which will return in the respons\n * @return {*}\n */\nfunction handleCreateInventoryError(receipt, status, responseBodyCard) {\n  if (receipt && status && (status === 400 || status === 500)) {\n    let errorMessage;\n    // Can't sell\n    if (receipt.response && receipt.response.reason === 'noSmp') {\n      errorMessage = 'Card violates sell limits'\n    } else {\n      // Create error\n      errorMessage = receipt.response;\n    }\n    return handleLqNewError(res, responseBodyCard._id, receipt.code, errorMessage);\n  }\n  return false;\n}\n\n/**\nCreate a card\nPOST http://localhost:9000/api/lq/new\nSTATUS CODES:\n 0: Sale proceeding as normal\n 1: Sale status must be checked to see if sale was rejected\nHEADERS\nBODY\n{\n\"number\":\"777775777675775476775577776657777\",\n\"pin\":\"666\",\n\"retailer\":\"5668fbff37226093139b90bd\",\n\"userTime\":\"2016-09-10T20:34:50-04:00\",\n\"balance\": 3005,\n\"merchandise\": true\n}\nRESPONSE\n{\n \"card\": {\n   \"sellRate\": \"0.75\",\n   \"_id\": \"588689835dbe802d2b0f6074\",\n   \"number\": \"gewfwgegewqgewgwgewe\",\n   \"retailer\": \"Adidas\",\n   \"userTime\": \"2017-01-23T18:53:55.884Z\",\n   \"merchandise\": true,\n   \"balance\": 300,\n   \"pin\": null,\n   \"__v\": 0,\n   \"buyAmount\": \"195.00\",\n   \"soldFor\": \"225.00\"\n   \"statusCode\": \"0\",\n   \"status\": \"Sale proceeding\"\n }\n}\n\nTEST CARDS:\nNO PIN CODES\n\nAdidas: 5668fbff37226093139b90d5\n1000: Complete immediately: $0\n5000: Complete immediately: $5\n\nNike: 5668fbff37226093139b9357\n1000: Deferred: $0\n5000: Deferred: $5\n */\nexport async function lqNewCard(req, res) {\n  try {\n    let responseBodyCard, dbCustomer, dbRetailer, card;\n    let dbBiLog;\n    let biComplete = false;\n    const {number, pin, retailer, userTime, balance, callbackUrl = null, customer} = req.body;\n    if (!pin) {\n      req.body.pin = null;\n    }\n    const user = req.user;\n    // Check for params\n    if (!number || !retailer || !userTime || typeof balance !== 'number') {\n      return handleLqNewError(res, null, 400, 'Include the following POST parameters: number, retailer, userTime, and balance');\n    }\n    // Check to see if this retailer requires a PIN\n    dbRetailer = await Retailer.findById(retailer);\n    if (dbRetailer.pinRequired && !(pin && pin.replace(/\\s/g, '').length)) {\n      return handleLqNewError(res, null, 400, `A PIN is required for ${dbRetailer.name}`);\n    }\n    /**\n     * Test cards\n     */\n    // Sell immediately\n    if (lqTestCards(res, retailer, number, userTime)) {\n      return;\n    }\n    // Mock express res object\n    const fakeRes = createFakeRes();\n    // Mock req\n    const fakeReq = {\n      body: req.body,\n      user: req.user\n    };\n    // Specific customer\n    if (customer) {\n      dbCustomer = await Customer.findById(customer);\n    } else {\n      dbCustomer = await Customer.findOne({\n        stateId: 'API_Customer',\n        company: user.company,\n      });\n    }\n    // No customer, create generic\n    if (!dbCustomer) {\n      dbCustomer = await Customer.create(apiCustomerValues(user.company));\n    }\n    // Get company\n    const company = await Company.findById(user.company);\n    const companySettings = await company.getSettings();\n\n    // Set store if store is undefined\n    if(!req.user.store) {\n      req.user.store = company.stores[0];\n    }\n\n    // Add customer to body\n    fakeReq.body.customer = dbCustomer._id;\n    try {\n      // Create card\n      const newCardResponse = await newCard(fakeReq, fakeRes);\n      card = newCardResponse.response;\n      if (!card.sellRate) {\n        return handleLqNewError(res, null, 400, 'Card violates sell limits');\n      }\n    } catch (err) {\n\n      await ErrorLog.create({\n        method: 'lqNewCard',\n        controller: 'lq.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n\n      return handleLqNewError(res, null, 400, 'Card has already been inserted into the database');\n    }\n    // Find BI log, if we have one\n    dbBiLog = await BiRequestLog.findOne({\n      number: card.number,\n      pin: card.pin,\n      retailerId: card.retailer._id\n    });\n    // If we have a BI log, attach card\n    if (dbBiLog) {\n      dbBiLog.card = card._id;\n      dbBiLog = await dbBiLog.save();\n      // Set verified balance on card\n      if (typeof dbBiLog.balance === 'number') {\n        biComplete = true;\n        card.verifiedBalance = dbBiLog.balance;\n      }\n      // Create BI log if one doesn't exist\n    } else {\n      dbBiLog = await BiRequestLog.create({\n        pin: card.pin,\n        number: card.number,\n        retailerId: card.retailer._id,\n        card: card._id\n      });\n    }\n    // Set buyAmount for this card\n    card.buyAmount = formatFloat((card.sellRate - 0.1) * card.balance);\n    card = await card.save();\n\n    // Card for response\n    responseBodyCard = Object.assign({}, card.toObject());\n    responseBodyCard.retailer = card.retailer.name;\n    responseBodyCard.sellRate = responseBodyCard.sellRate ? formatFloat(responseBodyCard.sellRate) : null;\n    responseBodyCard.soldFor = responseBodyCard.soldFor ? formatFloat(responseBodyCard.soldFor) : null;\n    delete responseBodyCard.customer;\n    delete responseBodyCard.balanceStatus;\n    delete responseBodyCard.buyRate;\n    delete responseBodyCard.user;\n    delete responseBodyCard.updates;\n    delete responseBodyCard.valid;\n    fakeReq.body = {\n      cards: [card],\n      receipt: true,\n      userTime: req.body.userTime,\n      callbackUrl\n    };\n\n    const userId = req.user._id;\n    const companyId = req.user.company;\n\n    if (!biComplete) {\n      // Check one, if deferred, begin interval of checking request ID for 5 minutes\n      await doCheckCardBalance(dbRetailer, responseBodyCard, userId, companyId, dbBiLog.requestId);\n    }\n\n    // Create inventory, get receipt\n    const receipt = await addToInventory(fakeReq, fakeRes);\n    // Unable to add to inventory\n    if (receipt === false) {\n      return;\n    }\n    const status = typeof receipt.status === 'number' ? receipt.status : receipt.code;\n    // Unable to create inventory\n    if (handleCreateInventoryError(receipt, status, responseBodyCard)) {\n      return;\n    }\n    if (responseBodyCard.__v) {\n      delete responseBodyCard.__v;\n    }\n    if (responseBodyCard.created) {\n      delete responseBodyCard.created;\n    }\n    // Mark inventory as API\n    let inventory = await Inventory.findById(receipt.response.inventories[0]);\n    // @todo This error message is a lie. Fix me.\n    if (!inventory) {\n      return res.status(400).json({err: 'Card violates buy/sell limits'});\n    }\n    // Already have a balance\n    if (biComplete) {\n      inventory.verifiedBalance = dbBiLog.balance;\n    }\n    inventory.isApi = true;\n    inventory = await inventory.save();\n\n    // Determine who card is being sold to\n    const sellTo = determineSellTo(dbRetailer, inventory.balance, companySettings);\n    // No SMP available\n    if (!sellTo) {\n      return handleLqNewError(res, responseBodyCard._id, 400, 'Card violates sell limits');\n    }\n\n    // if saveya, tell them to check\n    if (sellTo.smp.toLowerCase() === 'saveya') {\n      responseBodyCard.statusCode = 1;\n      responseBodyCard.status = 'Check required';\n    } else {\n      responseBodyCard.statusCode = 0;\n      // Auto sell on or off\n      if (inventory.proceedWithSale) {\n        responseBodyCard.status = 'Sale proceeding';\n      } else {\n        responseBodyCard.status = 'Sale pending approval';\n      }\n    }\n\n    responseBodyCard = decorateCardWithSaleStatuses(responseBodyCard, inventory);\n    return res.json({card: formatCardResponse(responseBodyCard)});\n  } catch (err) {\n    console.log('**************ERR IN LQ NEW CARD**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'lqNewCard',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(400).json({\n      invalid: 'An error has occurred.'\n    });\n  }\n}\n\n/**\n * Calculate transaction values\n * @param transactionTotal Transaction total\n * @param maxSpending Max amount allowed\n * @param cardValue Card value\n * @param payoutPercentage Payout percentage to merchant\n * @return {{amountDue: number, cardValue: number, merchantPayoutAmount: number}}\n */\nfunction calculateTransactionValues(transactionTotal, maxSpending, cardValue, payoutPercentage) {\n  let amountDue = 0;\n  let newCardValue = 0;\n  let merchantPayoutAmount = 0;\n  // Calculate transaction data\n  if (transactionTotal >= cardValue && cardValue <= maxSpending) {\n    amountDue = formatFloat(transactionTotal - cardValue);\n    newCardValue = 0;\n    merchantPayoutAmount = formatFloat(payoutPercentage * cardValue);\n  } else {\n    amountDue = Math.max(0, transactionTotal - Math.min(maxSpending, cardValue));\n    newCardValue = cardValue - Math.min(maxSpending, transactionTotal);\n    merchantPayoutAmount = formatFloat(payoutPercentage * Math.min(maxSpending, cardValue, transactionTotal));\n  }\n  // Format nicely\n  if (typeof newCardValue === 'number') {\n    newCardValue = formatFloat(newCardValue);\n  }\n  if (typeof amountDue === 'number') {\n    amountDue = formatFloat(amountDue);\n  }\n  if (typeof merchantPayoutAmount === 'number') {\n    merchantPayoutAmount = formatFloat(merchantPayoutAmount);\n  }\n  return {amountDue: amountDue, cardValue: newCardValue, merchantPayoutAmount: merchantPayoutAmount};\n}\n\n/**\n * Create search params for bi log\n * @param body\n * @return {{number, pin, retailerId}}\n */\nfunction getBiLogSearch(body) {\n  // See if we have BI for this already\n  const biLogSearch = {\n    number: body.number,\n    retailerId: body.retailer\n  };\n  if (body.pin) {\n    biLogSearch.pin = body.pin;\n  }\n  return biLogSearch;\n}\n\n/**\n * Parse BI log\n * @param biRes\n * @returns {verifiedBalance: number, valid: boolean, finalized: boolean}\n */\nfunction parseBiLog(biRes) {\n  if (!biRes) {\n    return {verifiedBalance: null, valid: null, finalized: false};\n  }\n  let verifiedBalance = null;\n  const finalized = !!biRes.finalized;\n  // Invalid card\n  if (biRes.responseCode === config.biCodes.invalid) {\n    return {verifiedBalance: 0, valid: false, finalized}\n  }\n  // See if we already have a balance\n  if (biRes && biRes.balance) {\n    try {\n      verifiedBalance = parseFloat(biRes.balance);\n    } catch (e) {\n      verifiedBalance = null;\n    }\n  }\n  // If we have a balance, return it\n  if (!isNaN(verifiedBalance)) {\n    return {verifiedBalance, valid: true, finalized};\n  }\n  return {verifiedBalance: null, valid: null, finalized}\n}\n\nfunction getAddToInventoryErrorResponse(response) {\n  // Can't sell\n  if (response && response.reason === 'noSmp') {\n    // return res.status(code).json({invalid: 'Card violates sell limits'});\n    return {invalid: 'Card violates sell limits'};\n  } else {\n    // addToInventoryResponse response\n    // return res.status(code).json(response);\n    return response;\n  }\n}\n\n/**\n * Format the transaction response card\n * @param dbCard\n * @return {*}\n */\nfunction formatResponseCard(dbCard) {\n  dbCard.retailer = dbCard.retailer.name;\n  dbCard.sellRate = formatFloat(dbCard.sellRate);\n  dbCard.soldFor = formatFloat(dbCard.sellRate * dbCard.balance);\n  delete dbCard.customer;\n  delete dbCard.balanceStatus;\n  delete dbCard.buyRate;\n  delete dbCard.user;\n  delete dbCard.updates;\n  delete dbCard.valid;\n  if (dbCard.__v) {\n    delete dbCard.__v;\n  }\n  if (dbCard.created) {\n    delete dbCard.created;\n  }\n  return dbCard;\n}\n\n/**\n Create a transaction for Vista\n POST http://localhost:9000/api/lq/transaction\n HEADERS\n BODY\n {\n \"number\":\"421421412\",\n \"pin\":\"666\",\n \"retailer\":\"5668fbff37226093139b90bd\",\n \"userTime\":\"2016-09-10T20:34:50-04:00\",\n \"balance\": 100,\n \"merchandise\": true,\n \"transactionAmount\": 300\n }\n */\nexport async function newTransaction(req, res) {\n  let body = req.body;\n  let dbCard;\n  let dbRetailer;\n  let transactionFinal;\n  let verifiedBalance;\n  let biValid;\n  // Fake req, res\n  let fakeRes, fakeReq;\n  // BI response values\n  let biResolved = false;\n  // Vista transaction\n  const {number, pin, balance, memo, transactionTotal, transactionId, merchandise, customerId,\n          storeId, vmMemo1 = null, vmMemo2 = null, vmMemo3 = null, vmMemo4 = null, callbackUrl = null} = body;\n  // Currently, we're ignoring '0000' PINs, at the request of Vista, since they require PINs on their side and are having\n  // trouble changing their vaidation. So, 0000 means \"no PIN\"\n  try {\n    if (!pin || pin === '0000') {\n      body.pin = null;\n    }\n    const user = req.user;\n\n    // Get BI search values\n    const biSearchValues = getBiLogSearch(body);\n\n    // Check to see if we have a bi log\n    let biRes = await BiRequestLog.findOne(biSearchValues);\n    // See if we have a verified balance\n    biRes = parseBiLog(biRes);\n    verifiedBalance = biRes.verifiedBalance;\n    biValid = biRes.valid;\n    biResolved = biRes.finalized;\n\n    // Mock express res object\n    fakeRes = createFakeRes();\n    // Mock req\n    fakeReq = {\n      body: body,\n      user: req.user\n    };\n\n    let customerConstraint = {\n      store: storeId,\n      company: user.company\n    };\n\n    if (mongoose.Types.ObjectId.isValid(customerId)) {\n      customerConstraint._id = customerId;\n    } else {\n      customerConstraint.email = customerId;\n    }\n    // Find transaction customer\n    const dbCustomer = await Customer.findOne(customerConstraint);\n    if (!dbCustomer) {\n      return res.status(notFound.code).json(notFound.resFn('Customer'));\n    }\n    // Find company\n    const dbCompany = await Company.findById(user.company);\n    if (!dbCompany) {\n      return res.status(notFound.code).json(notFound.resFn('Company'));\n    }\n    // Company settings\n    const dbCompanySettings = await dbCompany.getSettings();\n    // Find store\n    const dbStore = await Store.findById(storeId).populate('companyId');\n    if (!dbStore) {\n      return res.status(notFound.code).json(notFound.resFn('Store'));\n    } else if (dbStore.companyId._id.toString() !== req.user.company.toString()) {\n      return res.status(notFound.code).json(notFound.resFn('store'));\n    }\n\n    fakeReq.body.customer = dbCustomer._id;\n    const dbCard1 = await newCard(fakeReq, fakeRes);\n    let thisCard = dbCard1.response;\n    // Set VB if we have one\n    if (verifiedBalance) {\n      thisCard.verifiedBalance = verifiedBalance;\n    }\n    thisCard = await thisCard.save();\n    // Get most recent log if we have one\n    const logs = await BiRequestLog.find(biSearchValues).sort({created: -1});\n    let log = null;\n    if (logs) {\n      log = logs[0];\n    }\n    thisCard = dbCard1.response;\n    if (log) {\n      log.card = thisCard._id;\n      log = await log.save();\n    } else {\n      log = new BiRequestLog({\n        pin: thisCard.pin,\n        number: thisCard.number,\n        retailerId: thisCard.retailer._id,\n        card: thisCard._id\n      });\n      log = await log.save();\n    }\n    let dbBiLog = log;\n    let card = dbCard1;\n    if (card.response.error) {\n      return res.status(400).json({\n        invalid: 'Card has already been inserted into the database'\n      });\n    }\n    // Retailer with merch values\n    dbRetailer = card.response.retailer.populateMerchValues(card.response);\n    // const retailer = card.response.retailer;\n    card = card.response.toObject();\n    card.balance = body.balance;\n    card.buyAmount = formatFloat((card.sellRate - 0.1) * card.balance);\n    card.retailer = dbRetailer;\n    // Store retailer\n    card.retailer = dbRetailer;\n\n    /**\n     * Transaction calculations\n     */\n      // NCC card value before transaction\n    let nccCardValue = balance * dbStore.creditValuePercentage;\n\n    const transactionValues = calculateTransactionValues(transactionTotal, dbStore.maxSpending, nccCardValue,\n      dbStore.payoutAmountPercentage);\n\n    transactionFinal = {\n      memo,\n      nccCardValue: transactionValues.cardValue,\n      transactionTotal,\n      transactionId,\n      merchantPayoutAmount: transactionValues.merchantPayoutAmount,\n      merchantPayoutPercentage: dbStore.payoutAmountPercentage,\n      amountDue: transactionValues.amountDue,\n      prefix: body.prefix,\n      vmMemo1, vmMemo2, vmMemo3, vmMemo4,\n      creditValuePercentage: dbStore.creditValuePercentage,\n      maxSpending: dbStore.maxSpending\n    };\n\n    fakeReq.body = {\n      cards: [card],\n      receipt: true,\n      userTime: body.userTime,\n      // Transaction data\n      transaction: transactionFinal,\n      merchandise,\n      store: dbStore,\n      callbackUrl\n    };\n\n    const addToInventoryResponse = await addToInventory(fakeReq, fakeRes);\n    if (addToInventoryResponse === false) {\n      return;\n    }\n    if (config.debug) {\n      console.log('**************ADD TO INVENTORY RES**********');\n      console.log(addToInventoryResponse);\n    }\n\n    const status = typeof addToInventoryResponse.status === 'number' ? addToInventoryResponse.status : addToInventoryResponse.code;\n    // Card rejected\n    if (addToInventoryResponse && (status === 400 || status === 500)) {\n      const errorRes = getAddToInventoryErrorResponse(addToInventoryResponse.response, addToInventoryResponse.code);\n      return res.status(addToInventoryResponse.code).json(errorRes);\n    }\n    // Updated card\n    let cardBeforeResponse = await Card.findById(card._id).populate('inventory');\n    const cardBeforeResponseObject = cardBeforeResponse.toObject();\n    let dbCard = Object.assign({}, cardBeforeResponseObject);\n    dbCard = formatResponseCard(dbCard);\n    let inventory = cardBeforeResponse.inventory;\n    // let inventory = await Inventory.findById(addToInventoryResponse.response.inventories[0]);\n    // Try to get verified balance\n    if (!biResolved || typeof verifiedBalance !== 'number') {\n      const card = Object.assign({}, dbCard);\n      card.inventory = inventory;\n      const userId = req.user._id;\n      const companyId = req.user.company;\n      // Check one, if deferred, begin interval of checking request ID for 5 minutes\n      await doCheckCardBalance(dbRetailer, card, userId, companyId, dbBiLog.requestId, true);\n    }\n\n    inventory.isApi = true;\n    inventory = await Inventory.findById(inventory._id);\n    if (typeof verifiedBalance !== 'undefined' && verifiedBalance !== null) {\n      inventory.verifiedBalance = verifiedBalance;\n      await inventory.save();\n      // If log is already finalized, then send the BI complete callback\n      await (new Callback()).sendCallback(dbCard, 'biComplete');\n    }\n    inventory = await Inventory.findById(inventory._id);\n    inventory = await inventory.save();\n    const sellTo = determineSellTo(dbRetailer, inventory.balance, dbCompanySettings);\n    if (!sellTo) {\n      return res.status(400).json({invalid: 'Card violates sell limits'});\n    }\n\n    // if saveya, tell them to check\n    if (sellTo.smp.toLowerCase() === 'saveya') {\n      dbCard.statusCode = 1;\n      dbCard.status = 'Check required';\n    } else {\n      dbCard.statusCode = 0;\n      // Auto sell on or off\n      if (inventory.proceedWithSale) {\n        dbCard.status = 'Sale proceeding';\n      } else {\n        dbCard.status = 'Sale pending approval';\n      }\n    }\n\n    // Display sell for\n    dbCard.soldFor = sellTo.rate - dbCompanySettings.margin;\n    dbCard = decorateCardWithSaleStatuses(dbCard, inventory, transactionFinal);\n    return res.json({card: formatCardResponse(dbCard)});\n  } catch (err) {\n    console.log('**************ERR IN TRANSACTION**********');\n    console.log(err);\n    if (err instanceof SellLimitViolationException) {\n      return res.status(400).json({err: 'Card violates sell limits'});\n    }\n    if (err) {\n      console.log(err.stack);\n    }\n    let remove = false, cardToDelete;\n\n    if (err === 'cardRejected') {\n      // The promise chain above is already sending a response\n      remove = true;\n    }\n\n    if (err === 'cardExists') {\n      remove = true;\n      return res.status(400).json({\n        invalid: 'Card already exists in database'\n      });\n    }\n    if (err === 'noSmp') {\n      remove = true;\n    }\n\n    if (remove) {\n      // Remove card and inventory\n      Card.findById(dbCard._id)\n      .then(card => {\n        cardToDelete = card;\n        return Inventory.remove({\n          _id: card.inventory\n        });\n      })\n      .then(() => {\n        return Card.remove({\n          _id: cardToDelete._id\n        })\n      });\n      return;\n    }\n\n    await ErrorLog.create({\n      method: 'newTransaction',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json({\n      invalid: 'An error has occurred.'\n    });\n  }\n}\n\n/**\n * Make fake req/res for internal requests\n * @param req\n */\nfunction makeFakeReqRes(req) {\n  // Mock express res object\n  const fakeRes = {\n    status: function(code) {\n      this.code = code;\n      return this;\n    },\n    json: function(jsonObject) {\n      this.response = jsonObject;\n      return this;\n    }\n  };\n  // Mock req\n  const fakeReq = {\n    body: req.body,\n    user: req.user\n  };\n  return [fakeReq, fakeRes];\n}\n\n/**\n * Create BI response message from a successful BI lookup\n * @param log\n * @param finalized\n * @return {{responseDateTime: *, responseCode: (string|string), request_id: *, balance: Number, responseMessage: string}}\n */\nasync function createBiResponse(log, finalized = true) {\n  let responseMessage = 'success';\n  if (log.responseCode === '900011') {\n    responseMessage = 'Invalid card';\n  } else if (log.responseCode === '010') {\n    responseMessage = 'Delayed Verification Required';\n  }\n  const retailer = await Retailer.findById(log.retailerId);\n  const balance = typeof log.balance === 'number' ? parseFloat(log.balance) : null;\n  const response = {\n    responseDateTime: log.responseDateTime,\n    responseCode: log.responseCode,\n    request_id: log.requestId,\n    requestId: log.requestId,\n    balance,\n    responseMessage,\n    retailer: retailer.name\n  };\n  if (!finalized) {\n    response.recheckDateTime = log.recheckDateTime;\n    response.recheck = log.recheck;\n  }\n}\n\n/**\n * Parse a response from BI\n * @param log Log file\n * @param biRes BI Response\n */\nasync function parseBiResponse(log, biRes) {\n  console.log('**************PARSE BI**********');\n  console.log(biRes);\n  log.requestId = biRes.request_id;\n  log.responseDateTime = biRes.response_datetime;\n  log.responseCode = biRes.responseCode;\n  if (biRes.recheckDateTime) {\n    log.recheckDateTime = biRes.recheckDateTime;\n  }\n  if (biRes.recheck) {\n    log.recheck = biRes.recheck;\n  }\n  delete biRes.bot_statuses;\n  delete biRes.request_id;\n  delete biRes.verificationType;\n  delete biRes.recheck;\n\n  if (biRes.balance.toLowerCase() === 'null') {\n    biRes.balance = null;\n  } else {\n    log.balance = biRes.balance;\n  }\n  log.save();\n}\n\n/**\n * Fake BI responses\n * @param retailer\n * @param number\n * @param res\n */\nfunction fakeBi(retailer, number, res) {\n  if (retailer === '5668fbff37226093139b912c') {\n    if (number === '1000') {\n      return res.json({\n        \"responseDateTime\": moment().format('Y-MM-DD HH:mm:ss.ms'),\n        \"responseCode\": \"000\",\n        \"request_id\": \"11502131554644889807\",\n        \"balance\": 100,\n        \"responseMessage\": \"success\"\n      });\n    } else if (number === '2000') {\n      return res.json({\n        \"responseDateTime\": moment().format('Y-MM-DD HH:mm:ss.ms'),\n        \"responseCode\": \"000\",\n        \"request_id\": \"11502131554644889808\",\n        \"balance\": 100,\n        \"responseMessage\": \"success\"\n      });\n    } else if (number === '3000') {\n      return res.json({\n        \"responseDateTime\": moment().format('Y-MM-DD HH:mm:ss.ms'),\n        \"responseCode\": \"000\",\n        \"request_id\": \"11502131554644889809\",\n        \"balance\": 100,\n        \"responseMessage\": \"success\"\n      });\n    } else if (number === '4000') {\n      if (requestId) {\n        return res.json({\n          \"responseDateTime\": moment().format('Y-MM-DD HH:mm:ss.ms'),\n          \"responseCode\": \"000\",\n          \"request_id\": \"11502131554644889810\",\n          \"balance\": 100,\n          \"responseMessage\": \"success\"\n        });\n      } else {\n        return res.json({\n          \"balance\": \"Null\",\n          \"response_datetime\": moment().format('Y-MM-DD HH:mm:ss.ms'),\n          \"responseMessage\": \"Delayed Verification Required\",\n          \"requestId\": \"11502131554644889810\",\n          \"responseCode\": \"010\",\n          \"responseDateTime\": moment().format('Y-MM-DD HH:mm:ss.ms'),\n          \"recheckDateTime\": moment().add(1, 'hour').format('Y-MM-DD HH:mm:ss.ms')\n        });\n      }\n    }\n  }\n}\n\n/**\n * Check balance of a card\n *\nERROR:\n{\n \"error\": \"ERROR IN CHECK GIFTCARD BALANCE.\"\n}\nDEFER:\n{\n \"balance\": \"Null\",\n \"response_datetime\": \"2016-10-05 21:52:07.807075\",\n \"responseMessage\": \"Delayed Verification Required\",\n \"requestId\": \"17452881757755311094\",\n \"responseCode\": \"010\",\n \"responseDateTime\": \"2016-10-05 21:52:07.807075\",\n \"recheckDateTime\": \"2016-10-05 22:52:37.860233\"\n}\nSUCCESS:\n{\n \"responseDateTime\": \"2016-10-05 21:55:11.940567\",\n \"responseCode\": \"000\",\n \"request_id\": \"11502131554644889807\",\n \"balance\": 5.5,\n \"responseMessage\": \"success\"\n}\n */\nexport async function bi(req, res) {\n  const {number, pin, retailer, requestId, prefix} = req.body;\n  let fakeReq, fakeRes;\n  let dbLogs;\n  let log = null;\n  try {\n    // Check for params\n    if (!number || !pin || !retailer) {\n      return res.status(400).json({\n        invalid: 'Include the following POST parameters: number, pin, retailer'\n      });\n    }\n\n    // Fake BI responses\n    if (fakeBi(retailer, number, res)) {\n      return;\n    }\n\n    const dbRetailer = await Retailer.findById(retailer);\n    if (!dbRetailer) {\n      return res.status(400).json({error: 'Retailer not found'});\n    }\n    if (!dbRetailer.gsId && !dbRetailer.aiId) {\n      return res.status(400).json({error: `${dbRetailer.name.toUpperCase()} does not support balance inquiry`});\n    }\n    [fakeReq, fakeRes] = makeFakeReqRes(req);\n    // Select correct BI ID\n    fakeReq.body = {retailer: dbRetailer._id.toString(), number, pin, requestId};\n    dbLogs = await BiRequestLog.find({\n      number,\n      pin,\n      retailerId: retailer\n    }).sort({created: -1});\n    log = null;\n    if (dbLogs.length) {\n      log = dbLogs[0];\n    }\n    // Finalized log\n    if (log) {\n      if (log.finalized) {\n        return res.json(await createBiResponse(log));\n        // Don't initiate another request for 12 hours\n      } else if (moment().subtract(12, 'hours') < moment(log.created)) {\n        // return res.json(await createBiResponse(log, false));\n      }\n    }\n    // Create new log\n    log = new BiRequestLog({\n      number,\n      pin,\n      retailerId: retailer\n    });\n    // Save user to log\n    if (req && req.user && req.user._id) {\n      log.user = req.user._id;\n    }\n    if (prefix) {\n      log.prefix = prefix;\n    }\n    log = await log.save();\n    console.log('**************1**********');\n    // Initiate balance check\n    const biRes = await checkBalance(fakeReq, fakeRes);\n    console.log('**************2**********');\n    console.log(biRes);\n    if (!biRes) {\n      return res.status(500).json({err: 'Unable to perform balance check'});\n    }\n    let response = {};\n    if (biRes) {\n      response = typeof biRes.response !== 'undefined' && biRes.response.constructor.name === 'Object' ? biRes.response : biRes;\n    }\n    try {\n      parseBiResponse(log, response);\n    } catch (e) {\n\n      await ErrorLog.create({\n        method: 'bi',\n        controller: 'lq.controller',\n        revision: getGitRev(),\n        stack: e.stack,\n        error: e,\n        user: req.user._id\n      });\n    }\n    // Update BI log\n    _.forEach(response, (val, prop) => {\n      log[prop] = val;\n    });\n    await log.save();\n    return res.json(response);\n  } catch (err) {\n    console.log('**************ERR IN BI**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'bi',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json({\n      invalid: 'An error has occurred.'\n    });\n  }\n}\n\n/**\n * Send a callback based on a user's company settings\n * @param log BI log\n * @param userId\n * @param callbackType\n * @return {Promise.<void>}\n */\nasync function sendCallbackFromCompanySettings(log, userId = '', callbackType) {\n  const user = await User.findOne(userId);\n  const companyId = user.company;\n  const company = await Company.findById(companyId);\n  const settings = await company.getSettings();\n  if (settings.callbackUrl) {\n    await (new Callback()).sendCallback(log, callbackType, settings.callbackUrl);\n  }\n}\n\n/**\n * Finalize card and inventory attached to log\n * @param log BI log\n * @param valid Card is valid\n * @param balance Balance (or 0 for invalid)\n */\nasync function finalizeLogCardAndInventory(log, valid, balance) {\n  if (config.debug) {\n    console.log('**************FINALIZE CARD AND INVENTORY**********');\n    console.log(log);\n  }\n  if (log.card && (typeof log.card === 'string' || log.card.constructor.name === 'ObjectID')) {\n    log = await BiRequestLog.findById(log._id).populate(logPopulationValues);\n  }\n  // Set card\n  if (log.card && log.card.constructor.name === 'model') {\n    // Resend card if balance changes\n    const resend = log.card.verifiedBalance !== balance;\n    log.card.valid = valid;\n    log.card.verifiedBalance = balance;\n    log.card.inventory.verifiedBalance = balance;\n    await log.card.save();\n    await log.card.inventory.save();\n    // Callback on a card\n    await (new Callback()).sendCallback(log.card, 'biComplete', null, resend);\n    // Set inventory values\n    if (log.card.inventory && !(log.card.inventory.rejected || log.card.inventory.credited)) {\n      if (log.card.inventory.constructor.name !== 'model') {\n        if (_.isPlainObject(log.card.inventory)) {\n          log.card.inventory = await Inventory.findById(log.card.inventory._id);\n        } else if (log.card.inventory.constructor.name === 'ObjectID' || typeof log.card.inventory === 'string') {\n          log.card.inventory = await Inventory.findById(log.card.inventory);\n        }\n      }\n      log.card.inventory.valid = valid;\n      log.card.inventory.verifiedBalance = balance;\n      await log.card.inventory.save();\n    }\n    return await BiRequestLog.findById(log._id).populate(logPopulationValues);\n  // No card, just send to company callback URL\n  } else {\n    if (log.user) {\n      await sendCallbackFromCompanySettings(log, log.user, 'balanceCB');\n    }\n  }\n  return log;\n}\n\n/**\n * Complete cards and inventories associated with logs\n * @param log Bi log\n * @param invalid\n * @param balance\n * @return {Promise.<*>}\n */\nasync function completeCardAndInventory(log, invalid, balance) {\n  const promises = [];\n  if (config.debug) {\n    console.log('**************COMPLETE CARD**********');\n    console.log(log);\n  }\n  // Invalid\n  if (invalid) {\n    log = await finalizeLogCardAndInventory(log, false, 0);\n    // Valid\n  } else {\n    log = await finalizeLogCardAndInventory(log, true, balance);\n  }\n  if (config.debug) {\n    console.log('**************COMPLETE CARD 2**********');\n    console.log(log);\n  }\n  // Save card\n  if (log.card) {\n    promises.push(log.card.save());\n    // Save inventory\n    if (log.card.inventory) {\n      return await log.card.inventory.save();\n    }\n  }\n}\n\n/**\n * Complete bi logs\n * @param log BiRequestLog\n * @param invalid Card is invalid\n * @param balance Balance\n * @param requestId Request ID\n * @param fixed If a card has a VB that is being \"fixed\" (set incorrectly, then updated)\n * @return {Promise.<*>}\n */\nasync function completeBiLog(log, invalid, balance, requestId, fixed) {\n  if (requestId === 'test') {\n    requestId = null;\n  }\n  log.verificationType = 'PJVT_BOT';\n  log.responseDateTime = moment().format('YYYY-MM-DD');\n  log.finalized = true;\n  log.fixed = fixed;\n  // Success\n  if (typeof balance === 'number' && !invalid) {\n    log.balance = balance;\n    log.responseCode = '000';\n    log.responseMessage = 'success';\n    // Invalid card\n  } else {\n    log.balance = null;\n    log.responseCode = '900011';\n    log.responseMessage = 'invalid card';\n  }\n  // Fill in request ID\n  if (requestId && !log.requestId) {\n    log.requestId = requestId;\n  }\n  return await log.save();\n}\n\n/**\n * Values with which to populate logs\n * @type {{path: string, populate: [*]}}\n */\nconst logPopulationValues = {\n  path: 'card',\n  populate: [{\n    path: 'inventory',\n    model: 'Inventory',\n    // Does this work?\n    populate: [{\n      path: 'company',\n      model: 'Company'\n    }, {\n      path: 'retailer',\n      model: 'Retailer'\n    }, {\n      path: 'store',\n      model: 'Store'\n    }]\n  }],\n};\n\n/**\n * Create a new BI log if balance changes, or an initial BI log\n * @param number\n * @param pin\n * @param retailer\n * @param balance\n * @return {Promise.<*>}\n */\nasync function createBiLogAsPartOfCompletion(number, pin, retailer, balance) {\n  // See if we can find a card associated with this log\n  const findParams = {\n    number, pin\n  };\n  const cardFindParams = Object.assign(findParams, {retailer: retailer._id});\n  const biFindParams = Object.assign(findParams, {retailerId: retailer._id});\n  let card = await Card.findOne(cardFindParams);\n  cardFindParams.retailerId = retailer._id;\n  delete cardFindParams.retailer;\n  const originalLog = await BiRequestLog.findOne(biFindParams).sort({created: -1});\n\n  // Create log\n  if (!originalLog || (typeof originalLog.balance === 'number' && originalLog.balance !== balance)) {\n    const newLogVals = {\n      pin,\n      number,\n      retailerId: retailer._id,\n      balance\n    };\n    if (card) {\n      newLogVals.card = card._id;\n    }\n    let newLog = new BiRequestLog(newLogVals);\n    if (config.debug) {\n      console.log('**************NEW LOG**********');\n      console.log(newLog);\n    }\n    // Reattach card\n    if (card) {\n      newLog.card = card;\n    }\n    return await newLog.save();\n  }\n  return await BiRequestLog.findOne(biFindParams).populate(logPopulationValues);\n}\n\n/**\n * BI completed\n */\nexport async function biCompleted(req, res) {\n  try {\n    let dbCompanySettings = null;\n    let dbLogs;\n    let dbLog;\n    const key = req.get(config.biCallbackKeyHeader);\n    let dbRetailer;\n    // Make sure that we have the right key for callback\n    if (key !== config.biCallbackKey) {\n      return res.status(401).send('Unauthorized');\n    }\n    const {retailerId, number, pin} = req.body;\n    let balance = 0;\n    if (req.body.balance) {\n      balance = parseFloat(req.body.balance);\n    }\n    // fixed is used for fixing VBs which got screwed up, only those previously inserted\n    let fixed = !!req.body.fixed || false;\n    let invalid = false;\n    if (typeof req.body.invalid === 'number') {\n      invalid = !!req.body.invalid;\n    }\n    const {requestId} = req.params;\n    // Need balance and invalid\n    if (typeof invalid === 'undefined' || typeof balance === 'undefined' || typeof retailerId === 'undefined') {\n      return res.status(400).json({err: \"'invalid', 'balance', and 'retailerId' must be included in the request\"});\n    }\n    // Find by number and pin by default\n    const findByNumber = {number};\n    if (pin) {\n      findByNumber.pin = pin;\n    }\n    // Get most recent log\n    dbLogs = await BiRequestLog.find({\n      $or: [{\n        requestId\n      }, findByNumber]\n    })\n    .sort({created: -1})\n    .limit(1)\n    .populate(logPopulationValues);\n    // Most recent log if we have one\n    if (dbLogs.length) {\n      dbLog = dbLogs[0];\n    }\n    // Get retailers\n    dbRetailer = await Retailer.findOne({$or: [\n      {\n        gsId: retailerId\n      },\n      {\n        aiId: retailerId\n      }]});\n    // Retailer does not exist\n    if (!dbRetailer) {\n      return res.status(404).json({err: 'Retailer not found'});\n    }\n\n    // No log, so create one\n    if (!dbLog) {\n      dbLog = await createBiLogAsPartOfCompletion(number, pin, dbRetailer, balance);\n      // Create a new log if the balance has changed\n    } else if (typeof dbLog.balance === 'number' && dbLog.balance !== balance) {\n      dbLog = await createBiLogAsPartOfCompletion(number, pin, dbRetailer, balance);\n    }\n    // If we have a previously completed log, see if we need to make a new one\n    dbLog = await completeBiLog(dbLog, invalid, balance, requestId, fixed);\n    // Complete card, send callback, etc\n    await completeCardAndInventory(dbLog, invalid, balance);\n    // Find logs\n    dbLog = await BiRequestLog.findById(dbLog._id)\n    .populate(logPopulationValues);\n    // Get settings if we have an inventory\n    if (dbLog.card && dbLog.card.inventory && dbLog.card.inventory.company) {\n      dbCompanySettings = await dbLog.card.inventory.company.getSettings();\n    }\n    // Finalize transactions if we have a card associated with the log\n    if (dbLog.card && dbLog.card.inventory && dbLog.card.inventory.isTransaction) {\n      const inventory = dbLog.card.inventory;\n      let transaction = inventory.transaction;\n      const nccCardValue = balance * transaction.creditValuePercentage;\n      // Recalculate transaction values\n      transaction = calculateTransactionValues(transaction.transactionTotal, transaction.maxSpending, nccCardValue,\n        transaction.merchantPayoutPercentage);\n      // New transaction\n      inventory.transaction = Object.assign(inventory.transaction, transaction);\n      inventory.transaction.nccCardValue = transaction.cardValue;\n      // Verified balance has been received\n      inventory.hasVerifiedBalance = true;\n      await inventory.save();\n      if (dbLog.card && dbLog.card.inventory && dbLog.card.inventory.isTransaction && dbCompanySettings) {\n        await finalizeTransactionValues([dbLog.card.inventory], dbCompanySettings);\n      }\n    }\n    return res.json({});\n  } catch (err) {\n    console.log('**************COMPLETE BI ERR**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'biCompleted',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json({\n      invalid: 'An error has occurred.'\n    });\n  }\n}\n\n/**\n * Fake card status values\n * @param cardId Incoming card ID\n * @return {*}\n */\nfunction fakeCardStatus(cardId) {\n  if (cardId.indexOf(config.testCardBegin) !== -1) {\n    if (cardId === testCard1) {\n      return {\n        \"created\": \"2017-01-23T15:07:00-05:00\",\n        \"lastFour\": \"1000\",\n        \"pin\": null,\n        \"status\": \"Not shipped\",\n        \"claimedBalance\": 100,\n        \"verifiedBalance\": 0,\n        \"soldFor\": 0,\n        \"sellRate\": 0.75,\n        \"reconciled\": false,\n        \"retailer\": \"Adidas\",\n        \"saleConfirmed\": true,\n        \"saleAccepted\": true,\n        \"saleVerified\": false,\n        \"saleFinal\": false,\n        \"claimedBalanceInaccurate\": false\n      };\n    } else if (cardId === testCard2) {\n      return {\n        \"created\": \"2017-01-23T15:07:00-05:00\",\n        \"lastFour\": \"1000\",\n        \"pin\": null,\n        \"status\": \"Not shipped\",\n        \"claimedBalance\": 100,\n        \"verifiedBalance\": 100,\n        \"soldFor\": 75,\n        \"sellRate\": 0.75,\n        \"reconciled\": false,\n        \"retailer\": \"Adidas\",\n        \"saleConfirmed\": true,\n        \"saleAccepted\": true,\n        \"saleVerified\": false,\n        \"saleFinal\": false,\n        \"claimedBalanceInaccurate\": false\n      };\n    } else if (cardId === testCard3) {\n      return {\n        \"created\": \"2017-01-23T15:07:00-05:00\",\n        \"lastFour\": \"1000\",\n        \"pin\": null,\n        \"status\": \"Not shipped\",\n        \"claimedBalance\": 100,\n        \"verifiedBalance\": 100,\n        \"soldFor\": 75,\n        \"sellRate\": 0.75,\n        \"reconciled\": false,\n        \"retailer\": \"Adidas\",\n        \"saleConfirmed\": false,\n        \"saleAccepted\": true,\n        \"saleVerified\": false,\n        \"saleFinal\": false,\n        \"claimedBalanceInaccurate\": false\n      };\n    } else if (cardId === testCard4) {\n      return {\n        \"created\": \"2017-01-23T15:07:00-05:00\",\n        \"lastFour\": \"1000\",\n        \"pin\": null,\n        \"status\": \"Not shipped\",\n        \"claimedBalance\": 100,\n        \"verifiedBalance\": 0,\n        \"soldFor\": 0,\n        \"sellRate\": 0.75,\n        \"reconciled\": false,\n        \"retailer\": \"Adidas\",\n        \"saleConfirmed\": true,\n        \"saleAccepted\": true,\n        \"saleVerified\": false,\n        \"saleFinal\": false,\n        \"claimedBalanceInaccurate\": false\n      };\n    }\n  }\n  return false;\n}\n\n/**\n * Get card status after sale\n GET http://localhost:9000/api/lq/status/:cardId\n GET http://localhost:9000/api/lq/status/begin/:begin/end/:end\n GET http://localhost:9000/api/lq/status/begin/:begin\n GET http://localhost:9000/api/lq/status/end/:end\n HEADERS\n Params\n {\n \"cardId\":\"57ffbdd5283e93464809c84b\",\n \"begin\":\"2016-11-18T18:03:46-05:00\", (optional param, format ISO 8601)\n \"end\":\"2016-11-18T18:03:46-05:00\" (optional param, format ISO 8601)\n }\n RESPONSE\n {\n  \"created\": \"2016-10-13T20:34:50-04:00\",\n  \"lastFour\": \"2053\",\n  \"pin\": \"3313\",\n  \"status\": \"Received by CQ\",\n  \"claimedBalance\": 300,\n  \"verifiedBalance\": 53,\n  \"soldFor\": 36.84,\n  \"sellRate\": 0.695,\n  \"reconciled\": false\n}\n */\nexport async function getCardStatus(req, res) {\n  try {\n    const {cardId} = req.params;\n    const userTime = formatDateParams(req.params, res);\n    // Validate card ID\n    if (cardId) {\n      if (cardId.indexOf(config.testCardBegin) === -1 && !mongoose.Types.ObjectId.isValid(cardId)) {\n        return res.status(400).json({error: 'Invalid card ID'});\n      }\n    }\n    let search;\n    const user = req.user;\n    if (cardId) {\n      // Test cards\n      const testVal = fakeCardStatus(cardId);\n      if (testVal) {\n        return res.json(testVal);\n      }\n      Card.findOne({\n        _id: cardId,\n        user: user._id\n      })\n      .populate('inventory')\n      .populate('retailer')\n      .then(card => {\n        if (!card) {\n          return res.status(400).json({error: 'Card not found'});\n        }\n\n        card = card.toObject();\n        const inventory = card.inventory;\n        // No inventory\n        if (!inventory) {\n          return res.status(500).json({error: \"Card data invalid\"});\n        }\n\n        card.saleConfirmed = !(inventory.smp === '1' && inventory.saveYa && !inventory.saveYa.confirmed);\n\n        card = formatCardStatusResults(card);\n        card = decorateCardWithSaleStatuses(Object.assign(card, {balance: card.claimedBalance}), inventory);\n        delete card.balance;\n\n        return res.json(card);\n      });\n    } else {\n      const query = {\n        user: user._id,\n      };\n      if (userTime) {\n        query.userTime = userTime;\n      }\n      search = Card.find(query)\n      .populate('inventory')\n      .populate('retailer')\n      .sort({\n        userTime: -1\n      })\n      .then(cards => {\n        let processedCards = [];\n\n        cards.forEach(card => {\n          card = card.toObject();\n          const inventory = card.inventory;\n\n          if (! inventory) {\n            return;\n          }\n\n          card.saleConfirmed = !(inventory.smp === '1' && inventory.saveYa && !inventory.saveYa.confirmed);\n\n          card = formatCardStatusResults(card);\n          card = decorateCardWithSaleStatuses(\n            Object.assign(card, {balance: card.claimedBalance}), inventory\n          );\n          delete card.balance;\n\n          processedCards.push(card);\n        });\n\n        res.json(processedCards);\n      });\n    }\n  } catch(e) {\n    console.log('**************ERROR**********');\n    console.log(e);\n    if (e === 'invalidBegin' || e === 'invalidEnd') {\n      return;\n    }\n\n    await ErrorLog.create({\n      method: 'getCardStatus',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: e.stack,\n      error: e,\n      user: req.user._id\n    })\n      .then(()=> {\n        return res.status(500).json({\n          invalid: 'An error has occurred.'\n        });\n      });\n  }\n}\n\n/**\n * Format date params when searching cards\n * @param params\n * @param res\n */\nfunction formatDateParams(params, res) {\n  let {begin, end} = params;\n  let userTime;\n  if (begin) {\n    begin = moment(begin);\n    if (begin.isValid()) {\n      userTime = {\n        $gt: begin.format()\n      };\n    } else {\n      res.status(400).json({error: 'Invalid begin date'});\n      throw 'invalidBegin';\n    }\n  }\n  if (end) {\n    end = moment(end);\n    if (end.isValid()) {\n      if (!userTime) {\n        userTime = {};\n      }\n      userTime.$lt = end.format();\n    } else {\n      res.status(400).json({error: 'Invalid end date'});\n      throw 'invalidEnd';\n    }\n  }\n  return userTime;\n}\n\n/**\n * Format results when getting card statuses\n * @param card Single card to format\n */\nfunction formatCardStatusResults(card) {\n  try {\n    let status;\n    if (typeof card.toObject === 'function') {\n      card = card.toObject();\n    }\n    switch (card.inventory.activityStatus) {\n      case 'shipped':\n        status = 'Shipped to CQ';\n        break;\n      case 'receivedCq':\n      case 'sentToSmp':\n      case 'receivedSmp':\n        status = 'Received by CQ';\n        break;\n      case 'rejected':\n        status = 'Rejected';\n        break;\n      default:\n        status = 'Not shipped';\n    }\n    const displaySellRate = formatFloat(card.inventory.liquidationRate - card.inventory.margin);\n    let balanceForCalculations;\n    balanceForCalculations = card.inventory.verifiedBalance ? card.inventory.verifiedBalance : card.inventory.balance;\n    let soldFor = balanceForCalculations * displaySellRate;\n    if (isNaN(soldFor)) {\n      soldFor = 0;\n    }\n    const saleFinal = !!card.inventory.cqAch;\n    return {\n      _id: card._id,\n      created: moment(card.userTime).format(),\n      lastFour: card.number.substring(card.number.length - 4),\n      pin: card.pin,\n      status,\n      claimedBalance: card.balance,\n      verifiedBalance: saleFinal ? (card.inventory.verifiedBalance || card.inventory.balance) : (card.inventory.verifiedBalance || null),\n      soldFor: formatFloat(soldFor),\n      sellRate: displaySellRate,\n      reconciled: !!card.inventory.reconciliation,\n      retailer: card.retailer.name,\n      saleConfirm: card.saleConfirmed\n    };\n  } catch(e) {\n    e = e.toString();\n    console.log('**************ERR IN LQ FORMATCARDSTATUSRESULTS**********');\n    console.log(e);\n    switch (true) {\n      // Retailer missing\n      case /name/.test(e):\n        card.retailer = {};\n        return formatCardStatusResults(card);\n      // Number missing\n      case /substring/.test(e):\n        card.number = null;\n        return formatCardStatusResults(card);\n      // Pin\n      case /pin/.test(e):\n        card.pin = null;\n        return formatCardStatusResults(card);\n      // Inventory error\n      case /(verifiedBalance|reconciliation)/.test(e):\n        card.inventory = {};\n        return formatCardStatusResults(card);\n      // Sold for\n      case /toFixed/.test(e):\n        card.soldFor = 0;\n        return formatCardStatusResults(card);\n      default:\n        throw new Error({error: 'unknown'});\n    }\n  }\n}\n\n/**\n * Add card to reconciliation\n PATCH http://localhost:9000/api/lq/reconcile\n HEADERS\n BODY\n {\n \"cardId\":\"57ffbdd5283e93464809c84b\",\n \"userTime\":\"2016-09-10T20:34:50-04:00\",\n }\n RESPONSE 200\n */\nexport function reconcile(req, res) {\n  const {cardId, userTime} = req.body;\n  let card;\n  if (!cardId || !userTime) {\n    return res.status(400).json({\n      invalid: 'Include the following POST parameters: cardId, userTime'\n    });\n  }\n  Card.findOne({\n    _id: cardId,\n    user: req.user._id\n  })\n  .populate('inventory')\n  .then(dbCard => {\n    if (!dbCard) {\n      return res.status(403).json({error: 'Card not found'});\n    }\n    if (dbCard.reconciliation) {\n      return res.status(400).json({error: 'Card already reconciled'});\n    }\n    card = dbCard;\n    const reconciliation = new Reconciliation({\n      userTime,\n      inventory: card.inventory._id\n    });\n    return reconciliation.save();\n  })\n  .then(reconcilation => {\n    if (!reconcilation) {\n      return;\n    }\n    card.inventory.reconciliation = reconcilation._id;\n    return card.inventory.save();\n  })\n  .then(card => {\n    if (!card) {\n      return;\n    }\n    res.status(200).json();\n  });\n}\n\n/**\n * @todo Return company reserve\n * @return {number}\n */\nexport function getCompanyReserve(req, res) {\n  return 100;\n}\n\n/**\n * Get company settings\nGET http://gcmgr-staging.cardquiry.com:9000/api/lq/company/:companyId/settings\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nParams\n{\n\"companyId\": \"56637dd6295c4d131c901ba1\"\n}\nResponse\n{\n\"cardType\": \"electronic\",\n\"autoSell\": true,\n\"minimumAdjustedDenialAmount\": 0.1,\n\"biOnly\": true\n}\n */\nexport function getCompanySettings(req, res) {\n  const {companyId} = req.params;\n  let dbCompany;\n\n  Company.findById(companyId)\n  .then(company => {\n    dbCompany = company;\n    return company.getSettings();\n  })\n  .then(settings => {\n    return res.json({\n      cardType: settings.cardType || 'both',\n      autoSell: settings.autoSell,\n      minimumAdjustedDenialAmount: settings.minimumAdjustedDenialAmount,\n      biOnly: settings.biOnly || false,\n      customerDataRequired: settings.customerDataRequired,\n      reserveTotal: dbCompany.reserveTotal,\n      callbackUrl: settings.callbackUrl\n    });\n  })\n  .catch(async err => {\n\n    await ErrorLog.create({\n      method: 'getCompanySettings',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    })\n    .then(()=> {\n      return res.status(500).json({\n        invalid: 'An error has occurred.'\n      });\n    });\n  });\n}\n\n/**\n *Update company settings\nPATCH http://gcmgr-staging.cardquiry.com:9000/api/lq/company/:companyId/settings\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nParams\n{\n\"companyId\": \"56637dd6295c4d131c901ba1\"\n}\nBody\n{\n\"cardType\": \"electronic\",\n\"autoSell\": true,\n\"minimumAdjustedDenialAmount\": 0.1,\n\"biOnly\": true,\n\"customerDataRequired\": true,\n\"callbackUrl\": \"www.testcall.com\"\n}\nResponse\n200\n */\nexport function updateCompanySettings(req, res) {\n  const {companyId} = req.params;\n  const body = req.body;\n\n  Company.findById(companyId)\n  .then(company => {\n    return company.getSettingsObject();\n  })\n  .then(settings => {\n    ['cardType', 'autoSell', 'biOnly', 'customerDataRequired', 'minimumAdjustedDenialAmount', 'callbackUrl'].forEach(attr => {\n      if (typeof body[attr] !== 'undefined') {\n        settings[attr] = body[attr];\n      }\n    });\n\n    return settings.save();\n  })\n  .then(settings => {\n    return res.json({\n      cardType: settings.cardType || 'both',\n      autoSell: settings.autoSell,\n      biOnly: settings.biOnly || false,\n      minimumAdjustedDenialAmount: settings.minimumAdjustedDenialAmount,\n      customerDataRequired: settings.customerDataRequired,\n      callbackUrl: settings.callbackUrl\n    });\n  })\n  .catch(async err => {\n\n    await ErrorLog.create({\n      method: 'updateCompanySettings',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    })\n    .then(()=> {\n      return res.status(500).json({\n        invalid: 'An error has occurred.'\n      });\n    });\n  });\n}\n\n/**\n * Mark a card for sale\n PATCH http://gcmgr-staging.cardquiry.com:9000/api/lq/card/:cardId/proceed-with-sale\n HEADERS\n Accept: application/json\n Content-Type: application/json\n Authorization: bearer <token>\n Params\n {\n \"cardId\": \"5668fbff37229093139b93d1\"\n }\n Response\n 200\n */\nexport function proceedWithSale(req, res) {\n  const {cardId} = req.params;\n\n  if (!mongoose.Types.ObjectId.isValid(cardId)) {\n    return res.status(400).json({error: 'Invalid card ID'});\n  }\n\n  Card.findById(cardId)\n  .populate('inventory')\n  .then(card => {\n    if (!card) {\n      throw 'notFound';\n    }\n    const inventory = card.inventory;\n    inventory.proceedWithSale = true;\n    return inventory.save();\n  })\n  .then(() => res.json())\n  .catch(async err => {\n    if (err === 'notFound') {\n      return res.status(400).json({error: 'Card not found'});\n    }\n\n    console.log('*******************ERR IN PROCEEDWITHSALE*******************');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'proceedWithSale',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    })\n    .then(()=> {\n      return res.status(500).json({\n        invalid: 'An error has occurred.'\n      });\n    });\n  });\n}\n\n/**\n * Get customers for this store\n */\nexport function getStoreCustomers(req, res) {\n  req.params.store = req.params.storeId;\n  return getCustomersThisStore(req, res);\n}\n\n/**\n * Search customers\nGET http://gcmgr-staging.cardquiry.com:9000/api/lq/customers/search/:customerName\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nParams\n{\n\"customerName\": \"Blah\"\n}\nRESULT:\n[\n {\n   \"_id\": \"56cca6cf780b493151881a58\",\n   \"fullName\": \"Blah Blah Blah\",\n   \"state\": \"AR\",\n   \"company\": \"56637dd6295c4d131c901ba1\",\n   \"firstName\": \"Blah\",\n   \"middleName\": \"Blah\",\n   \"lastName\": \"Blah\",\n   \"stateId\": \"53532523\",\n   \"phone\": \"513-404-7626\",\n   \"address1\": \"1\",\n   \"address2\": \"1\",\n   \"city\": \"1\",\n   \"zip\": \"44444\",\n   \"systemId\": \"444444\",\n   \"__v\": 0,\n   \"credits\": [],\n   \"rejections\": [\n     \"57e891c5cc40659d2804d9f9\",\n     \"57e8948ecc40659d2804da09\",\n     \"573dff03dcd0429650cb27dc\"\n   ],\n   \"edits\": [],\n   \"store\": [],\n   \"rejectionTotal\": 0,\n   \"created\": \"2016-02-23T18:37:03.876Z\",\n   \"id\": \"56cca6cf780b493151881a58\"\n },\n ...\n]\n */\nexport function searchCustomers(req, res) {\n  req.query.name = req.params.customerName;\n\n  return searchCustomersCustomerController(req, res);\n}\n\n/**\n * Get a specific customer\nGET http://gcmgr-staging.cardquiry.com:9000/api/lq/customers/:customerId\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nParams\n{\n \"customerId\": \"56cca6cf780b493151881a58\"\n}\nRESULT:\n{\n \"_id\": \"56cca6cf780b493151881a58\",\n \"fullName\": \"Blah Blah Blah\",\n \"state\": \"AR\",\n \"company\": \"56637dd6295c4d131c901ba1\",\n \"firstName\": \"Blah\",\n \"middleName\": \"Blah\",\n \"lastName\": \"Blah\",\n \"stateId\": \"53532523\",\n \"phone\": \"513-404-7626\",\n \"address1\": \"1\",\n \"address2\": \"1\",\n \"city\": \"1\",\n \"zip\": \"44444\",\n \"systemId\": \"444444\",\n \"__v\": 0,\n \"credits\": [],\n \"rejections\": [\n   \"57e891c5cc40659d2804d9f9\",\n   \"57e8948ecc40659d2804da09\",\n   \"573dff03dcd0429650cb27dc\"\n ],\n \"edits\": [],\n \"store\": [],\n \"rejectionTotal\": 0,\n \"created\": \"2016-02-23T18:37:03.876Z\",\n \"id\": \"56cca6cf780b493151881a58\"\n}\n  */\nexport function getCustomer(req, res) {\n  const {customerId} = req.params;\n  const company = req.user.company;\n\n  if (mongoose.Types.ObjectId.isValid(customerId)) {\n    Customer.findOne({_id: customerId, company}).then(customer => {\n      // Not found\n      if (!customer) {\n        return res.status(404).json();\n      }\n\n      return res.json(customer);\n    });\n  } else {\n    return res.status(invalidObjectId.code).json(invalidObjectId.res);\n  }\n}\n\n/**\n * Delete a customer\n */\nexport function deleteCustomer(req, res) {\n  Customer.findById(req.params.customerId)\n  .then(customer => {\n    // No customer\n    if (!customer) {\n      res.status(notFound.code).json(notFound.res);\n      throw notFound;\n    }\n    customer.enabled = false;\n    return customer.save();\n  })\n  .then(() => res.json())\n  .catch(async e => {\n    if (e === notFound) {\n      return;\n    }\n\n    await ErrorLog.create({\n      method: 'deleteCustomer',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: e.stack,\n      error: e,\n      user: req.user._id\n    })\n    .then(()=> {\n      return res.status(500).json({\n        invalid: 'An error has occurred.'\n      });\n    });\n  })\n}\n\n/**\n * Create a new customer\nPOST http://gcmgr-staging.cardquiry.com:9000/api/lq/customers\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nBODY\n{\n  \"state\": \"AL\",\n  \"firstName\": \"John\",\n  \"middleName\": \"Q\",\n  \"lastName\": \"Public\",\n  \"stateId\": \"1ABC\",\n  \"phone\": \"111-879-8765\",\n  \"address1\": \"123 Abc Street\",\n  \"address2\": \"Ct. #100\",\n  \"city\": \"Adamsville\",\n  \"zip\": \"35005\",\n  \"systemId\": \"1148832\"\n}\nRESULT\n{\n  \"__v\": 0,\n  \"fullName\": \"John Q Public\",\n  \"company\": \"56637dd6295c4d131c901ba1\",\n  \"state\": \"AL\",\n  \"firstName\": \"John\",\n  \"middleName\": \"Q\",\n  \"lastName\": \"Public\",\n  \"stateId\": \"1ABC\",\n  \"phone\": \"111-879-8765\",\n  \"address1\": \"123 Abc Street\",\n  \"address2\": \"Ct. #100\",\n  \"city\": \"Adamsville\",\n  \"zip\": \"35005\",\n  \"systemId\": \"1148832\",\n  \"_id\": \"59079ad0565cb21e5458e894\",\n  \"credits\": [],\n  \"rejections\": [],\n  \"edits\": [],\n  \"store\": [],\n  \"rejectionTotal\": 0,\n  \"created\": \"2017-05-01T20:30:08.440Z\",\n  \"id\": \"59079ad0565cb21e5458e894\"\n}\n */\nexport function newCustomer(req, res) {\n  req.user.store = req.params.storeId;\n  req.body.store = req.params.storeId;\n  return newCustomerCustomerController(req, res);\n}\n\n/**\n * Update a customer\nPATCH http://gcmgr-staging.cardquiry.com:9000/api/lq/customers/:customerId\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nParams\n{\n  \"customerId\": \"56cca6cf780b493151881a58\"\n}\nBODY\n{\n  \"state\": \"AL\",\n  \"firstName\": \"John\",\n  \"middleName\": \"Q\",\n  \"lastName\": \"Public\",\n  \"stateId\": \"1ABC\",\n  \"phone\": \"111-879-8765\",\n  \"address1\": \"123 Abc Street\",\n  \"address2\": \"Ct. #100\",\n  \"city\": \"Adamsville\",\n  \"zip\": \"35005\",\n  \"enabled\": true\n}\nRESULT\n200\n */\nexport function updateCustomer(req, res) {\n  return updateCustomerCustomerController(req, res);\n}\n\n/**\n * Create a new store\nPOST http://gcmgr-staging.cardquiry.com:9000/api/lq/stores\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nBODY\n{\n  \"name\": \"New Store\",\n  \"address1\": \"123 Abc Street\",\n  \"address2\": \"Ct. #100\",\n  \"city\": \"Adamsville\",\n  \"state\": \"AL\",\n  \"zip\": \"35005\",\n  \"contact\": {\n    \"firstName\": \"John\",\n    \"role\": \"employee\",\n    \"lastName\": \"Public\",\n    \"email\": \"johnq@public.com\",\n    \"password\": \"123456\"\n  },\n  \"creditValuePercentage\": 1.1,\n  \"maxSpending\": 30,\n  \"payoutAmountPercentage\": 0.2\n}\nRESULT\n{\n  \"_id\": \"56cca6cf780b493151881a59\"\n}\n*/\nexport function createStore(req, res) {\n  req.body.companyId = req.user.company;\n  return newStore(req, res);\n}\n\n/**\n * Update a store\nPATCH http://gcmgr-staging.cardquiry.com:9000/api/lq/stores/:storeId\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nPARAMS\n{\n  \"storeId\": \"56cca6cf780b493151881a59\"\n}\nBODY\n{\n  \"name\": \"New Store\",\n  \"address1\": \"123 Abc Street\",\n  \"address2\": \"Ct. #100\",\n  \"city\": \"Adamsville\",\n  \"state\": \"AL\",\n  \"zip\": \"35005\",\n  \"phone\": \"111-555-8888\",\n  \"creditValuePercentage\": 120,\n  \"maxSpending\": 50,\n  \"payoutAmountPercentage\": 35\n}\nRESULT\n{\n  \"_id\":\"56cca6cf780b493151881a59\",\n  \"name\": \"New Store\",\n  \"address1\": \"123 Abc Street\",\n  \"address2\": \"Ct. #100\",\n  \"city\": \"Adamsville\",\n  \"state\": \"AL\",\n  \"zip\": \"35005\",\n  \"phone\": \"111-555-8888\",\n  \"companyId\": \"56637dd6295c4d131c901ba1\",\n  \"reconciledTime\": \"2017-05-02T22:33:23.191Z\",\n  \"created\": \"2015-12-07T03:57:47.461Z\",\n  \"creditValuePercentage\": 120,\n  \"maxSpending\": 50,\n  \"payoutAmountPercentage\": 35\n}\n*/\nexport function updateStore(req, res) {\n  req.body.storeId = req.params.storeId;\n\n  // Prevents them from being able to change the companyId.\n  // This attribute should be ignored in the future.\n  if (req.body.companyId) {\n    req.body.companyId = req.user.company;\n  }\n\n  return updateStoreCompanyController(req, res);\n}\n\n/**\n * Retrieve all stores\nGET http://gcmgr-staging.cardquiry.com:9000/api/lq/stores\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nRESULT\n[\n  {\n    \"_id\":\"56cca6cf780b493151881a59\",\n    \"name\": \"New Store\",\n    \"address1\": \"123 Abc Street\",\n    \"address2\": \"Ct. #100\",\n    \"city\": \"Adamsville\",\n    \"state\": \"AL\",\n    \"zip\": \"35005\",\n    \"phone\": \"111-555-8888\",\n    \"companyId\": \"56637dd6295c4d131c901ba1\",\n    \"reconciledTime\": \"2017-05-02T22:33:23.191Z\",\n    \"created\": \"2015-12-07T03:57:47.461Z\",\n    \"creditValuePercentage\": 120,\n    \"maxSpending\": 50,\n    \"payoutAmountPercentage\": 35\n    \"users\": [\n      {\n        \"_id\": \"590bb39363f76f1aab9cb717\",\n        \"store\": \"56cca6cf780b493151881a59\",\n        \"firstName\": \"John\",\n        \"lastName\": \"Public\",\n        \"email\": \"johnq@public.com\",\n        \"__v\": 0,\n        \"company\": \"56637dd6295c4d131c901ba1\",\n        \"created\": \"2017-05-04T23:04:51.694Z\",\n        \"role\": \"employee\",\n        \"profile\": {\n          \"lastName\": \"Public\",\n          \"firstName\": \"John\",\n          \"email\": \"johnq@public.com\",\n          \"_id\": \"590bb39363f76f1aab9cb717\"\n        },\n        \"token\": {\n          \"role\": \"employee\",\n          \"_id\": \"590bb39363f76f1aab9cb717\"\n        },\n        \"fullName\": \"John Public\",\n        \"id\": \"590bb39363f76f1aab9cb717\"\n      }\n    ]\n  },\n  ...\n]\n*/\nexport function getStores(req, res) {\n  req.params.companyId = req.user.company;\n  return getStoresCompanyController(req, res);\n}\n\n/**\n * Retrieve a store\nGET http://gcmgr-staging.cardquiry.com:9000/api/lq/stores/:storeId\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nPARAMS\n{\n  \"storeId\": \"56cca6cf780b493151881a59\"\n}\nRESULT\n{\n  \"_id\":\"56cca6cf780b493151881a59\",\n  \"name\": \"New Store\",\n  \"address1\": \"123 Abc Street\",\n  \"address2\": \"Ct. #100\",\n  \"city\": \"Adamsville\",\n  \"state\": \"AL\",\n  \"zip\": \"35005\",\n  \"phone\": \"111-555-8888\",\n  \"companyId\": \"56637dd6295c4d131c901ba1\",\n  \"reconciledTime\": \"2017-05-02T22:33:23.191Z\",\n  \"created\": \"2015-12-07T03:57:47.461Z\",\n  \"creditValuePercentage\": 120,\n  \"maxSpending\": 50,\n  \"payoutAmountPercentage\": 35\n  \"users\": [\n    {\n      \"_id\": \"590bb39363f76f1aab9cb717\",\n      \"store\": \"56cca6cf780b493151881a59\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Public\",\n      \"email\": \"johnq@public.com\",\n      \"__v\": 0,\n      \"company\": \"56637dd6295c4d131c901ba1\",\n      \"created\": \"2017-05-04T23:04:51.694Z\",\n      \"role\": \"employee\",\n      \"profile\": {\n        \"lastName\": \"Public\",\n        \"firstName\": \"John\",\n        \"email\": \"johnq@public.com\",\n        \"_id\": \"590bb39363f76f1aab9cb717\"\n      },\n      \"token\": {\n        \"role\": \"employee\",\n        \"_id\": \"590bb39363f76f1aab9cb717\"\n      },\n      \"fullName\": \"John Public\",\n      \"id\": \"590bb39363f76f1aab9cb717\"\n    }\n  ]\n}\n*/\nexport function getStore(req, res) {\n  return getStoreDetails(req, res);\n}\n\n/**\n * Delete a store\nDELETE http://gcmgr-staging.cardquiry.com:9000/api/lq/stores/:storeId\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nPARAMS\n{\n  \"storeId\": \"56cca6cf780b493151881a59\"\n},\nRESULT\n200\n*/\nexport function deleteStore(req, res) {\n  return deleteStoreCompanyController(req, res);\n}\n\n/**\n * Create an employee\nPOST http://gcmgr-staging.cardquiry.com:9000/api/lq/stores/:storeId/employees\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nPARAMS\n{\n  \"storeId\": \"56cca6cf780b493151881a59\"\n}\nBODY\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Public\",\n  \"email\": \"johnq@public.com\",\n  \"password\": \"123456\",\n  \"role\": \"employee\"\n}\nRESULT\n{\n  \"_id\": \"590bb39363f76f1aab9cb717\",\n  \"store\": \"56cca6cf780b493151881a59\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Public\",\n  \"email\": \"johnq@public.com\",\n  \"__v\": 0,\n  \"company\": \"56637dd6295c4d131c901ba1\",\n  \"created\": \"2017-05-04T23:04:51.694Z\",\n  \"role\": \"employee\",\n  \"profile\": {\n    \"lastName\": \"Public\",\n    \"firstName\": \"John\",\n    \"email\": \"johnq@public.com\",\n    \"_id\": \"590bb39363f76f1aab9cb717\"\n  },\n  \"token\": {\n    \"role\": \"employee\",\n    \"_id\": \"590bb39363f76f1aab9cb717\"\n  },\n  \"fullName\": \"John Public\",\n  \"id\": \"590bb39363f76f1aab9cb717\"\n}\n */\nexport function createEmployee(req, res) {\n  req.body.companyId = req.user.company.toString();\n  req.body.storeId = req.params.storeId;\n\n  if (req.user.role === 'manager' && req.body.role === 'corporate-admin') {\n    return res.status(401).json({error: \"Managers can't create corporate admin accounts\"});\n  }\n\n  return newEmployee(req, res);\n}\n\n/**\n * Update an employee\nPATCH http://gcmgr-staging.cardquiry.com:9000/api/lq/stores/:storeId/employees/:employeeId\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nPARAMS\n{\n  \"storeId\": \"56cca6cf780b493151881a59\",\n  \"employeeId\": \"590bb39363f76f1aab9cb717\"\n}\nBODY\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Public\",\n  \"email\": \"johnq@public.com\",\n  \"password\": \"123456\",\n  \"role\": \"employee\"\n}\nRESULT\n{\n  \"_id\": \"590bb39363f76f1aab9cb717\",\n  \"store\": \"56cca6cf780b493151881a59\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Public\",\n  \"email\": \"johnq@public.com\",\n  \"__v\": 0,\n  \"company\": \"56637dd6295c4d131c901ba1\",\n  \"created\": \"2017-05-04T23:04:51.694Z\",\n  \"role\": \"employee\",\n  \"profile\": {\n    \"lastName\": \"Public\",\n    \"firstName\": \"John\",\n    \"email\": \"johnq@public.com\",\n    \"_id\": \"590bb39363f76f1aab9cb717\"\n  },\n  \"token\": {\n    \"role\": \"employee\",\n    \"_id\": \"590bb39363f76f1aab9cb717\"\n  },\n  \"fullName\": \"John Public\",\n  \"id\": \"590bb39363f76f1aab9cb717\"\n}\n*/\nexport function updateEmployee(req, res) {\n  let fakeReq, fakeRes;\n  [fakeReq, fakeRes] = makeFakeReqRes(req);\n  fakeReq.params = req.params;\n  fakeReq.params.id = req.params.employeeId;\n\n  modifyUser(fakeReq, fakeRes)\n  .then(() => {\n    if (fakeRes.code) {\n      return res.status(fakeRes.code).json(fakeRes.response);\n    }\n\n    return fakeRes.response;\n  })\n  .then(user => {\n    if (req.body.role) {\n      if (req.user.role === 'manager' && ['manager', 'employee'].indexOf(req.body.role) !== -1) {\n        user.role = req.body.role;\n      }\n\n      if (req.user.role === 'corporate-admin' && ['manager', 'employee', 'corporate-admin'].indexOf(req.body.role) !== -1) {\n        user.role = req.body.role;\n      }\n    }\n\n    return user.save();\n  })\n  .then(user => res.json(user))\n  .catch(async err => {\n    console.log('**************ERR IN UPDATEEMPLOYEE**************');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'updateEmployee',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    })\n    .then(()=> {\n      return res.status(500).json({\n        invalid: 'An error has occurred.'\n      });\n    });\n  });\n}\n\n/**\n * Delete an employee\nDELETE http://gcmgr-staging.cardquiry.com:9000/api/lq/stores/:storeId/employees/:employeeId\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nPARAMS\n{\n  \"storeId\": \"56cca6cf780b493151881a59\",\n  \"employeeId\": \"590bb39363f76f1aab9cb717\"\n}\nRESULT\n200\n*/\nexport function deleteEmployee(req, res) {\n  return deleteEmployeeCompanyController(req, res);\n}\n\n/**\n * Retrieve all employees of a store\nGET http://gcmgr-staging.cardquiry.com:9000/api/lq/stores/:storeId/employees\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nPARAMS\n{\n  \"storeId\": \"56cca6cf780b493151881a59\"\n}\nRESULT\n[\n  {\n    \"_id\": \"590bb39363f76f1aab9cb717\",\n    \"store\": \"56cca6cf780b493151881a59\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Public\",\n    \"email\": \"johnq@public.com\",\n    \"__v\": 0,\n    \"company\": \"56637dd6295c4d131c901ba1\",\n    \"created\": \"2017-05-04T23:04:51.694Z\",\n    \"role\": \"employee\",\n    \"profile\": {\n      \"lastName\": \"Public\",\n      \"firstName\": \"John\",\n      \"email\": \"johnq@public.com\",\n      \"_id\": \"590bb39363f76f1aab9cb717\"\n    },\n    \"token\": {\n      \"role\": \"employee\",\n      \"_id\": \"590bb39363f76f1aab9cb717\"\n    },\n    \"fullName\": \"John Public\",\n    \"id\": \"590bb39363f76f1aab9cb717\"\n  },\n  ...\n]\n*/\nexport function getEmployees(req, res) {\n  const {storeId} = req.params;\n  // Invalid object ID\n  if (!mongoose.Types.ObjectId.isValid(storeId)) {\n    return res.status(invalidObjectId.code).json(invalidObjectId.res);\n  }\n\n  Store.findOne({_id: storeId, companyId: req.user.company})\n  .populate('users')\n  .then(store => {\n    if (!store) {\n      return res.status(404).json();\n    }\n\n    return res.json(store.users);\n  })\n  .catch(async err => {\n    console.log('****************************ERR IN GETEMPLOYEES****************************');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getEmployees',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    })\n    .then(()=> {\n      return res.status(500).json({\n        invalid: 'An error has occurred.'\n      });\n    });\n  });\n}\n\n/**\n * Retrieve an employee\nGET http://gcmgr-staging.cardquiry.com:9000/api/lq/stores/:storeId/employees/:employeeId\nHEADERS\nAccept: application/json\nContent-Type: application/json\nAuthorization: bearer <token>\nPARAMS\n{\n  \"storeId\": \"56cca6cf780b493151881a59\",\n  \"employeeId\": \"590bb39363f76f1aab9cb717\"\n}\nRESULT\n{\n  \"_id\": \"590bb39363f76f1aab9cb717\",\n  \"store\": \"56cca6cf780b493151881a59\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Public\",\n  \"email\": \"johnq@public.com\",\n  \"__v\": 0,\n  \"company\": \"56637dd6295c4d131c901ba1\",\n  \"created\": \"2017-05-04T23:04:51.694Z\",\n  \"role\": \"employee\",\n  \"profile\": {\n    \"lastName\": \"Public\",\n    \"firstName\": \"John\",\n    \"email\": \"johnq@public.com\",\n    \"_id\": \"590bb39363f76f1aab9cb717\"\n  },\n  \"token\": {\n    \"role\": \"employee\",\n    \"_id\": \"590bb39363f76f1aab9cb717\"\n  },\n  \"fullName\": \"John Public\",\n  \"id\": \"590bb39363f76f1aab9cb717\"\n}\n */\nexport function getEmployee(req, res) {\n  const {storeId, employeeId} = req.params;\n\n  if (!mongoose.Types.ObjectId.isValid(storeId) ||\n      !mongoose.Types.ObjectId.isValid(employeeId)) {\n    return res.status(404).json();\n  }\n\n  User.findOne({_id: employeeId, store: storeId, company: req.user.company})\n  .then(user => {\n    if (!user) {\n      return res.status(404).json();\n    }\n\n    return res.json(user);\n  })\n  .catch(async err => {\n    console.log('*************************ERR IN GETEMPLOYEE*************************');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getEmployee',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    })\n    .then(()=> {\n      return res.status(500).json({\n        invalid: 'An error has occurred.'\n      });\n    });\n  })\n}\n\n/**\n * Reset transactions\n */\nexport function resetTransactions(req, res) {\n  Store.find({})\n  .then(stores => {\n    const promises = [];\n    stores.forEach(store => {\n      store.reserveTotal = 0;\n      store.reserves = [];\n      promises.push(store.save());\n    });\n    return Promise.all(promises);\n  })\n  .then(() => Company.find({}))\n  .then(companies => {\n    const promises = [];\n    companies.forEach(company => {\n      company.reserveTotal = 0;\n      company.reserves = [];\n      promises.push(company.save());\n    });\n    return Promise.all(promises);\n  })\n  .then(() => Inventory.find({})\n  .populate('card')\n  .then(inventories => {\n    const promises = [];\n    inventories.forEach(inventory => {\n      if (inventory.transaction) {\n        if (inventory.card) {\n          promises.push(inventory.card.remove());\n        }\n        promises.push(inventory.remove());\n      }\n    });\n    return Promise.all(promises);\n  }))\n  // Remove reserve records\n  .then(async () => await Reserve.remove({}))\n  .then(() => res.json({}));\n}\n\nasync function setVerifiedBalance(inventory, verifiedBalance) {\n  inventory.verifiedBalance = verifiedBalance;\n  inventory.isTransaction = true;\n  return inventory.save();\n}\n\n/**\n * Mock a credit/reject for staging\n */\nexport function mockCreditReject(req, res) {\n  const {verifiedBalance, cards} = req.body;\n  return Card.find({_id: {$in: cards}}).populate('inventory')\n  .then(async cards => {\n    const dbInventories = cards.map(card => card.inventory);\n    for (let inventory of dbInventories) {\n      await setVerifiedBalance(inventory, verifiedBalance);\n    }\n    const [fakeReq, fakeRes] = makeFakeReqRes(req);\n    fakeReq.body.inventories = dbInventories.map(inv => inv._id.toString());\n    await rejectCards(fakeReq, fakeRes);\n    return res.json({});\n  })\n  .catch(async err => {\n    if (err === 'notFound') {\n      return;\n    }\n    console.log('**************ERR**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'mockCreditReject',\n      controller: 'lq.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json({\n      invalid: 'An error has occurred.'\n    });\n  })\n  // {inventories: [\"5943fa2c9d19ae2e9499c45c\"], verifiedBalance: 100}\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}