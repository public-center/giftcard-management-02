{"version":3,"sources":["api/lq/index.js"],"names":["express","require","auth","controller","router","Router","post","hasRole","createAccount","isAuthenticated","createSubAccount","authenticateLq","get","getRetailers","getRetailer","getCardStatus","lqNewCard","newTransaction","patch","reconcile","proceedWithSale","bi","biCompleted","getCompanyReserve","getCompanySettings","updateCompanySettings","newCustomer","updateCustomer","getStoreCustomers","searchCustomers","getCustomer","delete","deleteCustomer","getStores","createStore","updateStore","getStore","deleteStore","getEmployees","createEmployee","getEmployee","updateEmployee","deleteEmployee","resetTransactions","isStaging","mockCreditReject","module","exports"],"mappings":"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","file":"api/lq/index.js","sourcesContent":["'use strict';\n\nconst express = require('express');\nconst auth = require('../auth/auth.service');\nconst controller = require('./lq.controller');\nimport environment from '../../config/environment';\nimport validation from './validationRules';\nimport {checkStructuredValidation} from '../../helpers/validation';\n\nconst router = express.Router();\n\n/**\n * LQ authentication\n * @done\n */\nrouter.post('/account/create', auth.hasRole('admin'), controller.createAccount);\nrouter.post('/account/create/user', auth.isAuthenticated(), controller.createSubAccount);\nrouter.post('/login', controller.authenticateLq);\n/**\n * Retailers\n * @done\n */\nrouter.get('/retailers', auth.isAuthenticated(), controller.getRetailers);\nrouter.get('/retailers/:retailer', auth.isAuthenticated(true), controller.getRetailer);\n/**\n * Get card status\n */\n// @todo\nrouter.get('/status/:cardId', auth.isAuthenticated(), controller.getCardStatus);\n// Get status of all cards, sorted by date\nrouter.get('/status', auth.isAuthenticated(), controller.getCardStatus);\n// Get status of all cards after date\nrouter.get('/status/begin/:begin/end/:end', auth.isAuthenticated(), controller.getCardStatus);\nrouter.get('/status/begin/:begin', auth.isAuthenticated(), controller.getCardStatus);\nrouter.get('/status/end/:end', auth.isAuthenticated(), controller.getCardStatus);\n/**\n * Sell\n * @todo\n */\n// New card\nrouter.post('/new', auth.isAuthenticated(true, validation), controller.lqNewCard);\n// New transaction\nrouter.post('/transactions', auth.isAuthenticated(true, validation), controller.newTransaction);\n// Reconcile\nrouter.patch('/reconcile', auth.isAuthenticated(), controller.reconcile);\n// Proceed with sale\nrouter.patch('/companies/:companyId/card/:cardId/proceed-with-sale', auth.hasRole('manager'), controller.proceedWithSale);\n/**\n * BI\n * @todo\n */\n// Balance inquiry\nrouter.post('/bi', auth.isAuthenticated(), controller.bi);\n// BI completed\nrouter.post('/bi/:requestId', checkStructuredValidation(validation), controller.biCompleted);\n/**\n * Company\n * @done\n */\nrouter.get('/companies/:companyId/reserve', auth.hasRole('corporate-admin'), controller.getCompanyReserve);\nrouter.get('/companies/:companyId/settings', auth.hasRole('corporate-admin'), controller.getCompanySettings);\nrouter.patch('/companies/:companyId/settings', auth.hasRole('corporate-admin'), controller.updateCompanySettings);\n/**\n * Customer management\n * @done\n */\nrouter.post('/stores/:storeId/customers', auth.hasRole('manager'), controller.newCustomer);\nrouter.patch('/stores/:storeId/customers/:customerId', auth.hasRole('manager'), controller.updateCustomer);\nrouter.get('/stores/:storeId/customers', auth.isAuthenticated(), controller.getStoreCustomers);\nrouter.get('/stores/:storeId/customers/search/:customerName', auth.isAuthenticated(), controller.searchCustomers);\nrouter.get('/stores/:storeId/customers/:customerId', auth.isAuthenticated(), controller.getCustomer);\nrouter.delete('/stores/:storeId/customers/:customerId', auth.hasRole('manager'), controller.deleteCustomer);\n/**\n * Store management\n * @done\n */\nrouter.get('/stores', auth.hasRole('corporate-admin'), controller.getStores);\nrouter.post('/stores', auth.hasRole('corporate-admin'), controller.createStore);\nrouter.patch('/stores/:storeId', auth.hasRole('corporate-admin'), controller.updateStore);\nrouter.get('/stores/:storeId', auth.hasRole('corporate-admin'), controller.getStore);\nrouter.delete('/stores/:storeId', auth.hasRole('corporate-admin'), controller.deleteStore);\n/**\n * Employee management\n * @done\n */\nrouter.get('/stores/:storeId/employees', auth.hasRole('manager'), controller.getEmployees);\nrouter.post('/stores/:storeId/employees', auth.hasRole('manager'), controller.createEmployee);\nrouter.get('/stores/:storeId/employees/:employeeId', auth.hasRole('manager'), controller.getEmployee);\nrouter.patch('/stores/:storeId/employees/:employeeId', auth.hasRole('manager'), controller.updateEmployee);\nrouter.delete('/stores/:storeId/employees/:employeeId', auth.hasRole('manager'), controller.deleteEmployee);\n\n// Reset\nrouter.post('/reset/transactions', auth.hasRole('admin'), controller.resetTransactions);\n\n// Mock credit/reject\nif (environment.isStaging) {\n  router.post('/mock/reject', auth.hasRole('employee'), controller.mockCreditReject);\n}\n\nmodule.exports = router;\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}