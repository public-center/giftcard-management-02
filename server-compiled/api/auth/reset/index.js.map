{"version":3,"sources":["api/auth/reset/index.js"],"names":["express","require","mongoose","router","Router","post","req","res","body","id","token","password","confirm","Types","ObjectId","isValid","status","json","error","findById","then","resetPasswordToken","compareToken","match","user","save","remove","catch","Promise","reject","err","create","method","controller","revision","stack","_id","console","log","module","exports"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,SAASH,QAAQI,MAAR,EAAf;;AAEAD,OAAOE,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBACUD,IAAIE,IADd;AAAA,MACtBC,EADsB,aACtBA,EADsB;AAAA,MAClBC,KADkB,aAClBA,KADkB;AAAA,MACXC,QADW,aACXA,QADW;AAAA,MACDC,OADC,aACDA,OADC;;;AAG7B,MAAI,CAACV,SAASW,KAAT,CAAeC,QAAf,CAAwBC,OAAxB,CAAgCN,EAAhC,CAAL,EAA0C;AACxC,WAAOF,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,OAAO,aAAR,EAArB,CAAP;AACD;;AAED,MAAI,CAACR,KAAL,EAAY;AACV,WAAOH,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,OAAO,gBAAR,EAArB,CAAP;AACD;;AAED,MAAIP,aAAaC,OAAjB,EAA0B;AACxB,WAAOL,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,OAAO,uCAAR,EAArB,CAAP;AACD;;AAED,+BAAmBC,QAAnB,CAA4BV,EAA5B,EACGW,IADH,CACQ,8BAAsB;AAC1B,QAAI,CAACC,kBAAL,EAAyB;AACvB,YAAM,UAAN;AACD;;AAED,WAAOA,mBAAmBC,YAAnB,CAAgCZ,KAAhC,EAAuCU,IAAvC,CAA4C,iBAAS;AAC1D,UAAIG,KAAJ,EAAW;AACT,uBAAKJ,QAAL,CAAcE,mBAAmBG,IAAjC,EAAuCJ,IAAvC,CAA4C,gBAAQ;AAClDI,eAAKb,QAAL,GAAgBA,QAAhB;AACAa,eAAKC,IAAL;;AAEAJ,6BAAmBK,MAAnB;;AAEA,iBAAOnB,IAAIU,IAAJ,EAAP;AACD,SAPD;AAQD,OATD,MASO;AACL,cAAM,cAAN;AACD;AACF,KAbM,EAcJU,KAdI,CAcE,eAAO;AACZ,aAAOC,QAAQC,MAAR,CAAeC,GAAf,CAAP;AACD,KAhBI,CAAP;AAiBD,GAvBH,EAwBGH,KAxBH;AAAA,uEAwBS,iBAAMG,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA,oBACDA,QAAQ,UADP;AAAA;AAAA;AAAA;;AAAA,+CAEIvB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,OAAO,kBAAR,EAArB,CAFJ;;AAAA;AAAA,oBAKDY,QAAQ,cALP;AAAA;AAAA;AAAA;;AAAA,+CAMIvB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,OAAO,gBAAR,EAArB,CANJ;;AAAA;AAAA;AAAA,qBASC,mBAASa,MAAT,CAAgB;AACpBC,wBAAQ,oBADY;AAEpBC,4BAAY,YAFQ;AAGpBC,0BAAU,wBAHU;AAIpBC,uBAAOL,IAAIK,KAJS;AAKpBjB,uBAAOY,GALa;AAMpBN,sBAAMlB,IAAIkB,IAAJ,CAASY;AANK,eAAhB,CATD;;AAAA;;AAkBLC,sBAAQC,GAAR,CAAY,+DAAZ;AACAD,sBAAQC,GAAR,CAAYR,GAAZ;;AAnBK,+CAqBEvB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,OAAO,uBAAR,EAArB,CArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxBT;;AAAA;AAAA;AAAA;AAAA;AA+CD,CA9DD;;AAgEAqB,OAAOC,OAAP,GAAiBrC,MAAjB","file":"api/auth/reset/index.js","sourcesContent":["'use strict';\n\nimport User from '../../user/user.model';\nimport ResetPasswordToken from '../../user/resetPasswordToken.model';\nimport ErrorLog from '../../errorLog/errorLog.model';\nimport {getGitRev} from '../../../helpers/errors';\n\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst router = express.Router();\n\nrouter.post('/', (req, res) => {\n  const {id, token, password, confirm} = req.body;\n\n  if (!mongoose.Types.ObjectId.isValid(id)) {\n    return res.status(400).json({error: 'Invalid ID.'});\n  }\n\n  if (!token) {\n    return res.status(400).json({error: 'Missing token.'});\n  }\n\n  if (password !== confirm) {\n    return res.status(400).json({error: 'Password confirmation does not match.'});\n  }\n\n  ResetPasswordToken.findById(id)\n    .then(resetPasswordToken => {\n      if (!resetPasswordToken) {\n        throw 'notFound';\n      }\n\n      return resetPasswordToken.compareToken(token).then(match => {\n        if (match) {\n          User.findById(resetPasswordToken.user).then(user => {\n            user.password = password;\n            user.save();\n\n            resetPasswordToken.remove();\n\n            return res.json();\n          });\n        } else {\n          throw 'invalidToken';\n        }\n      })\n        .catch(err => {\n          return Promise.reject(err);\n        });\n    })\n    .catch(async err => {\n      if (err === 'notFound') {\n        return res.status(400).json({error: 'Token not found.'});\n      }\n\n      if (err === 'invalidToken') {\n        return res.status(400).json({error: 'Invalid token.'});\n      }\n\n      await ErrorLog.create({\n        method: 'ResetPasswordToken',\n        controller: 'auth.reset',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id,\n      });\n\n      console.log('*******************ERROR IN RESET PASSWORD*******************');\n      console.log(err);\n\n      return res.status(500).json({error: 'Something went wrong.'});\n    });\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}