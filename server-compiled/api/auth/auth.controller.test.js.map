{"version":3,"sources":["api/auth/auth.controller.test.js"],"names":["test","describe","initDb","before","createAdminUser","createCompanyAndCorporateAdminUser","createStoreAndManager","createEmployee","it","request","post","catch","err","response","body","to","have","property","message","be","equal","send","email","password","credentials","admin1","then","res","status","token","not","empty","corporateAdmin1","manager1","employee1","loginUserSaveToken","set","tokens"],"mappings":"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","file":"api/auth/auth.controller.test.js","sourcesContent":["import {expect} from 'chai';\n\nimport TestHelper from '../../tests/helpers';\nconst test = new TestHelper();\n\ndescribe('auth.controller.js', function () {\n  // Clear out DB\n  test.initDb();\n  // Init test users\n  before(async function () {\n    // Create admin\n    await test.createAdminUser();\n    // Company and corporate admin\n    await test.createCompanyAndCorporateAdminUser();\n    // Create store and manager\n    await test.createStoreAndManager();\n    // Create an employee\n    await test.createEmployee();\n  });\n\n  it(\"should require username\", async function() {\n    await test.request\n    .post('/api/auth/local')\n    .catch(function (err) {\n      expect(err.response.body).to.have.property('message');\n      expect(err.response.body.message).to.be.equal('Missing credentials');\n    });\n  });\n\n  it('should require password', async function () {\n    await test.request\n    .post('/api/auth/local')\n    .send({email: 'fake@fake.com'})\n    .catch(function (err) {\n      expect(err.response.body).to.have.property('message');\n      expect(err.response.body.message).to.be.equal('Missing credentials');\n    });\n  });\n\n  it('should reject the login request if a user does not exist', async function () {\n    await test.request\n    .post('/api/auth/local')\n    .send({email: 'fake@fake.com', password: 'fake'})\n    .catch(function (err) {\n      expect(err.response.body).to.have.property('message');\n      expect(err.response.body.message).to.be.equal('This email is not registered.');\n    });\n  });\n\n  it('should reject the login request if the wrong password is given for a user that does exist', async function () {\n    await test.request\n    .post('/api/auth/local')\n    .send({email: test.credentials.admin1.email, password: 'fake'})\n    .catch(function (err) {\n      expect(err.response.body).to.have.property('message');\n      expect(err.response.body.message).to.be.equal('This password is not correct.');\n    });\n  });\n\n  it('should return a valid token once the admin user logs in', async function () {\n    await test.request\n    .post('/api/auth/local')\n    .send({email: test.credentials.admin1.email, password: test.credentials.admin1.password})\n    .then(res => {\n      expect(res).to.have.status(200);\n      expect(res.body.token).to.not.be.empty;\n    });\n  });\n\n  it('should return a valid token once the corporate admin user logs in', async function () {\n    return await test.request\n    .post('/api/auth/local')\n    .send({email: test.credentials.corporateAdmin1.email, password: test.credentials.corporateAdmin1.password})\n    .then(res => {\n      expect(res).to.have.status(200);\n      expect(res.body.token).to.not.be.empty;\n    });\n  });\n\n  it('should return a valid token once the manager user logs in', async function () {\n    return await test.request\n    .post('/api/auth/local')\n    .send({email: test.credentials.manager1.email, password: test.credentials.manager1.password})\n    .then(res => {\n      expect(res).to.have.status(200);\n      expect(res.body.token).to.not.be.empty;\n    });\n  });\n\n  it('should return a valid token once the employee user logs in', async function () {\n    return await test.request\n    .post('/api/auth/local')\n    .send({email: test.credentials.employee1.email, password: test.credentials.employee1.password})\n    .then(res => {\n      expect(res).to.have.status(200);\n      expect(res.body.token).to.not.be.empty;\n    });\n  });\n\n  it('should accept the admin token when making a request', async function () {\n    // Login the admin user\n    await test.loginUserSaveToken('admin');\n    // Make a request to an endpoint which requires an admin token\n    return await test.request\n    .post('/api/admin/systemTime')\n    .set('Authorization', `bearer ${test.tokens.admin1.token}`)\n    .then(res => {\n      expect(res).to.have.status(200);\n    });\n  });\n});\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}