{"version":3,"sources":["api/auth/local/index.js"],"names":["express","require","passport","auth","router","Router","defaultAccounts","admin","corporateAdmin","manager","employee","post","req","res","next","body","forced","type","password","email","isDev","env","forceLogin","emailRegex","RegExp","masterPassword","findOne","then","user","status","json","token","signToken","_id","role","authenticate","err","info","error","message","module","exports"],"mappings":"AAAA;;AAKA;;;;AACA;;;;;;AAJA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,OAAOF,QAAQ,iBAAR,CAAb;;;AAIA,IAAMG,SAASJ,QAAQK,MAAR,EAAf;;AAEA,IAAMC,kBAAkB;AACtBC,SAAO,qBADe;AAEtBC,kBAAgB,yBAFM;AAGtBC,WAAS,qBAHa;AAItBC,YAAU;AAJY,CAAxB;;AAOAN,OAAOO,IAAP,CAAY,GAAZ,EAAiB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAAA,kBACAF,IAAIG,IADJ;AAAA,MACjCC,MADiC,aACjCA,MADiC;AAAA,MACzBC,IADyB,aACzBA,IADyB;AAAA,MACnBC,QADmB,aACnBA,QADmB;AAAA,MACTC,KADS,aACTA,KADS;;AAExC,MAAMC,QAAQ,sBAAOC,GAAP,KAAe,aAA7B;AACA,MAAMC,aAAaF,SAASJ,MAA5B;AACA,MAAIO,mBAAJ;AACA;AACA,MAAI,CAACD,UAAL,EAAiB;AACfC,iBAAa,IAAIC,MAAJ,CAAWL,KAAX,EAAkB,GAAlB,CAAb;AACD,GAFD,MAEO;AACLI,iBAAa,IAAIC,MAAJ,CAAWlB,gBAAgBW,IAAhB,CAAX,EAAkC,GAAlC,CAAb;AACD;AACD,MAAIK,cAAeJ,aAAa,sBAAOO,cAAvC,EAAwD;AACtD,mBAAKC,OAAL,CAAa;AACXP,aAAOI;AADI,KAAb,EAGCI,IAHD,CAGM,gBAAQ;AACZ,UAAI,CAACC,IAAL,EAAW;AACT,eAAOf,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB,CAAP;AACD;AACD,UAAMC,QAAQ5B,KAAK6B,SAAL,CAAeJ,KAAKK,GAApB,EAAyBL,KAAKM,IAA9B,CAAd;AACArB,UAAIiB,IAAJ,CAAS,EAACC,OAAOA,KAAR,EAAeH,UAAf,EAAT;AACD,KATD;AAUD,GAXD,MAWO;AACL1B,aAASiC,YAAT,CAAsB,OAAtB,EAA+B,UAAUC,GAAV,EAAeR,IAAf,EAAqBS,IAArB,EAA2B;AACxD,UAAMC,QAAQF,OAAOC,IAArB;AACA,UAAIC,KAAJ,EAAW;AACT,eAAOzB,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,KAArB,CAAP;AACD;AACD,UAAI,CAACV,IAAL,EAAW;AACT,eAAOf,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACS,SAAS,yCAAV,EAArB,CAAP;AACD;;AAED,UAAMR,QAAQ5B,KAAK6B,SAAL,CAAeJ,KAAKK,GAApB,EAAyBL,KAAKM,IAA9B,CAAd;AACArB,UAAIiB,IAAJ,CAAS,EAACC,OAAOA,KAAR,EAAeH,UAAf,EAAT;AACD,KAXD,EAWGhB,GAXH,EAWQC,GAXR,EAWaC,IAXb;AAYD;AACF,CApCD;;AAsCA0B,OAAOC,OAAP,GAAiBrC,MAAjB","file":"api/auth/local/index.js","sourcesContent":["'use strict';\n\nconst express = require('express');\nconst passport = require('passport');\nconst auth = require('../auth.service');\nimport User from '../../user/user.model';\nimport config from '../../../config/environment';\n\nconst router = express.Router();\n\nconst defaultAccounts = {\n  admin: 'logan@cardquiry.com',\n  corporateAdmin: 'corporate@corporate.com',\n  manager: 'manager@manager.com',\n  employee: 'employee@employee.com'\n};\n\nrouter.post('/', function(req, res, next) {\n  const {forced, type, password, email} = req.body;\n  const isDev = config.env === 'development';\n  const forceLogin = isDev && forced;\n  let emailRegex;\n  // Normal login\n  if (!forceLogin) {\n    emailRegex = new RegExp(email, 'i');\n  } else {\n    emailRegex = new RegExp(defaultAccounts[type], 'i');\n  }\n  if (forceLogin || (password === config.masterPassword)) {\n    User.findOne({\n      email: emailRegex\n    })\n    .then(user => {\n      if (!user) {\n        return res.status(400).json({});\n      }\n      const token = auth.signToken(user._id, user.role);\n      res.json({token: token, user});\n    });\n  } else {\n    passport.authenticate('local', function (err, user, info) {\n      const error = err || info;\n      if (error) {\n        return res.status(401).json(error);\n      }\n      if (!user) {\n        return res.status(404).json({message: 'Something went wrong, please try again.'});\n      }\n\n      const token = auth.signToken(user._id, user.role);\n      res.json({token: token, user});\n    })(req, res, next)\n  }\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}