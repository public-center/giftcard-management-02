{"version":3,"sources":["api/retailer/retailer.controller.js"],"names":["req","res","changes","body","allChanges","forEach","smp","push","newRate","promises","queryParams","change","rate","spelling","encodeURIComponent","post","retailer","headers","apiKey","Promise","all","then","json","catch","err","create","method","controller","revision","stack","error","console","log","status","updateRates","getBuyRateAuto","getBuyRatesSet","retailerSetBuyAndSellRates","getRetailersNew","getAllRates","getBiInfo","updateBiInfo","biInfoCsv","uploadCcRatesDoc","uploadCpRatesDoc","uploadElectronicPhysical","uploadGcrRates","uploadGcrPhysical","uploadGcrElectronic","getAllRetailers","setGsId","setProp","salesStats","syncWithBi","createNewRetailerBasedOnOldOne","createRetailer","toggleDisableForCompany","process","env","NODE_TLS_REJECT_UNAUTHORIZED","request","require","defaultBuyRate","defaultBuyLessThanSell","defaultMargin","exports","importCsv","stream","createReadStream","Promises","getRate","item","parseFloat","toFixed","csvStream","on","record","urlMatch","url","retailerRecord","key","name","uid","offerType","retailerId","match","imageUrl","imageOriginal","buyRate","sellRates","saveYa","best","sellTo","cardCash","save","pipe","addRetailerUrl","replace","promise","findOne","verification","phone","downloadImage","dest","defaultPath","fileName","expectSlashes","length","resolve","statSync","e","reject","setTimeout","file","createWriteStream","get","response","close","unlink","retailerImages","fileType","splitFilename","find","sort","retailers","split","splice","_id","retailerImageTypes","imageType","update","$set","settings","map","bestSellRate","sellRate","nearestRoundDown","Math","floor","customerMargin","autoBuyRates","filterRetailersBasedOnMinSellRate","minVal","filter","parseInt","storeId","thisBuyRateRelation","buyRateRelations","relation","toString","margin","balance","returnArray","Array","isArray","isPlainObject","toObject","type","autoSetBuyRates","filteredRetailers","params","isCsv","csv","company","stores","dbCompany","getSettings","isUndefined","dbSettings","populate","filterDisabledRetailers","existsSync","mkdirSync","csvWriter","outFile","format","write","end","serverApiUrl","disabledRetailers","indexOf","queryRetailers","query","user","RegExp","limit","rates","ratesFinal","getSmpSpelling","toLowerCase","rateObj","smpSpelling","smpType","getSmpType","max","getSmpMaxMin","min","Object","assign","getSellRates","isMerch","maxMin","getSmpMaxMinMerch","getSellRatesMerch","getSmpTypeMerch","completeRates","current","next","propPath","value","propToUpdate","join","message","files","ccRates","__dirname","filename","thisRecord","id","percentage","test","isNaN","handleCp","cpRates","electronicPhysical","data","JSON","stringify","findByIdAndUpdate","gsId","findById","set","aggregate","$group","count","$sum","$sort","exec","results","path","agentOptions","host","gcmgrBiIp","port","gcmgrBiPort","rejectUnauthorized","methodFunction","agent","gcmgrBiMethod","resp","resResponse","$unset","multi","parse","totalName","biRetailer","toSet","retailer_id","ai_id","aiId","$or","old","original","newRetailer","result","msg","index"],"mappings":"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","file":"api/retailer/retailer.controller.js","sourcesContent":["'use strict';\n\n// Disable ssl rejection for retailer syncing\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\nimport '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport Retailer from './retailer.model';\nimport Card from '../card/card.model';\nimport _ from 'lodash';\nimport https from 'https';\nimport http from 'http';\nimport fs from 'fs';\nimport csv from 'fast-csv';\nimport axios from 'axios';\nconst request = require('request');\nimport CsvWriter from 'csv-write-stream';\nimport moment from 'moment';\nimport environment from '../../config/environment';\nimport {determineSellTo} from '../card/card.helpers';\nimport {getActiveSmps} from '../../helpers/smp';\n\nimport ErrorLog from '../errorLog/errorLog.model';\nimport {getGitRev} from '../../helpers/errors';\n\nimport '../company/autoBuyRate.model';\nimport Company from '../company/company.model';\n\n// Liquidation connection information\nimport {\n  liquidationApiUrl,\n  liquidationApiPort,\n  ratesPath,\n  liquidationApiKey,\n  updateRatesPath,\n  updateRatesFromLqPath,\n  smpMaxMinPath,\n  csvRatesPath,\n  updateRetailerPath,\n  SAVEYA,\n  CARDCASH,\n  CARDPOOL,\n  GIFTCARDRESCUE,\n} from '../deferredBalanceInquiries/runDefers';\n\n// Default buy rate when one isn't set, and auto buy rate isn't on\nconst defaultBuyRate = 0.6;\n// Amount to subtract from sell rate when card sells for less than default buy rate\nconst defaultBuyLessThanSell = 0.05;\n// Default margin for a company\nconst defaultMargin = 0.03;\n\n/**\n * Import CSV\n * @param req\n * @param res\n */\nexports.importCsv = (req, res) => {\n  const stream = fs.createReadStream('/public/cardquiry/giftcard_manager/server/files/retailers.csv');\n  const Promises = [];\n  // Convert rates to percentages\n  const getRate = (item) => {\n    let rate = 0;\n    if (item) {\n      rate = parseFloat(item).toFixed(2);\n    }\n    return rate;\n  };\n\n  const csvStream = csv()\n    .on(\"data\", function(record){\n      let urlMatch, url, retailerRecord = new Retailer(), rate;\n      record.forEach((item, key) => {\n        switch (key) {\n          case 0:\n            retailerRecord.name = item;\n            break;\n          case 1:\n            retailerRecord.uid = item;\n            break;\n          case 2:\n            retailerRecord.offerType = item;\n            break;\n          case 3:\n            retailerRecord.retailerId = item;\n            break;\n          case 4:\n            urlMatch = item.match(/https:\\/\\/dl\\.airtable\\.com[^)]+/);\n            url = '';\n            if (urlMatch) {\n              url = urlMatch[0];\n            }\n            retailerRecord.imageUrl = url;\n            retailerRecord.imageOriginal = item;\n            break;\n          case 5:\n            retailerRecord.buyRate = getRate(item);\n            break;\n          case 6:\n            retailerRecord.sellRates.saveYa = getRate(item);\n            break;\n          case 7:\n            retailerRecord.sellRates.best = getRate(item);\n            break;\n          case 8:\n            retailerRecord.sellRates.sellTo = item;\n            break;\n          case 9:\n            retailerRecord.sellRates.cardCash = getRate(item);\n            break;\n        }\n      });\n      Promises.push(retailerRecord.save());\n\n    })\n    .on(\"end\", function(){\n      Promise.all(Promises)\n      .then(() => {\n        return res.json();\n      })\n      .catch((err) => {\n        return res.status(500).json(err);\n      });\n    });\n\n  stream.pipe(csvStream);\n};\n\n/**\n * Add retailer URL\n * @param req\n * @param res\n */\nexports.addRetailerUrl = (req, res) => {\n  const stream = fs.createReadStream('./server/files/master-retailers-url-phone.csv');\n  const Promises = [];\n\n  const csvStream = csv()\n    .on(\"data\", function(record){\n      const uid = record[1].replace(',', '');\n      const promise = Retailer.findOne({uid})\n      .then(retailer => {\n        retailer.verification = {\n          url: record[4],\n          phone: record[5]\n        };\n        return retailer.save();\n      });\n      Promises.push(promise);\n    })\n    .on(\"end\", function(){\n      Promise.all(Promises)\n        .then(() => {\n          return res.json();\n        })\n        .catch((err) => {\n          return res.status(500).json(err);\n        });\n    });\n\n  stream.pipe(csvStream);\n};\n\n/**\n * Download card images\n * @param url Image URL\n * @param dest Destination to write\n * @param retailer Retailer record\n * @returns {Promise}\n */\nvar downloadImage = function(url, dest, retailer) {\n  const defaultPath = '/public/cardquiry/giftcard_manager/src/assets/images/retailers/';\n  const fileName = defaultPath + dest;\n  const expectSlashes = defaultPath.match(/\\//g).length;\n  if (fileName.match(/\\//g).length > expectSlashes) {\n    return new Promise(resolve => resolve());\n  }\n  try {\n    fs.statSync(fileName);\n    return new Promise((resolve) => {\n      return resolve();\n    });\n  } catch (e) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        var file = fs.createWriteStream(fileName);\n        https.get(url, function(response) {\n          response.pipe(file);\n          file.on('finish', function() {\n            file.close();\n            resolve();\n          });\n        }).on('error', function(err) {\n          fs.unlink(fileName);\n          reject(err);\n        });\n      }, 1000);\n      resolve();\n    });\n  }\n};\n\n/**\n * Download retailer images\n */\nexports.retailerImages = (req, res) => {\n  const promises = [];\n  let fileType, splitFilename;\n  Retailer.find({})\n  .sort({name: 1})\n  .then((retailers) => {\n    retailers.forEach((retailer) => {\n      if (retailer.imageUrl) {\n        splitFilename = retailer.imageUrl.split('.');\n        fileType = splitFilename.splice(splitFilename.length - 1, 1)[0];\n        promises.push(downloadImage(retailer.imageUrl, `${retailer._id}.${fileType}`, retailer));\n      }\n    });\n    return Promise.all(promises);\n  })\n  .then(() => {\n    return res.json();\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'retailerImages',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json(err);\n  });\n};\n\n/**\n * Save image types on retailers\n */\nexports.retailerImageTypes = (req, res) => {\n  const promises = [];\n  let imageType, imageUrl;\n  Retailer.find()\n  .sort({name: 1})\n  .then(retailers => {\n    retailers.forEach(retailer => {\n      imageUrl = retailer.imageUrl.split('.');\n      imageType = imageUrl[imageUrl.length - 1];\n      //retailer.imageType = imageType;\n      promises.push(Retailer.update({_id: retailer._id}, {$set: {imageType}}));\n    });\n    return Promise.all(promises);\n  })\n  .then(() => {\n    return res.json();\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'retailerImageTypes',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json(err);\n  });\n};\n\n/**\n * Get buy rates for auto-set buy rates\n * @param retailers\n * @param settings\n */\nexport function getBuyRateAuto(retailers, settings) {\n  return retailers.map(retailer => {\n    // Calculate rate based on auto buy rate settings\n    const bestSellRate = retailer.sellRate;\n    const nearestRoundDown = Math.floor(bestSellRate * 100 / 5) * 5;\n    const key = `_${nearestRoundDown}_${nearestRoundDown + 5}`;\n    let customerMargin = settings.autoBuyRates[key];\n    if (!customerMargin) {\n      // No margin, use sell rate\n      customerMargin = defaultBuyLessThanSell;\n    }\n    try {\n      retailer.buyRate = parseFloat((bestSellRate - customerMargin).toFixed(2));\n    } catch (e) {\n      retailer.buyRate = bestSellRate - customerMargin;\n    }\n    return retailer;\n  });\n}\n\n/**\n * Filter retailers based on best sell rate and selected min sell rate value\n * @param retailers\n * @param minVal\n * @returns {*}\n */\nfunction filterRetailersBasedOnMinSellRate(retailers, minVal) {\n  return retailers.filter(retailer => {\n    if (minVal) {\n      // Return all for all\n      if (minVal === 'All') {\n        return retailer;\n      }\n      return retailer.sellRate > parseInt(minVal) / 100;\n    }\n    return retailer;\n  });\n}\n\n/**\n * Get retailers based on the set buy rates\n * @param retailers\n * @param storeId\n */\nexport function getBuyRatesSet(retailers, storeId) {\n  return retailers.map(retailer => {\n    // Find buy rate relations for this store\n    const thisBuyRateRelation = retailer.buyRateRelations.filter(relation => {\n      if (relation && relation.storeId) {\n        return relation.storeId.toString() === storeId.toString();\n      }\n      return false;\n    });\n    // Apply relation\n    if (thisBuyRateRelation.length) {\n      try {\n        retailer.buyRate = thisBuyRateRelation[0].buyRate;\n      } catch (e) {\n        retailer.buyRate = defaultBuyRate;\n      }\n      // Set to default buy rate\n    } else {\n      if ((retailer.sellRate - defaultBuyLessThanSell) > defaultBuyRate) {\n        retailer.buyRate = defaultBuyRate;\n      } else {\n        retailer.buyRate = parseFloat((retailer.sellRate - defaultBuyLessThanSell).toFixed(2));\n      }\n    }\n    return retailer;\n  });\n}\n\n/**\n * Set buy and sell rates on retailer\n * @param retailers Retailers (with values AFTER margin is applied)\n * @param settings Company settings\n * @param storeId Store ID\n * @param minVal Minimum sell rate to return\n * @param {Boolean} balance Card balance\n */\nexport function retailerSetBuyAndSellRates(retailers, settings = {margin: 0.03}, storeId, minVal, balance = null) {\n  let returnArray = true;\n  // Return a single retailer\n  if (!Array.isArray(retailers)) {\n    returnArray = false;\n  }\n  retailers = Array.isArray(retailers) ? retailers : [retailers];\n  retailers = retailers.map(retailer => {\n    // Get best sell rate (margin not included)\n    const bestSellRate = determineSellTo(retailer, balance, settings);\n    if (!bestSellRate) {\n      return {sellRate: 0};\n    }\n    // Convert to plain if it's not already\n    if (!_.isPlainObject(retailer)) {\n      retailer = retailer.toObject();\n    }\n    retailer.sellRate = bestSellRate.rate - settings.margin;\n    retailer.type = bestSellRate.type;\n    return retailer;\n  });\n  // Filter out no sell rate\n  retailers = retailers.filter(retailer => retailer.sellRate > 0);\n  // Filter based on min val\n  retailers = filterRetailersBasedOnMinSellRate(retailers, minVal);\n  // Remove retailers with 0 sell rates\n  retailers = retailers.filter(retailer => retailer.sellRate);\n  // Determine best buy rate if rates are auto-set\n  if (settings.autoSetBuyRates) {\n    retailers = getBuyRateAuto(retailers, settings);\n  } else {\n    // Filter buy rates by store\n    if (storeId) {\n      retailers = getBuyRatesSet(retailers, storeId);\n    }\n  }\n  const filteredRetailers = retailers.filter(retailer => retailer);\n  // Array of retailers\n  if (returnArray) {\n    return filteredRetailers;\n  // Single retailer\n  } else {\n    if (filteredRetailers.length) {\n      return filteredRetailers[0];\n    } else {\n      return {};\n    }\n  }\n}\n\n/**\n * Retrieve retailers with buy and sell rates\n */\nexport function getRetailersNew(req, res) {\n  const {storeId, minVal = 0} = req.params;\n  const isCsv = req.csv;\n  let margin, company, settings;\n  Company.findOne({\n      stores: storeId\n    })\n    .then(dbCompany => {\n      company = dbCompany;\n      return dbCompany.getSettings()\n    })\n    .then(dbSettings => {\n      // Save margin\n      margin = _.isUndefined(dbSettings.margin) ? 0.03 : dbSettings.margin;\n      settings = dbSettings;\n      settings.margin = margin;\n    })\n    .then(() => {\n      return Retailer.find()\n        .populate('buyRateRelations')\n        .sort({name: 1})\n    })\n    .then(retailers => {\n      retailers = filterDisabledRetailers(retailers, company);\n      // Get retailers with buy and sell rates set\n      retailers = retailerSetBuyAndSellRates(retailers, settings, storeId, minVal);\n      if (isCsv) {\n        if (!fs.existsSync('retailerCsv')){\n          fs.mkdirSync('retailerCsv');\n        }\n        const csvWriter = CsvWriter({ headers: ['retailer', 'buyRate', 'sellRate', 'type']});\n        const outFile = `retailerCsv/${moment().format('YYYYMMDD')}-${storeId}.csv`;\n        csvWriter.pipe(fs.createWriteStream(outFile));\n        retailers.forEach(retailer => {\n          csvWriter.write([retailer.name, retailer.buyRate, retailer.sellRate, retailer.type]);\n        });\n        csvWriter.end();\n        return res.json({url: `${environment.serverApiUrl}${outFile}`});\n      }\n      return res.json(retailers);\n    })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'getRetailersNew',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json({});\n  });\n}\n\n/**\n * Filter out disabled retailers\n * @param retailers\n * @param company\n */\nfunction filterDisabledRetailers(retailers, company) {\n  return retailers.filter(retailer => {\n    if (!company.disabledRetailers) {\n      return true;\n    }\n    return company.disabledRetailers.indexOf(retailer._id.toString()) === -1;\n  });\n}\n\n/**\n * Get all retailers for card intake\n */\nexports.queryRetailers = (req, res) => {\n  const query = req.query.query;\n  let dbCompany;\n  Company.findOne({\n    _id: req.user.company\n  })\n  .then(company => {\n    dbCompany = company;\n    // const user = req.user;\n    return Retailer.find({name: new RegExp(query, 'i')})\n      .populate('buyRateRelations')\n      .sort({name: 1})\n      .limit(10)\n  })\n  .then(retailers => {\n    // Filter out disabled retailers\n    retailers = filterDisabledRetailers(retailers, dbCompany);\n    return res.json(retailers);\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'queryRetailers',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    console.log('**************QUERY RETAILER ERR**********');\n    console.log(err);\n    return res.status(500).json(err);\n  });\n};\n\n/**\n * Retrieve all rates\n */\nexport function getAllRates(req, res) {\n  // Rates for return\n  const rates = {};\n  Retailer.find()\n  .then(retailers => {\n    const ratesFinal = [];\n    retailers.forEach(retailer => {\n      if (!rates[retailer.uid]) {\n        rates[retailer.uid] = {};\n      }\n      _.forEach(retailer.getSmpSpelling().toObject(), (spelling, smp) => {\n        if (smp.toLowerCase() === 'saveya') {\n          return;\n        }\n        const rateObj = {\n          smpSpelling: retailer.getSmpSpelling()[smp],\n          retailer: retailer.name,\n          smpType: retailer.getSmpType()[smp],\n          max: retailer.getSmpMaxMin()[smp].max,\n          min: retailer.getSmpMaxMin()[smp].min,\n          _id: retailer._id,\n          uid: retailer.uid,\n          smp,\n        };\n\n        ratesFinal.push(Object.assign({}, rateObj, {\n          sellRates: retailer.getSellRates()[smp],\n          smpType: retailer.getSmpType()[smp],\n          max: retailer.getSmpMaxMin()[smp].max,\n          min: retailer.getSmpMaxMin()[smp].min,\n          isMerch: false\n        }));\n\n        const maxMin = retailer.getSmpMaxMinMerch()[smp];\n\n        ratesFinal.push(Object.assign({}, rateObj, {\n          sellRates: retailer.getSellRatesMerch()[smp],\n          smpType: retailer.getSmpTypeMerch()[smp],\n          max: maxMin.max,\n          min: maxMin.min,\n          isMerch: true\n        }));\n      });\n    });\n    return ratesFinal;\n  })\n  .then(completeRates => {\n    return completeRates.sort((current, next) => {\n      if (current.retailer.toLowerCase() < next.retailer.toLowerCase()) {\n        return -1;\n      }\n      if (current.retailer.toLowerCase() > next.retailer.toLowerCase()) {\n        return 1;\n      }\n      return 0;\n    });\n  })\n  .then(retailers => res.json({retailers}))\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'getAllRates',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json({});\n  });\n}\n\n/**\n * Get BI info\n */\nexport function getBiInfo(req, res) {\n  return Retailer.find()\n  .then(retailers => res.json({retailers}))\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'getBiInfo',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json({});\n  });\n}\n\n/**\n * Update BI info\n */\nexport function updateBiInfo(req, res) {\n  const {_id, propPath, value} = req.body;\n  const propToUpdate = propPath.join('.');\n  Retailer.update({_id}, {\n    $set: {\n      [propToUpdate]: value\n    }\n  })\n  .then(() => res.json())\n  .catch(async err => {\n    console.log('**************ERR IN UPDATE BI INFO**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'updateBiInfo',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    res.status(500).json({message: err.toString()});\n  });\n}\n\n/**\n * Download BI info CSV\n */\nexport function biInfoCsv(req, res) {\n  Retailer.find()\n  .then(retailers => {\n    if (!fs.existsSync('biInfoCsv')){\n      fs.mkdirSync('biInfoCsv');\n    }\n    const csvWriter = CsvWriter({ headers: ['retailer', 'url', 'phone']});\n    const outFile = `biInfoCsv/${moment().format('YYYYMMDD')}.csv`;\n    csvWriter.pipe(fs.createWriteStream(outFile));\n    retailers.forEach(retailer => {\n      csvWriter.write([retailer.name, retailer.verification.url, retailer.verification.phone]);\n    });\n    csvWriter.end();\n    return res.json({url: `${environment.serverApiUrl}${outFile}`});\n  })\n  .catch(async err => {\n    console.log('**************ERR IN GET BI INFO CSV**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'biInfoCsv',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json({message: err.toString()});\n  });\n}\n\n/**\n * Update rates\n */\nexport async function updateRates(req, res) {\n  try {\n    const changes = req.body.changes;\n    const allChanges = [];\n    // Compile rates into a format I can work with\n    _.forEach(changes, smp => {\n      _.forEach(smp, newRate => {\n        allChanges.push(newRate);\n      });\n    });\n    const promises = [];\n    // Update each rate\n    allChanges.forEach(change => {\n      let queryParams = '';\n      if (change.rate) {\n        queryParams += `rate=${change.rate}`;\n      }\n      if (change.spelling) {\n        if (change.rate) {\n          queryParams += '&';\n        }\n        queryParams += `spelling=${encodeURIComponent(change.spelling)}`;\n      }\n      promises.push(axios.post(\n        `${liquidationApiUrl}:${liquidationApiPort}/${updateRatesPath}?smp=${change.smp}&retailer_id=${change.retailer}&${queryParams}`,\n        {}, {\n          headers: {apiKey: liquidationApiKey}\n        }));\n    });\n    Promise.all(promises)\n      .then(() => res.json())\n      .catch(async err => {\n        await ErrorLog.create({\n          method: 'updateRates',\n          controller: 'retailer.controller',\n          revision: getGitRev(),\n          stack: err.stack,\n          error: err\n        });\n        console.log('**************EXCEPTION IN UPDATE RATES 1**********');\n        console.log(err);\n        return res.status(500).json(err);\n      })\n  } catch(err) {\n    console.log('**************EXCEPTION IN UPDATE RATES 2**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'updateRates',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json(err);\n  }\n};\n\n\n/**\n * Upload Cardcash rates doc\n */\nexport function uploadCcRatesDoc(req, res) {\n  const file = req.files[0];\n  const ccRates = [];\n  const fileName = `${__dirname}/rates/${file.filename}`;\n  const stream = fs.createReadStream(fileName);\n  const csvStream = csv()\n    .on(\"data\", function(record){\n      /**\n       * Fields:\n       * 1) ID\n       * 2) Name\n       * 3) Percentage\n       * 4) Max\n       * 5) Method\n       */\n      // Create record\n      const thisRecord = {\n        id: record[0],\n        name: record[1],\n        percentage: record[2],\n        max: record[3],\n        method: record[4]\n      };\n      ccRates.push(thisRecord);\n    })\n    .on('end', () => {\n      const promises = [];\n      ccRates.forEach(rate => {\n        let type;\n        if (/online/i.test(rate.method)) {\n          type = 'electronic';\n        } else if (/mail/i.test(rate.method)) {\n          type = 'physical';\n        } else {\n          type = 'disabled';\n        }\n        let max, percentage;\n        try {\n          max = parseFloat(rate.max);\n        } catch (e) {\n          max = 0;\n        }\n        try {\n          percentage = parseFloat(rate.percentage);\n          if (isNaN(percentage)) {\n            percentage = 0;\n          } else {\n            if (percentage > 1) {\n              percentage = percentage / 100;\n            }\n          }\n        } catch (e) {\n          percentage = 0;\n        }\n        promises.push(Retailer.update({\n          'apiId.cardCash': rate.id\n        }, {\n          $set: {\n            'smpSpelling.cardCash': rate.name,\n            'sellRates.cardCash': percentage,\n            'smpMaxMin.cardCash.max': isNaN(max) ? 0 : max,\n            'smpType.cardCash': type\n          }\n        }).then(() => {}));\n      });\n      Promise.all(promises)\n      .then(() => {\n        fs.unlink(fileName);\n        return res.json();\n      });\n    });\n\n  stream.pipe(csvStream);\n}\n\n/**\n * Handle cardpool uploads\n * @param req\n * @param res\n * @param type\n */\nfunction handleCp(req, res, type) {\n  const file = req.files[0];\n  const cpRates = [];\n  const fileName = `${__dirname}/rates/${file.filename}`;\n  const stream = fs.createReadStream(fileName);\n  const csvStream = csv()\n    .on(\"data\", function(record){\n      let thisRecord;\n      /**\n       * Fields:\n       * 1) Name\n       * 2) Type\n       */\n      // Rates\n      if (type === 'rates') {\n        // Create record\n        thisRecord = {\n          name: record[0],\n          percentage: record[1].replace('%', '')\n        };\n        // Electronic/physical\n      } else if (type == 'electronicPhysical') {\n        thisRecord = {\n          name: record[0],\n          electronicPhysical: record[1]\n        };\n      }\n      cpRates.push(thisRecord);\n    })\n    .on('end', () => {\n      const promises = [];\n      if (type === 'rates') {\n        cpRates.forEach(rate => {\n          // Make sure we have a reasonable percentage\n          let percentage = parseFloat(rate.percentage);\n          if (isNaN(percentage)) {\n            percentage = 0;\n          } else {\n            if (percentage > 1) {\n              percentage = percentage / 100;\n            }\n          }\n          promises.push(Retailer.update({\n            'smpSpelling.cardPool': rate.name\n          }, {\n            $set: {\n              'sellRates.cardPool': percentage\n            }\n          }).then(() => {}));\n        });\n      } else if (type === 'electronicPhysical') {\n        cpRates.forEach(rate => {\n          let type = 'physical';\n          if (/both/i.test(rate.electronicPhysical)) {\n            type = 'electronic';\n          }\n          promises.push(Retailer.update({\n            'smpSpelling.cardPool': rate.name\n          }, {\n            $set: {\n              'smpType.cardPool': type\n            }\n          }).then(() => {}));\n        });\n      }\n      return Promise.all(promises)\n      .then(() => {\n        fs.unlink(fileName);\n        return res.json();\n      });\n    });\n\n  stream.pipe(csvStream);\n}\n\n/**\n * Upload Cardpool rates doc\n */\nexport function uploadCpRatesDoc(req, res) {\n  handleCp(req, res, 'rates');\n}\n\n/**\n * Upload Cardpool electronic/physical doc\n */\nexport function uploadElectronicPhysical(req, res) {\n  handleCp(req, res, 'electronicPhysical');\n}\n\n/**\n * Upload Giftcard Rescue rates\n */\nexport function uploadGcrRates(req, res) {\n  const file = req.files[0];\n  // No file\n  if (!file) {\n    return res.json();\n  }\n  const data = [];\n  const fileName = `${__dirname}/rates/${file.filename}`;\n  const stream = fs.createReadStream(fileName);\n  const csvStream = csv()\n    .on(\"data\", function(record){\n      /**\n       * Fields:\n       * 1) Name\n       * 2) Percentage\n       */\n      // Create record\n      const thisRecord = {\n        name: record[0],\n        percentage: record[1]\n      };\n      data.push(thisRecord);\n    })\n    .on('end', () => {\n      axios.post(`${liquidationApiUrl}:${liquidationApiPort}/${csvRatesPath}`, {\n          rates: JSON.stringify(data),\n          smp: 'giftcardrescue'\n        }, {\n          headers: {apiKey: liquidationApiKey}\n        })\n        .then(() => {\n          return fs.unlink(fileName);\n        })\n        .then(() => res.json())\n        .catch(err => {\n          console.log('**************GCR RATE UPLOAD ERROR**********');\n          console.log(err);\n          return res.status(500).json(err);\n        });\n    });\n  stream.pipe(csvStream);\n}\n\n/**\n * Upload Giftcard Rescue physical retailers\n */\nexport function uploadGcrPhysical(req, res) {\n  const file = req.files[0];\n  // No file\n  if (!file) {\n    return res.json();\n  }\n  const data = [];\n  const fileName = `${__dirname}/rates/${file.filename}`;\n  const stream = fs.createReadStream(fileName);\n  const csvStream = csv()\n    .on(\"data\", function(record){\n      /**\n       * Fields:\n       * 1) Name\n       */\n      // Create record\n      const thisRecord = {\n        name: record[0]\n      };\n      data.push(thisRecord);\n    })\n    .on('end', () => {\n      console.log('**************PHYSICAL**********');\n      console.log(data);\n      // axios.post(`${liquidationApiUrl}:${liquidationApiPort}/${csvRatesPath}`, {\n      //     rates: JSON.stringify(data),\n      //     smp: 'cardcash'\n      //   }, {\n      //     headers: {apiKey: liquidationApiKey}\n      //   })\n      //   .then(() => {\n      //     return fs.unlink(fileName);\n      //   })\n      //   .then(() => res.json())\n      //   .catch(() => res.status(500).json());\n    });\n  stream.pipe(csvStream);\n}\n\n/**\n * Upload Giftcard Rescue electronic retailers\n */\nexport function uploadGcrElectronic(req, res) {\n  const file = req.files[0];\n  // No file\n  if (!file) {\n    return res.json();\n  }\n  const data = [];\n  const fileName = `${__dirname}/rates/${file.filename}`;\n  const stream = fs.createReadStream(fileName);\n  const csvStream = csv()\n    .on(\"data\", function(record){\n      /**\n       * Fields:\n       * 1) Name\n       */\n      // Create record\n      const thisRecord = {\n        name: record[0]\n      };\n      data.push(thisRecord);\n    })\n    .on('end', () => {\n      console.log('**************PHYSICAL**********');\n      console.log(data);\n      // axios.post(`${liquidationApiUrl}:${liquidationApiPort}/${csvRatesPath}`, {\n      //     rates: JSON.stringify(data),\n      //     smp: 'cardcash'\n      //   }, {\n      //     headers: {apiKey: liquidationApiKey}\n      //   })\n      //   .then(() => {\n      //     return fs.unlink(fileName);\n      //   })\n      //   .then(() => res.json())\n      //   .catch(() => res.status(500).json());\n    });\n  stream.pipe(csvStream);\n}\n\n/**\n * Get all retailers\n */\nexport function getAllRetailers(req, res) {\n  return Retailer.find()\n    .then(retailers => res.json(retailers))\n    .catch(async err => {\n      await ErrorLog.create({\n        method: 'getAllRetailers',\n        controller: 'retailer.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err\n      });\n      return res.status(500).json({});\n    });\n}\n\n/**\n * Change the GiftSquirrel ID of a retailer\n */\nexport function setGsId(req, res) {\n  Retailer.findByIdAndUpdate(req.params.retailerId, {\n    gsId: req.body.gsId\n  })\n  .then(retailer => res.json(retailer))\n  .catch(async err => {\n    console.log('**************ERR IN SET GS ID**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'setGsId',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json(err);\n  });\n}\n\n/**\n * Set retailer property\n */\nexport function setProp(req, res) {\n  const {propPath} = req.body;\n  let {value} = req.body;\n  Retailer.findById(req.params.retailerId)\n  .then(retailer => {\n    if (propPath[0] === 'sellRates' || propPath === 'sellRatesMerch') {\n      value = parseFloat(value);\n      // Forgotten decimal\n      if (value > 1) {\n        value = value / 100;\n      }\n    }\n    _.set(retailer, propPath, value);\n    return retailer.save();\n  })\n  .then(retailer => {\n    return res.json(retailer);\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'setProp',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    console.log('**************ERR IN RETAILER SET PROP**********');\n    console.log(err);\n    return res.status(500).json();\n  });\n}\n\n/**\n * Count the number of retailers by card\n */\nexport function salesStats(req, res) {\n  Card.aggregate([\n    {$group : {_id: \"$retailer\", count: {$sum: 1}}},\n    {$sort : {count: -1}}\n  ])\n    .exec((err, results) => {\n      if (err) {\n        return res.status(500).json(err);\n      }\n      Retailer.populate(results, {path: '_id'})\n        .then(retailers => {\n          retailers = retailers.map(retailer => {\n            retailer.name = retailer._id.name;\n            return retailer;\n          });\n          return res.json({retailers});\n        })\n        .catch(err => {\n          console.log('**************ERR POPULATING RETAILERS FOR COUNTING**********');\n          console.log(err);\n          return res.status(500).json();\n        });\n    });\n}\n\n/**\n * Sync retailers with BI\n */\nexport function syncWithBi(req, res) {\n  const agentOptions = {\n    host: environment.gcmgrBiIp,\n    port: environment.gcmgrBiPort,\n    path: '/',\n    rejectUnauthorized: false\n  };\n\n  const methodFunction = environment.env === 'development' ? http : https;\n  const agent = new methodFunction['Agent'](agentOptions);\n\n  request({\n    url: `${environment.gcmgrBiMethod}${environment.gcmgrBiIp}:${environment.gcmgrBiPort}/retailers`,\n    method: 'GET',\n    agent: agent\n  }, function (err, resp, body) {\n    if (err) {\n      if (res.status) {\n        const resResponse = res.status(500);\n        if (resResponse) {\n          return resResponse.json(err);\n        }\n      }\n    }\n    Retailer.update({}, {\n      $unset: {\n        gsId: false\n      },\n    }, {\n      multi: true\n    })\n    .then(() => {\n      const promises = [];\n      body = JSON.parse(body);\n      let totalName = '';\n      body.forEach(biRetailer => {\n        let name = biRetailer.name;\n        name = name.replace('/', '.');\n        name = name.replace(/s/g, 's?');\n        name = name.replace(/\\s/g, '[\\/\\\\s\\'\\\"]+');\n        name = new RegExp(name, 'i');\n        totalName = `${totalName}${name}|`;\n        const toSet = {};\n        // GS ID\n        if (biRetailer.retailer_id) {\n          toSet.gsId = biRetailer.retailer_id;\n        }\n        // Addtoit ID\n        if (biRetailer.ai_id) {\n          toSet.aiId = biRetailer.ai_id;\n        }\n        promises.push(Retailer.update({name: name}, {\n          $set: toSet\n        }).then(() => {}));\n      });\n      return Promise.all(promises);\n    })\n    .then(() => res.json());\n  });\n}\n\n/**\n * Create a new retailer based on an old one (such as a merch credit retailer)\n */\nexport function createNewRetailerBasedOnOldOne(req, res) {\n  const body = req.body.retailer;\n  Retailer.findOne({\n    $or: [\n      {gsId: body.gsId},\n      {retailerId: body.gsId}\n    ]\n  })\n  .then(retailer => {\n    if (!retailer) {\n      return res.status(400).json();\n    }\n    const old = retailer.toObject();\n    old.name = body.name;\n    old.original = old._id;\n    delete old._id;\n    const newRetailer = new Retailer(old);\n    return newRetailer.save();\n  })\n  .then(retailer => {\n    if (!retailer) {\n      return;\n    }\n    return res.json();\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'createNewRetailerBasedOnOldOne',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json({});\n  });\n}\n\n/**\n * Create new retailer\n */\nexport function createRetailer(req, res){\n  const body = req.body;\n\n  Retailer.findOne({\n    name: body.name\n  })\n    .then(result => {\n      if(!result){\n        let retailer = new Retailer(body);\n        getActiveSmps().forEach(smp => {\n          // Not decimal\n          if (typeof retailer.sellRates[smp] === 'number' && retailer.sellRates[smp] > 1) {\n            retailer.sellRates[smp] = (retailer.sellRates[smp] / 100).toFixed(2);\n          }\n        });\n\n        retailer.save()\n        .then(() => res.json({msg: \"Retailer saved successfully\"}));\n      }else{\n        res.status(400).json({\n          msg:\"Retailer exists\"\n        });\n      }\n    })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'createRetailer',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json(err);\n  });\n}\n/**\n * Toggle disable retailers for a company\n */\nexport function toggleDisableForCompany(req, res) {\n  const body = req.body;\n  Company.findOne({\n    _id: body.company\n  })\n  .then(company => {\n    body.retailers.forEach(retailer => {\n      const index = company.disabledRetailers.indexOf(retailer.toString());\n      // Exists, so remove\n      if (index !== -1) {\n        company.disabledRetailers.splice(index, 1);\n      } else {\n        company.disabledRetailers.push(retailer);\n      }\n    });\n    return company.save();\n  })\n  .then(() => res.json())\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'toggleDisableForCompany',\n      controller: 'retailer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    return res.status(500).json({});\n  });\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}