{"version":3,"sources":["api/user/resetPasswordToken.model.js"],"names":["mongoose","require","bcrypt","Schema","ResetPasswordTokenSchema","user","type","Types","ObjectId","ref","required","token","String","createdAt","Date","default","now","methods","generateToken","callback","randomBytes","toString","saltRounds","hash","then","compareToken","compare","module","exports","model"],"mappings":"AAAA;;AAEA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,SAASH,SAASG,MAAxB;;AAEA,IAAMC,2BAA2B,IAAID,MAAJ,CAAW;AAC1CE,QAAM;AACJC,UAAMH,OAAOI,KAAP,CAAaC,QADf;AAEJC,SAAK,OAFD;AAGJC,cAAU;AAHN,GADoC;AAM1CC,SAAO;AACLL,UAAMM,MADD;AAELF,cAAU;AAFL,GANmC;AAU1CG,aAAW;AACTP,UAAMQ,IADG;AAETC,aAASD,KAAKE;AAFL;AAV+B,CAAX,CAAjC;;AAgBAZ,yBAAyBa,OAAzB,GAAmC;AACjC;;;;;AAKAC,iBAAe,uBAAUC,QAAV,EAAoB;AAAA;;AACjC,QAAMR,QAAQV,QAAQ,QAAR,EAAkBmB,WAAlB,CAA8B,EAA9B,EAAkCC,QAAlC,CAA2C,KAA3C,CAAd;AACA,QAAMC,aAAa,EAAnB;;AAEApB,WAAOqB,IAAP,CAAYZ,KAAZ,EAAmBW,UAAnB,EAA+BE,IAA/B,CAAoC,gBAAQ;AAC1C,YAAKb,KAAL,GAAaY,IAAb;AACAJ;AACD,KAHD;;AAKA,WAAOR,KAAP;AACD,GAhBgC;;AAkBjC;;;;;;AAMAc,gBAAc,sBAAUd,KAAV,EAAiB;AAC7B,WAAOT,OAAOwB,OAAP,CAAef,KAAf,EAAsB,KAAKA,KAA3B,CAAP;AACD;AA1BgC,CAAnC;;AA6BAgB,OAAOC,OAAP,GAAiB5B,SAAS6B,KAAT,CAAe,oBAAf,EAAqCzB,wBAArC,CAAjB","file":"api/user/resetPasswordToken.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst Schema = mongoose.Schema;\n\nconst ResetPasswordTokenSchema = new Schema({\n  user: {\n    type: Schema.Types.ObjectId,\n    ref: 'users',\n    required: true\n  },\n  token: {\n    type: String,\n    required: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nResetPasswordTokenSchema.methods = {\n  /**\n   * Generates a token for the current instance\n   *\n   * @return {String}\n   */\n  generateToken: function (callback) {\n    const token = require('crypto').randomBytes(30).toString('hex');\n    const saltRounds = 10;\n\n    bcrypt.hash(token, saltRounds).then(hash => {\n      this.token = hash;\n      callback();\n    });\n\n    return token;\n  },\n\n  /**\n   * Compares the given token with the stored hash\n   *\n   * @param {String} token\n   * @return {Promise}\n   */\n  compareToken: function (token) {\n    return bcrypt.compare(token, this.token);\n  }\n};\n\nmodule.exports = mongoose.model('ResetPasswordToken', ResetPasswordTokenSchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}