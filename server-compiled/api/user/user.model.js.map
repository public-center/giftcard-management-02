{"version":3,"sources":["api/user/user.model.js"],"names":["mongoose","require","Promise","Schema","crypto","authTypes","UserSchema","firstName","type","String","required","lastName","email","lowercase","validate","validator","value","test","message","enabled","Boolean","default","get","role","company","Types","ObjectId","ref","store","created","Date","now","hashedPassword","provider","salt","facebook","twitter","google","github","indexes","unique","virtual","set","password","_password","makeSalt","encryptPassword","_id","id","apis","path","indexOf","length","respond","self","constructor","findOne","err","user","validatePresenceOf","pre","next","isNew","Error","methods","authenticate","plainText","randomBytes","toString","Buffer","pbkdf2Sync","virtuals","transform","doc","ret","options","module","exports","model"],"mappings":"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","file":"api/user/user.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\nconst crypto = require('crypto');\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\nimport createIndexes from '../../config/indexDb';\n\nconst UserSchema = new Schema({\n  firstName: {\n    type: String,\n    required: true\n  },\n  lastName: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    lowercase: true,\n    validate: {\n      validator: (value) => /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i.test(\n        value),\n      message: 'Invalid email'\n    }\n  },\n  // Whether employee is active\n  enabled: {type: Boolean, default: true, get: function (enabled) {return !!enabled;}},\n  role: {\n    type: String,\n    default: 'employee'\n  },\n  // Company this user belongs to, if any\n  company: {\n    type: Schema.Types.ObjectId,\n    ref: 'Company'\n  },\n  // Store this user belongs to, if any\n  store: {\n    type: Schema.Types.ObjectId,\n    ref: 'Store'\n  },\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  hashedPassword: {\n    type: String,\n    required: true\n  },\n  provider: String,\n  salt: String,\n  facebook: {},\n  twitter: {},\n  google: {},\n  github: {}\n});\n\n// Indexes\nconst indexes = [\n  [{firstName: 1}],\n  [{lastName: 1}],\n  [{email: 1}, {unique: true}],\n  [{store: 1}],\n];\ncreateIndexes(UserSchema, indexes);\n\n/**\n * Virtuals\n */\nUserSchema\n  .virtual('password')\n  .set(function (password) {\n    this._password = password;\n    this.salt = this.makeSalt();\n    this.hashedPassword = this.encryptPassword(password);\n  })\n  .get(function () {\n    return this._password;\n  });\n\nUserSchema\n  .virtual('fullName')\n  .get(function () {\n    return `${this.firstName} ${this.lastName}`;\n  });\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function () {\n    return {\n      '_id': this._id,\n      'role': this.role\n    };\n  });\n\nUserSchema\n  .virtual('profile')\n  .get(function () {\n    return {\n      '_id': this.id,\n      apis: this.apis,\n      email: this.email,\n      firstName: this.firstName,\n      lastName: this.lastName\n    }\n  });\n\n/**\n * Validations\n */\n\n  // Validate empty email\nUserSchema\n  .path('email')\n  .validate(function (email) {\n    if (authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return email.length;\n  }, 'Email cannot be blank');\n\n// Validate role in type user or admin\nUserSchema\n  .path('role')\n  .validate(function (role) {\n    if (authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return ['employee', 'corporate-admin', 'manager', 'admin'].indexOf(role) !== -1;\n  }, 'User type must be employee, corporate-admin, manager, or admin');\n\n// Validate empty password\nUserSchema\n  .path('hashedPassword')\n  .validate(function (hashedPassword) {\n    if (authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return hashedPassword.length;\n  }, 'Password cannot be blank');\n\n// Validate email is not taken\nUserSchema\n  .path('email')\n  .validate(function (value, respond) {\n    const self = this;\n    this.constructor.findOne({email: value}, function (err, user) {\n      if (err) {\n        throw err;\n      }\n      if (user) {\n        if (self.id === user.id) {\n          return respond(true);\n        }\n        return respond(false);\n      }\n      respond(true);\n    });\n  }, 'The specified email address is already in use.');\n\nconst validatePresenceOf = function (value) {\n  return value && value.length;\n};\n\n/**\n * Pre-save hook\n */\nUserSchema\n  .pre('save', function (next) {\n    if (!this.isNew) {\n      return next();\n    }\n\n    if (!validatePresenceOf(this.hashedPassword) && authTypes.indexOf(this.provider) === -1) {\n      next(new Error('Invalid password'));\n    } else {\n      next();\n    }\n  });\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} plainText\n   * @return {Boolean}\n   * @api public\n   */\n  authenticate: function (plainText) {\n    return this.encryptPassword(plainText) === this.hashedPassword;\n  },\n\n  /**\n   * Make salt\n   *\n   * @return {String}\n   * @api public\n   */\n  makeSalt: function () {\n    return crypto.randomBytes(16).toString('base64');\n  },\n\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @return {String}\n   * @api public\n   */\n  encryptPassword: function (password) {\n    if (!password || !this.salt) {\n      return '';\n    }\n    const salt = new Buffer(this.salt, 'base64');\n    return crypto.pbkdf2Sync(password, salt, 10000, 64, 'SHA1').toString('base64');\n  }\n};\n\n// Return virtuals\nUserSchema.set('toJSON', {\n  virtuals: true,\n  transform: function (doc, ret, options) {\n    delete ret.hashedPassword;\n    delete ret.salt;\n    return ret;\n  }\n});\n\nmodule.exports = mongoose.model('User', UserSchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}