{"version":3,"sources":["api/receipt/receipt.service.js"],"names":["ReceiptService","query","pagination","perPage","offset","filter","getReceiptsBaseFilter","find","populate","path","model","sort","created","limit","skip","receipts","count","$exists","Date","parse","$gte","$lt","setDate","getDate"],"mappings":";;;;;;;;AAAA;;;;;;;;;;IAEqBA,c;;;;;;;;AACnB;;;;;;;;;YAOkBC,K,uEAAQ,E;YAAIC,U,uEAAa,E;;;;;;AACzC,oBAAI,CAACA,WAAWC,OAAhB,EAAyB;AACvBD,6BAAWC,OAAX,GAAqB,EAArB;AACD;;AAED,oBAAI,CAACD,WAAWE,MAAhB,EAAwB;AACtBF,6BAAWE,MAAX,GAAoB,CAApB;AACD;;AAEKC,sB,GAAS,KAAKC,qBAAL,CAA2BL,KAA3B,C;;uBAEQ,kBAAQM,IAAR,CAAaF,MAAb,EAAqBG,QAArB,CAA8B;AACnDC,wBAAM,aAD6C;AAEnDD,4BAAU,CAAC;AACTC,0BAAM,MADG;AAETC,2BAAO;AAFE,mBAAD,EAGP;AACDD,0BAAM,UADL;AAEDC,2BAAO;AAFN,mBAHO;AAFyC,iBAA9B,EAUtBF,QAVsB,CAUb,UAVa,EAWtBA,QAXsB,CAWb,OAXa,EAYtBG,IAZsB,CAYjB,EAACC,SAAS,CAAC,CAAX,EAZiB,EAatBC,KAbsB,CAahBX,WAAWC,OAbK,EActBW,IAdsB,CAcjBZ,WAAWE,MAdM,C;;;AAAjBW,wB;iDAgBCA,Q;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;YAMuBd,K,uEAAQ,E;;;;;;AACvBI,sB,GAAS,KAAKC,qBAAL,CAA2BL,KAA3B,C;;uBAEF,kBAAQe,KAAR,CAAcX,MAAd,C;;;;;;;;;;;;;;;;;;;;AAGf;;;;;;;;;4CAMkC;AAAA,UAAZJ,KAAY,uEAAJ,EAAI;;AAChC,UAAMI,SAAS,EAAf;;AAEAA,aAAO,eAAP,IAA0B,EAACY,SAAS,IAAV,EAA1B,CAHgC,CAGW;;AAE3C,UAAI,OAAOhB,MAAMW,OAAb,KAAyB,QAAzB,IAAqCM,KAAKC,KAAL,CAAWlB,MAAMW,OAAjB,CAAzC,EAAoE;AAClEP,eAAOO,OAAP,GAAiB;AACfQ,gBAAM,IAAIF,IAAJ,CAASjB,MAAMW,OAAf,CADS;AAEfS,eAAK,IAAIH,IAAJ,CAAS,IAAIA,IAAJ,CAASjB,MAAMW,OAAf,EAAwBU,OAAxB,CAAgC,IAAIJ,IAAJ,CAASjB,MAAMW,OAAf,EAAwBW,OAAxB,KAAoC,CAApE,CAAT;AAFU,SAAjB;AAID;;AAED,aAAOlB,MAAP;AACD;;;;;;kBArEkBL,c","file":"api/receipt/receipt.service.js","sourcesContent":["import Receipt from './receipt.model';\n\nexport default class ReceiptService {\n  /**\n   * Get receipts with inventories\n   *\n   * @param {Object} query\n   * @param {{perPage: 20, offset: 0}} pagination\n   * @return {Array}\n   */\n  async getReceipts(query = {}, pagination = {}) {\n    if (!pagination.perPage) {\n      pagination.perPage = 20;\n    }\n\n    if (!pagination.offset) {\n      pagination.offset = 0;\n    }\n\n    const filter = this.getReceiptsBaseFilter(query);\n\n    const receipts = await Receipt.find(filter).populate({\n      path: 'inventories',\n      populate: [{\n        path: 'card',\n        model: 'Card'\n      }, {\n        path: 'retailer',\n        model: 'Retailer'\n      }]\n    })\n    .populate('customer')\n    .populate('store')\n    .sort({created: -1})\n    .limit(pagination.perPage)\n    .skip(pagination.offset);\n\n    return receipts;\n  }\n\n  /**\n   * Count receipts with inventories\n   *\n   * @param {Object} query\n   * @return {Number}\n   */\n  async getReceiptsCount(query = {}) {\n    const filter = this.getReceiptsBaseFilter(query);\n\n    return await Receipt.count(filter);\n  }\n\n  /**\n   * Converts query input into a filter appropriate for querying the database\n   *\n   * @param {Object} query\n   * @return {Object}\n   */\n  getReceiptsBaseFilter(query = {}) {\n    const filter = {};\n\n    filter['inventories.0'] = {$exists: true}; // Filters receipts with no inventories\n\n    if (typeof query.created === 'string' && Date.parse(query.created)) {\n      filter.created = {\n        $gte: new Date(query.created),\n        $lt: new Date(new Date(query.created).setDate(new Date(query.created).getDate() + 1))\n      };\n    }\n\n    return filter;\n  }\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}