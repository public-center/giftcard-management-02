{"version":3,"sources":["api/company/company.controller.test.js"],"names":["test","cardNumber","describe","initDb","before","createAdminUser","createCompanyAndCorporateAdminUser","createStoreAndManager","createEmployee","createCustomer","smpMaxMin","cardCash","max","min","cardPool","giftcardZen","createRetailer","name","loginUserSaveToken","createCardFromUi","addCardsToInventory","createCardFromLqNew","createCardFromTransaction","it","to","be","equal","find","populate","cards","have","lengthOf","forEach","card","property"],"mappings":"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","file":"api/company/company.controller.test.js","sourcesContent":["import {expect} from 'chai';\n\nimport TestHelper from '../../tests/helpers';\nconst test = new TestHelper();\n\nimport moment from 'moment';\n\nimport User from '../user/user.model';\nimport Company from './company.model';\nimport Store from '../stores/store.model';\nimport Customer from '../customer/customer.model';\nimport Retailer from '../retailer/retailer.model';\nimport Card from '../card/card.model';\n\nimport {sellCardsInLiquidation, completeTransactions} from '../deferredBalanceInquiries/runDefers';\n\nlet cardNumber = 0;\n\ndescribe('company.controller.js', function () {\n  // Init DB for card controller\n  test.initDb();\n  // Init company and admin user\n  before(async function () {\n    // Create admin\n    await test.createAdminUser();\n    // Company and corporate admin\n    await test.createCompanyAndCorporateAdminUser();\n    await test.createCompanyAndCorporateAdminUser(2);\n    // Create store\n    await test.createStoreAndManager();\n    await test.createStoreAndManager(2);\n    // Create employee\n    await test.createEmployee();\n    await test.createEmployee(2);\n    // Create a customer\n    await test.createCustomer();\n    await test.createCustomer(2);\n\n    const smpMaxMin = {\n      cardCash: {\n        max: 50,\n        min: 0\n      },\n      cardPool: {\n        max: 100,\n        min: 10\n      },\n      giftcardZen: {\n        max: null,\n        min: 100\n      }\n    };\n    // Create 2 retailers\n    await test.createRetailer({name: 'Retailer1', smpMaxMin});\n    return await test.createRetailer({name: 'Retailer2', smpMaxMin});\n  });\n\n  describe('GET /activity/begin/:beginDate/end/:endDate/:perPage/:offset', function () {\n    // Create cards\n    before(async function () {\n      // Get logins\n      await test.loginUserSaveToken('employee');\n      await test.loginUserSaveToken('employee', 2);\n      // 2 cards from UI\n      await test.createCardFromUi(1);\n      await test.createCardFromUi(2);\n      // Add cards from UI to inventory\n      await test.addCardsToInventory(1);\n      await test.addCardsToInventory(2);\n      // 2 cards from lq/new\n      await test.createCardFromLqNew(1);\n      await test.createCardFromLqNew(2);\n      // 2 cards from lq/transactions\n      await test.createCardFromTransaction(1);\n      await test.createCardFromTransaction(2);\n      // Complete inventories\n      await sellCardsInLiquidation();\n      return await completeTransactions();\n    });\n\n    it('should successfully create cards and inventories using UI, lq/new, and lq/transactions', async function () {\n      expect(true).to.be.equal(true);\n      const cards = await Card.find().populate('inventory');\n      expect(cards).to.have.lengthOf(6);\n      cards.forEach(card => {\n        expect(card).to.have.property('inventory');\n      });\n    });\n  });\n\n  // describe('GET /company/:companyId/receipts/:perPage/:offset', function () {\n  //   before(async function () {\n  //     // Login as employee1\n  //     await test.loginUserSaveToken('employee', 1);\n  //   });\n  //\n  //   it('should return array of receipts', async function() {\n  //     return await test.request\n  //       .get(`/api/companies/${test.companies[0]._id}/receipts/10/0`)\n  //       .set('Authorization', `bearer ${test.tokens.employee1.token}`)\n  //       .then(async res => {\n  //         expect(res.body.data).to.be.an('array');\n  //         expect(res.body.data.length).to.be.equal(4);\n  //         expect(res.body.pagination).to.be.an('object');\n  //         expect(res.body.pagination.total).to.be.equal(4);\n  //       });\n  //   });\n  // });\n});\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}