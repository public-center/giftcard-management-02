{"version":3,"sources":["api/company/index.js"],"names":["express","require","controller","config","auth","router","Router","get","hasRole","getAll","getCompany","getStores","getStoreDetails","getStoreWithBuyRates","getCardsInInventory","getCardsInReconciliation","getLastReconciliationTime","reconciliationCompleteTime","getDenials","getReconciliationToday","getAllActivityRevised","getParamsInRange","checkInventoryNeedsReconciled","getCompanySummary","getReceipts","post","search","create","setApiAccess","newStore","reconcile","markAsReconciled","managerOverride","sellNonAutoCard","put","updateCompany","updateStore","updateStoreBuyRates","newEmployee","updateProfile","updateSettings","deleteInventories","updateAutoBuyRates","delete","deleteStore","deleteEmployee","deleteInventory","updateRole","module","exports"],"mappings":"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","file":"api/company/index.js","sourcesContent":["'use strict';\n\nconst express = require('express');\nconst controller = require('./company.controller');\nconst config = require('../../config/environment');\nconst auth = require('../auth/auth.service');\n\nconst router = express.Router();\n\n// Get all companies\nrouter.get('/', auth.hasRole('admin'), controller.getAll);\n// Get settings for a company\nrouter.get('/:companyId', auth.hasRole('employee'), controller.getCompany);\n// Retrieve stores for a company\nrouter.get('/:companyId/store', auth.hasRole('corporate-admin'), controller.getStores);\n// Retrieve store details\nrouter.get('/:companyId/store/:storeId', auth.hasRole('employee'), controller.getStoreDetails);\n// Get a store with buy rates\nrouter.get('/:companyId/store/:storeId/buyRates', auth.hasRole('employee'), controller.getStoreWithBuyRates);\n// Get cards in inventory since the last time added to reconciliation\nrouter.get('/:companyId/store/:storeId/inventory', auth.hasRole('employee'),\n  controller.getCardsInInventory);\n// Get cards in inventory for corporate admin\nrouter.get('/:companyId/inventory', auth.hasRole('corporate-admin'), controller.getCardsInInventory);\n// Get cards in inventory since the last time added to reconciliation\nrouter.get('/:companyId/store/:storeId/reconciliation/current', auth.hasRole('employee'), controller.getCardsInReconciliation);\n// Get last reconciliation time for this store\nrouter.get('/:companyId/store/:storeId/reconciliationTime', auth.hasRole('employee'), controller.getLastReconciliationTime);\n// Get time reconciliation was last completed for this store\nrouter.get('/:companyId/store/:storeId/reconciliationCompleteTime', auth.hasRole('employee'),\n  controller.reconciliationCompleteTime);\n// Get denials since the last time reconciliation was completed\nrouter.get('/:companyId/store/:storeId/denials', auth.hasRole('admin'), controller.getDenials);\n// Get reconciliation for today\nrouter.get('/:companyId/store/:storeId/reconciliationToday/:today', auth.hasRole('employee'), controller.getReconciliationToday);\n/**\n * Admin activity\n */\n// Get activity date range\nrouter.get('/activity/begin/:beginDate/end/:endDate/:perPage/:offset', auth.hasRole('employee'), controller.getAllActivityRevised);\n// Batches in range\nrouter.get('/activity/getParamsInRange', auth.hasRole('employee'), controller.getParamsInRange);\n// Get if there is inventory for this company which needs to be reconciled\nrouter.get('/:companyId/store/:storeId/checkInventoryNeedsReconciled', auth.hasRole('employee'), controller.checkInventoryNeedsReconciled);\n// Get store totals for a company\nrouter.get('/:companyId/storeTotals/:begin/:end', auth.hasRole('employee'), controller.getCompanySummary);\n// Get receipts\nrouter.get('/:companyId/receipts', auth.hasRole('employee'), controller.getReceipts);\n// Search companies\nrouter.post('/', auth.hasRole('admin'), controller.search);\n// Create a new company\nrouter.post('/create', auth.hasRole('admin'), controller.create);\n// Set API access for a company\nrouter.post('/:companyId/api/:api', auth.hasRole('admin'), controller.setApiAccess);\n// Create a new store for a company\nrouter.post('/:companyId/store/new', auth.hasRole('corporate-admin'), controller.newStore);\n// Reconcile available cards\nrouter.post('/:companyId/store/:storeId/reconcile', auth.hasRole('employee'), controller.reconcile);\n// Mark cards currently in reconciliation as reconciled\nrouter.post('/:companyId/store/:storeId/markAsReconciled', auth.hasRole('employee'), controller.markAsReconciled);\n// Perform a manager override\nrouter.post('/:companyId/managerOverride', auth.hasRole('employee'), controller.managerOverride);\n// Sell a card which is not auto-sell\nrouter.post('/:companyId/store/:storeId/inventory/:inventoryId/sell', auth.hasRole('employee'), controller.sellNonAutoCard);\n// Update company details\nrouter.put('/:companyId', auth.hasRole('corporate-admin'), controller.updateCompany);\n// Update a store's details\nrouter.put('/:companyId/store/:storeId/update', auth.hasRole('corporate-admin'), controller.updateStore);\n// Update a store's buy rates for a retailer\nrouter.put('/:companyId/store/:storeId/buyRates/:retailerId', auth.hasRole('employee'), controller.updateStoreBuyRates);\n// Create a new employee\nrouter.post('/:companyId/store/:storeId/newEmployee', auth.hasRole('manager'), controller.newEmployee);\n// Update a company\nrouter.post('/:companyId', auth.hasRole('admin'), controller.updateProfile);\n// Update a company's settings\nrouter.post('/:companyId/settings', auth.hasRole('corporate-admin'), controller.updateSettings);\n// Delete one or more inventories\nrouter.post('/inventory/delete', auth.hasRole('corporate-admin'), controller.deleteInventories);\n// Update a company's auto-buy rates\nrouter.post('/:companyId/settings/autoBuyRates', auth.hasRole('corporate-admin'), controller.updateAutoBuyRates);\n// Delete a store\nrouter.delete('/:companyId/store/:storeId', auth.hasRole('corporate-admin'), controller.deleteStore);\n// Delete an employee from a store\nrouter.delete('/:companyId/store/:storeId/employee/:employeeId', auth.hasRole('manager'), controller.deleteEmployee);\n// Delete an inventory (@todo: Protect this route, currently any inventory can be deleted!)\nrouter.delete('/:companyId/store/:storeId/inventory/:inventoryId', auth.hasRole('employee'), controller.deleteInventory);\n// Delete any inventory\nrouter.delete('/inventory/:inventoryId', auth.hasRole('admin'), controller.deleteInventory);\n// Change users role\nrouter.put('/:companyId/employee/:userId/:userRole', auth.hasRole('corporate-admin'), controller.updateRole);\nmodule.exports = router;\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}