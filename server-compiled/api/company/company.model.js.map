{"version":3,"sources":["api/company/company.model.js"],"names":["mongoose","require","Promise","Schema","CompanySchema","name","type","String","required","address1","address2","city","state","zip","url","created","Date","default","now","apis","bi","Boolean","lq","dgc","disabledRetailers","users","Types","ObjectId","ref","stores","settings","cardBuyId","cardBuyCustomerId","cardBuyCcId","reserveTotal","Number","get","total","bookkeepingEmails","emails","reserves","indexes","path","validate","length","respond","constructor","findOne","err","company","id","methods","getSettings","returnPlainObject","model","_id","save","getAutoBuyRates","autoBuyRates","toObject","customerDataRequired","populate","getSettingsObject","dbSettings","Settings","resolve","getMargin","thisMargin","margin","e","set","getters","module","exports"],"mappings":"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","file":"api/company/company.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\nimport createIndexes from '../../config/indexDb';\nimport {defaultMargin} from '../deferredBalanceInquiries/runDefers';\n\nconst CompanySchema = new Schema({\n  // Company name\n  name: {\n    type: String,\n    required: true\n  },\n  address1: String,\n  address2: String,\n  city: String,\n  state: String,\n  zip: String,\n  // Company URL\n  url: String,\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  apis: {\n    bi: {type: Boolean, default: false},\n    lq: {type: Boolean, default: false},\n    dgc: {type: Boolean, default: false}\n  },\n  // Disabled retailers\n  disabledRetailers: [],\n  // Company users\n  users: [{type: Schema.Types.ObjectId, ref: 'User'}],\n  // Stores\n  stores: [{type: Schema.Types.ObjectId, ref: 'Store'}],\n  // Company settings\n  settings: {type: Schema.Types.ObjectId, ref: 'CompanySettings'},\n  // Tango ID\n  cardBuyId: String,\n  // Card buy\n  cardBuyCustomerId: String,\n  // CC id\n  cardBuyCcId: String,\n  // Reserve total\n  reserveTotal: {type: Number, default: 0, get: function (total) {\n    if (!total) {\n      return 0;\n    }\n    return total;\n  }},\n  // Bookkeeping emails\n  bookkeepingEmails: {type: String, get: function (emails) { return emails || ''; }},\n  // Reserves\n  reserves: [{type: Schema.Types.ObjectId, ref: 'Reserve'}]\n});\n\n// Indexes\nconst indexes = [\n  [{name: 1}],\n  [{reserves: 1}],\n];\ncreateIndexes(CompanySchema, indexes);\n\n/**\n * Validations\n */\n\n// Validate empty name\nCompanySchema\n  .path('name')\n  .validate(function (name) {\n    return name.length;\n  }, 'Company name cannot be blank');\n\n// Validate duplicate names\nCompanySchema\n  .path('name')\n  .validate(function(name, respond) {\n    this.constructor.findOne({name}, (err, company) => {\n      if (err) {\n        throw err;\n      }\n      if (company) {\n        if (this.id === company.id) {\n          return respond(true);\n        }\n        return respond(false);\n      }\n      respond(true);\n    });\n  }, 'Company name is already taken');\n\n/**\n * Retrieve settings for a company\n * @param returnPlainObject Return a plain object with company settings rather than a Mongoose model\n */\nCompanySchema.methods.getSettings = async function (returnPlainObject = true) {\n  let settings;\n  settings = await (this.model('CompanySettings')).findOne({company: this._id});\n  // If no settings, create a new one\n  if (!settings) {\n    settings = new (this.model('CompanySettings'))({\n      company: this._id\n    });\n    settings = await settings.save();\n    this.settings = settings._id;\n    this.save();\n    const autoBuyRates = await settings.getAutoBuyRates();\n    settings = settings.toObject();\n    settings.autoBuyRates = autoBuyRates;\n  // Return settings\n  } else {\n    settings.customerDataRequired = typeof settings.customerDataRequired === 'undefined' ? true : settings.customerDataRequired;\n    const autoBuyRates = await settings.getAutoBuyRates();\n    settings = settings.toObject();\n    settings.autoBuyRates = autoBuyRates;\n  }\n  // Return plain object with auto buy rates filled in\n  if (returnPlainObject) {\n    return settings;\n  // Return Mongoose model for settings manipulation\n  } else {\n    return await (this.model('CompanySettings')).findOne({company: this._id}).populate({\n      path: 'settings',\n      populate: {\n        path: 'autoBuyRates',\n        model: 'AutoBuyRate'\n      }\n    });\n  }\n};\n\n/**\n * Get settings as mongoose object\n * @returns {Promise}\n */\nCompanySchema.methods.getSettingsObject = function () {\n  return new Promise(resolve => {\n    let settings;\n    // Get company settings\n    (this.model('CompanySettings')).findOne({company: this._id}, (err, dbSettings) => {\n      settings = dbSettings;\n      // If no settings, create a new one\n      if (!dbSettings) {\n        new Settings({\n          company: this._id\n        })\n        .save((err, dbSettings) => {\n          settings = dbSettings;\n          this.settings = dbSettings._id;\n          this.save();\n          return resolve(settings);\n        });\n        // Return settings\n      } else {\n        settings.customerDataRequired = typeof settings.customerDataRequired === 'undefined' ? true : settings.customerDataRequired;\n      }\n      resolve(settings);\n    });\n  });\n};\n\n/**\n * Retrieve company margin\n */\nCompanySchema.methods.getMargin = function () {\n  let thisMargin;\n  try {\n    thisMargin = this.settings.margin;\n  } catch (e) {\n    thisMargin = defaultMargin;\n  }\n  return thisMargin;\n};\n\nCompanySchema.set('toJSON', {getters: true});\nCompanySchema.set('toObject', {getters: true});\n\nmodule.exports = mongoose.model('Company', CompanySchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}