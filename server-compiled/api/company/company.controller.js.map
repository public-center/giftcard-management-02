{"version":3,"sources":["api/company/company.controller.js"],"names":["req","res","body","companyId","params","editable","findById","company","getSettingsObject","settings","forEach","prop","key","indexOf","margin","parseFloat","useAlternateGCMGR","serviceFee","replace","emails","split","isValid","email","save","populate","companyFinal","json","console","log","create","method","controller","revision","stack","error","user","_id","status","updateProfile","publicSettings","toString","message","getSettings","setting","setMinimumAdjustedDenial","path","model","companyWithSettings","updateSettings","matchedInventories","tzOffset","userTime","substr","utc","add","parseInt","toDate","findParams","type","reconciliation","$exists","soldToLiquidation","findElectronicParams","findOthersParams","storeIdParam","storeId","isValidObjectId","store","err","find","then","inventories","concat","filter","thisInventory","index","collection","findIndex","t","matchPromises","Reconciliation","inventory","thisMatch","created","push","Promise","all","inventoryPromises","reconciliations","Store","resolve","reconciledTime","Date","now","data","catch","reconcile","pageSize","page","begin","end","startOf","endOf","retailers_with_denials","searchQuery","query","hasOwnProperty","$gt","$lt","Retailer","count","retailersCount","limit","skip","lean","retailers","ret","retailer","rejected","rejected_inventories","total","getDenials","inventoriesToUse","batch","reconciliationComplete","reconciliationPromises","update","$set","reconciliationCompleteUserTime","length","thisBatch","batchPromises","map","markAsReconciled","beginDate","dateBegin","endDate","dateEnd","beginEnd","date","userRole","role","batchMap","companyMap","storeMap","batchFinal","storeFinal","getCache","cache","batches","companies","stores","getActivityDateRange","createParamMap","storeCache","getParamsInRange","changed","setInventoryUnchanged","companySettings","getDenialsPayments","totalRejections","getCalculatedValues","isPlainObject","toObject","i","isCached","card","number","getLast4Digits","calculateValues","handleCalculations","rejections","finalInventories","cacheInventoryValues","smp","csvSmp","format","isCc","toLowerCase","isCp","isGcz","isCorporate","splice","csvWriter","headers","outFile","existsSync","unlinkSync","pipe","createWriteStream","used","activityStatus","smpIds","CARDCASH","CARDPOOL","GIFTCARDZEN","row","netAmount","isTransaction","transaction","netPayout","customerName","lqCustomerName","customer","fullName","name","pin","balance","toFixed","verifiedBalance","buyAmount","cqAch","rejectAmount","creditAmount","retailerName","getSmpSpelling","write","url","serverApiUrl","getSmpCsv","perPage","offset","cqAchCompanySearch","payments","meta","finalFindParams","$or","credited","isAdmin","queryActivity","queryRes","inventoryMapReduceParams","scope","counter","corporate","cqAchSearch","mapReduce","mrRes","totals","item","value","paramsOffset","paramsPerPage","mrPageRes","pageTotals","pages","Math","ceil","getAllActivityRevised","dbStores","promises","storesWithData","resultObject","results","result","getCompanySummary","isCorporateAdmin","inventoryId","proceedWithSale","sellNonAutoCard","needReconciliation","checkInventoryNeedsReconciled","receiptService","Object","assign","pick","getReceiptsCount","getReceipts","totalReceipts","receipts","pagination","$in","dbInventories","removeReserve","remove","deleteInventories","userId","updateRole","updateAutoBuyRates","managerOverride","getCardsInInventory","getCardsInReconciliation","getLastReconciliationTime","reconciliationCompleteTime","doDeleteInventory","deleteInventory","getReconciliationToday","require","BuyRate","Card","CardUpdate","DeferredBalanceInquiry","passport","Types","ObjectId","generalError","errStr","JSON","stringify","parse","exports","getAll","search","RegExp","$query","setApiAccess","id","api","access","apis","validationError","powerSeller","savedCompany","savedUser","contact","users","send","getCompany","dbCompany","Error","isNaN","findOne","getAutoBuyRates","rate","test","rates","authenticate","admin","newStore","savedStore","storeIndex","userIndex","getStores","getStoreDetails","updateStore","details","newEmployee","currentUser","newUser","cleanupOnStoreDelete","$pull","deleteStore","userPromises","storeUsers","deleteEmployee","employeeId","employee","updateCompany","getStoreWithBuyRates","updateStoreBuyRates","retailerId","buyRate","storeRecord","retailerRecord","existingBuyRateId","buyRateId","buyRateRecord","Array","isArray","buyRateRelations","sort","cards","reconciledLast","reconcileCompleteTime","thisCard","updates","storeParam","thisStore","dayBegin","today","dayEnd","dbUser","dbReconciliations","promise","toISOString","thisReconciliation","e","subtract","exposeInventoryValues","valuesToExpose","get","default","modify","claimedBalance","actualBalance","emit","liquidationSoldFor","rateThisInventory","liquidationRate","cqPaid","deduction","cqHasPaid","reduce","k","v","sum","inventoryParam","displayParam","rateAfterMargin","serviceFeeRate","displayMargin","companyMargin","corpRateThisInventory","smps","statusDisplay","realBuyAmount","amountOwed","owed","allowSearchOnMultipleValues","searchMultiple","splitQuery","join","trim","dateParams","$where","orderNumber","smpAch","systemTime","isTransactions","sortParts","balanceCardIssued","transactionPrefix","subdocumentConstraints","queryBySubdocument","constraint","cardParams","retailerParams","searchCard","customerQuery","customerNameRegExp","customerPhone","phone","customerEmail","isEmpty","customers","employeeName","employeeRegExp","firstName","lastName","employees"],"mappings":"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","file":"api/company/company.controller.js","sourcesContent":["'use strict';\n\nimport '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../inventory/liquidationError.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport Company from './company.model';\nimport CompanySettings from './companySettings.model';\nimport Settings from './companySettings.model';\nimport Customer from '../customer/customer.model';\nimport User from '../user/user.model';\nimport Inventory from '../inventory/inventory.model';\nconst Retailer = require('../retailer/retailer.model');\nconst Store = require('../stores/store.model');\nconst BuyRate = require('../buyRate/buyRate.model');\nconst Reconciliation = require('../reconciliation/reconciliation');\nconst Card = require('../card/card.model');\nconst CardUpdate = require('../cardUpdates/cardUpdates.model');\nconst DeferredBalanceInquiry = require('../deferredBalanceInquiries/deferredBalanceInquiries.model');\nimport DenialPayments from '../denialPayment/denialPayment.model';\nimport ErrorLog from '../errorLog/errorLog.model';\nimport {getGitRev} from '../../helpers/errors';\nimport {smpNames, serverApiUrl, serviceFee} from '../../config/environment';\nimport {isEmail} from '../../helpers/validation';\nimport _ from 'lodash';\nimport moment from 'moment';\nconst passport = require('passport');\nimport Batch from '../batch/batch.model';\nimport Receipt from '../receipt/receipt.model';\nimport InventoryParamCache from '../inventory/inventoryParamCache.model';\nimport mongoose from 'mongoose';\nconst isValidObjectId = mongoose.Types.ObjectId.isValid;\nimport CsvWriter from 'csv-write-stream';\nimport environment from '../../config/environment';\nimport fs from 'fs';\n\nimport ReceiptService from '../receipt/receipt.service';\n\n/**\n * General error response\n */\nconst generalError = (res, err) => {\n  let errStr = JSON.stringify(err);\n  errStr = errStr.replace(/hashedPassword/g, 'password');\n  err = JSON.parse(errStr);\n  return res.status(400).json(err);\n};\n\n/**\n * Get all supplier companies\n */\nexports.getAll = (req, res) => {\n  Company.find({})\n  .then((companies) => {\n    return res.json(companies);\n  })\n  .catch((err) => {\n    console.log('**************ERR IN GET ALL SUPPLIER COMPANIES**********');\n    console.log(err);\n    return res.status(500).json(err);\n  });\n};\n\n/**\n * Search for companies\n * restriction: 'admin'\n */\nexports.search = function(req, res) {\n  Company\n    .find({name: new RegExp(req.body.$query)})\n    .populate('users')\n    .then((err, companies) => {\n      if (err) {\n        return res.status(500).json(err);\n      }\n      return res.status(200).json({companies});\n    })\n    .catch(async (err) => {\n      console.log('**************ERR IN COMPANY SEARCH**********');\n      console.log(err);\n\n      await ErrorLog.create({\n        method: 'search',\n        controller: 'company.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n\n      return res.status(500).json(err);\n    });\n};\n\n/**\n * Allow/disallow API access\n */\nexports.setApiAccess = (req, res) => {\n  const id = req.params.companyId;\n  const api = req.params.api;\n  Company.findById(id, async (err, company) => {\n    const access = !company.apis[api];\n    // No company\n    if (!company) {\n      return res.status(500).json({\n        error: 'company not found'\n      });\n    }\n    // Error\n    if (err) {\n\n      await ErrorLog.create({\n        method: 'setApiAccess',\n        controller: 'company.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n\n      return res.json(err);\n    }\n    company.apis[api] = access;\n    company.save((err) => {\n      if (err) {\n        return validationError(res, err);\n      }\n      return res.status(200).json({\n        access\n      });\n    });\n  });\n};\n\n/**\n * Create a new supplier company\n */\nexport function create(req, res) {\n  const {powerSeller = false} = req.body;\n  const company = new Company(req.body);\n  let savedCompany, savedUser;\n  company.save()\n    // Create user\n  .then(company => {\n    savedCompany = company;\n    // Successful save, create user\n    let user = new User(req.body.contact);\n    user.company = company._id;\n    user.role = 'corporate-admin';\n    return user.save();\n  })\n    // Add user to company users\n  .then(user => {\n    savedUser = user;\n    company.users.push(user._id);\n    return company.save();\n  })\n    // Add company ID to user\n  .then((company) => {\n    savedUser.company = company._id;\n    return savedUser.save()\n  })\n  .then(() => {\n    if (powerSeller) {\n      const store = new Store({\n        name: 'default',\n        companyId: savedCompany._id,\n        users: [savedUser._id]\n      });\n      return store.save();\n    }\n  })\n  .then(store => {\n    if (store) {\n      savedCompany.stores = [store._id];\n      return savedCompany.save();\n    }\n  })\n  .then(() => {\n    return res.status(200).send();\n  })\n  .catch(async err => {\n    console.log('**************ERR IN CREATE NEW SUPPLIER COMPANY**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'create',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    // Remove anything written on error\n    if (savedCompany) {\n      savedCompany.remove();\n    }\n    if (savedUser) {\n      savedUser.remove();\n    }\n    return generalError(res, err);\n  });\n};\n\n/**\n * Get company\n */\nexports.getCompany = (req, res) => {\n  const user = req.user;\n  const companyId = req.params.companyId;\n  let company;\n  // Check to make sure we're retrieving the right company\n  if (user.company && user.company.toString() !== companyId) {\n    return res.status(401).json({\n      message: 'unauthorized'\n    });\n  }\n  // Retrieve company settings\n  Company.findById(req.params.companyId)\n  .then((dbCompany) => {\n    if (!dbCompany) {\n      throw Error('Could not find company');\n    }\n    company = dbCompany;\n    return company.getSettings();\n  })\n  .then(settings => {\n    company = company.toObject();\n    company.settings = settings;\n    return res.json(company);\n  })\n  .catch(async (err) => {\n    console.log('**************ERR IN GET COMPANY**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getCompany',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(400).json(err);\n  });\n};\n\n/**\n * Admin route to update a company\n * @param req\n * @param res\n */\nexport async function updateProfile(req, res) {\n  try {\n    const body = req.body;\n    const companyId = req.params.companyId;\n    const editable = ['name', 'address1', 'address2', 'city', 'state', 'zip', 'margin', 'apis', 'autoSell',\n                      'useAlternateGCMGR', 'serviceFee', 'bookkeepingEmails'];\n    // let newMargin, company, settings;\n    const company = await Company.findById(companyId);\n    const settings = await company.getSettingsObject();\n    _.forEach(body, (prop, key) => {\n      // Don't edit non-editable items\n      if (editable.indexOf(key) !== -1) {\n        switch (key) {\n          // Default to environment margin\n          case 'margin':\n            settings.margin = prop === '' ? environment.margin : parseFloat(prop);\n            break;\n          case 'useAlternateGCMGR':\n            settings.useAlternateGCMGR = prop;\n            break;\n          // Default to environment service fee\n          case 'serviceFee':\n            settings.serviceFee = prop === '' ? environment.serviceFee : parseFloat(prop);\n            break;\n          // Make sure there's no spaces in the booking emails list\n          case 'bookkeepingEmails':\n            prop = prop.replace(/\\s/g, '');\n            const emails = prop.split(',');\n            let isValid = true;\n            emails.forEach(email => {\n              if (!isEmail(email)) {\n                isValid = false;\n              }\n            });\n            if (!isValid) {\n              throw 'invalidBookkeepingEmails';\n            }\n            company[key] = prop;\n            break;\n          default:\n            company[key] = prop;\n        }\n      }\n    });\n    await company.save();\n    await settings.save();\n    const companyFinal = await Company.findById(companyId).populate('settings');\n    return res.json(companyFinal);\n  } catch (err) {\n    console.log('**************UPDATE PROFILE ERR**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'updateProfile',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err)\n  }\n}\n\n/**\n * Handle minimum adjusted denial settings\n * @param settings\n * @param setting\n */\nfunction setMinimumAdjustedDenial(settings, setting) {\n  if (setting === true) {\n    // Default to 0.1\n    settings[key] = 0.1;\n  } else if (setting === false) {\n    settings[key] = 0;\n  } else {\n    const value = parseFloat(setting);\n    settings[key] = !isNaN(value) ? value : settings[key];\n  }\n}\n\n/**\n * Update a company's settings\n */\nexport async function updateSettings(req, res) {\n  const body = req.body;\n  const companyId = req.params.companyId;\n  const user = req.user;\n  const publicSettings = ['managersSetBuyRates', 'autoSetBuyRates', 'autoBuyRates', 'employeesCanSeeSellRates',\n                          'autoSell', 'minimumAdjustedDenialAmount', 'customerDataRequired', 'cardType', 'timezone'];\n  // Basic auth check\n  if (user.company.toString() !== companyId) {\n    return res.status(401).json({\n      message: 'Unauthorized'\n    });\n  }\n\n  try {\n    // Get company and settings\n    const company = await Company.findById(companyId);\n    const settings = await company.getSettings(false);\n    _.forEach(body, (setting, key) => {\n      if (publicSettings.indexOf(key) !== -1) {\n        // Minimum adjusted denial amount\n        if (key === 'minimumAdjustedDenialAmount') {\n          setMinimumAdjustedDenial(settings, setting);\n        } else {\n          settings[key] = setting;\n        }\n      }\n    });\n    // Retrieve updated company and settings\n    await settings.save();\n    const companyWithSettings = await Company.findById(companyId)\n      .populate({\n        path: 'settings',\n        populate: {\n          path: 'autoBuyRates',\n          model: 'AutoBuyRate'\n        }\n      });\n\n    return res.json({company: companyWithSettings});\n  }\n  catch (err) {\n\n    await ErrorLog.create({\n      method: 'updateSettings',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  }\n}\n\n/**\n * Update auto-buy rates\n */\nexport function updateAutoBuyRates(req, res) {\n  const companyId = req.params.companyId;\n  const body = req.body;\n  const user = req.user;\n  // Auth\n  if (user.company.toString() !== companyId) {\n    return res.status(401).json();\n  }\n  Settings.findOne({company: companyId})\n  .then(settings => {\n    return settings.getAutoBuyRates();\n  })\n  .then(rates => {\n    _.forEach(body, (rate, key) => {\n      // Rate\n      if (/_\\d{2}/.test(key)) {\n        rates[key] = rate / 100;\n      }\n    });\n    return rates.save();\n  })\n  .then(() => {\n    return Company.findById(companyId)\n      .populate({\n        path: 'settings',\n        populate: {\n          path: 'autoBuyRates',\n          model: 'AutoBuyRate'\n        }\n      })\n  })\n  .then(company => res.json(company))\n  .catch(async err => {\n    console.log('**************ERR IN UPDATE RATES**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'updateSettings',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  })\n}\n\n/**\n * Perform a manager override credentials\n * @param req\n * @param res\n */\nexport function managerOverride(req, res) {\n  const companyId = req.params.companyId;\n  passport.authenticate('local', function (err, user) {\n    if (err) {\n      return res.status(401).json(err);\n    }\n    if (!user) {\n      return res.status(401).json({message: 'Incorrect credentials'});\n    }\n    if (user.role === 'admin') {\n      return res.json({\n        admin: true\n      });\n    }\n    // Check we're on the right company\n    if (user.company.toString() === companyId && ['corporate-admin', 'manager', 'admin'].indexOf(user.role) !== -1) {\n      return res.json();\n    }\n    return res.status(401).json();\n  })(req, res)\n}\n\n/**\n * Create a new store\n *\n * @todo This is a copy of the company creation method above. .bind the above function to avoid this code replication\n */\nexports.newStore = (req, res) => {\n  const body       = req.body;\n  let savedCompany = null;\n  let savedUser    = null;\n  let savedStore   = null;\n  let store        = null;\n  body.companyId = req.user.company;\n  store            = new Store(body);\n  return store.save()\n  // Create user\n  .then((store) => {\n    savedStore = store;\n    // Successful save, create user\n    let user   = new User(body.contact);\n    user.store = store._id;\n    user.role  = 'employee';\n    return user.save();\n  })\n  // Add user to store users\n  .then((user) => {\n    savedUser = user;\n    store.users.push(user._id);\n    return store.save();\n  })\n  // Add store ID to user\n  .then((store) => {\n    savedUser.store   = store._id;\n    savedUser.company = store.companyId;\n    return savedUser.save()\n  })\n  // Get company\n  .then(() => {\n    return Company.findById(store.companyId);\n  })\n  // Add user and store to company\n  .then((company) => {\n    savedCompany = company;\n    // Add store to company\n    company.stores.push(savedStore._id);\n    // Add user to company\n    company.users.push(savedUser._id);\n    return company.save();\n  })\n  .then(() => {\n    return res.status(200).send({_id : savedStore._id});\n  })\n  // Remove anything written on error\n  .catch(async err => {\n\n    await ErrorLog.create({\n      method: 'newStore',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    const storeIndex = savedCompany ? savedCompany.stores.indexOf(savedStore._id) : -1;\n    const userIndex  = savedCompany ? savedCompany.users.indexOf(savedUser._id) : -1;\n    // Remove store\n    if (savedStore) {\n      savedStore.remove();\n    }\n    // Remove user\n    if (savedUser) {\n      savedUser.remove();\n    }\n    if (savedCompany) {\n      // Remove store\n      if (storeIndex !== -1) {\n        savedCompany.stores.splice(storeIndex, 1);\n      }\n      // Remove user\n      if (userIndex !== -1) {\n        savedCompany.users.splice(userIndex, 1);\n      }\n      savedCompany.save();\n    }\n    console.log('**************ERR IN NEW STORE**********');\n    console.log(err);\n    return generalError(res, err);\n  });\n};\n\n/**\n * Retrieve stores for a company\n */\nexports.getStores = (req, res) => {\n  const companyId = req.params.companyId;\n  // Retrieve stores\n  Store.find({companyId})\n  .populate('users')\n  .then((stores) => res.json(stores))\n  .catch(async (err) => {\n    console.log('**************ERR IN GET STORES**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getStores',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(400).json(err);\n  });\n};\n\n/**\n * Get store details\n */\nexports.getStoreDetails = (req, res) => {\n  Store.findOne({_id: req.params.storeId, companyId: req.user.company})\n  .populate('users')\n  .then((store) => {\n    return res.json(store);\n  })\n  .catch(async (err) => {\n    console.log('**************ERR IN GET STORE DETAILS**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getStoreDetails',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(400).json(err);\n  });\n};\n\n/**\n * Update a store\n */\nexports.updateStore = (req, res) => {\n  const details = req.body;\n  Store.findById(details.storeId)\n  .then((store) => {\n    Object.assign(store, details);\n    return store.save();\n  })\n  .then((store) => {\n    return res.json(store);\n  })\n  .catch(async (err) => {\n    console.log('**************ERR IN UPDATE STORE**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'updateStore',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(400).json(err);\n  });\n};\n\n/**\n * Create a new employee\n */\nexports.newEmployee = (req, res) => {\n  const body = req.body;\n  let user = new User(body);\n  let savedUser, savedStore;\n  const {companyId, storeId} = req.body;\n  const currentUser = req.user;\n  // Check for permissions\n  if (currentUser.role === 'manager' && storeId !== currentUser.store.toString()) {\n    return res.status(401).json();\n  }\n  if (currentUser.role === 'corporate-admin' && companyId !== currentUser.company.toString()) {\n    return res.status(401).json();\n  }\n\n  user.company = companyId;\n  user.store = storeId;\n  user.save()\n    // Create user\n  .then(newUser => {\n    savedUser = newUser;\n    return Store.findById(savedUser.store);\n  })\n    // Add user to store\n  .then((store) => {\n    savedStore = store;\n    store.users.push(savedUser._id);\n    return store.save();\n  })\n  // Success\n  .then(() => {\n    return res.json(savedUser)\n  })\n  .catch(async (err) => {\n\n    await ErrorLog.create({\n      method: 'newEmployee',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    if (savedUser) {\n      savedUser.remove();\n    }\n    if (savedStore) {\n      savedStore.remove();\n    }\n    console.log('**************ERR IN NEW EMPLOYEE**********');\n    console.log(err);\n    return res.status(400).json(err);\n  });\n};\n\n/**\n * Pull values on delete store\n * @param companyId\n * @param storeId\n * @param users\n */\nfunction cleanupOnStoreDelete(companyId, storeId, users) {\n  return Company.update({\n    _id: companyId\n  }, {\n    $pull: {\n      stores: storeId,\n      users: {$in: users}\n    }\n  })\n}\n\n/**\n * Delete a store\n */\nexports.deleteStore = (req, res) => {\n  const {storeId} = req.params;\n  const companyId = req.user.company;\n  let userPromises = [];\n  const storeUsers = [];\n  let savedStore;\n  // Find store\n  Store.findOne({_id: storeId, companyId})\n  .populate('users')\n  .then((store) => {\n    if (!store) {\n      res.status(404).json({err: 'Store not found'});\n      throw 'notFound';\n    }\n    // Keep reference to store\n    savedStore = store;\n    // Remove all users\n    store.users.forEach((user) => {\n      storeUsers.push(user._id);\n      userPromises.push(user.remove());\n    });\n    // Once users are gone, remove store\n    return Promise.all(userPromises);\n  })\n  // Remove store and users from company\n  .then(() => cleanupOnStoreDelete(companyId, storeId, storeUsers))\n  .then(() => {\n    // Remove store\n    return savedStore.remove();\n  })\n  .then(() => {\n    // success\n    return res.json();\n  })\n  .catch(async (err) => {\n\n    await ErrorLog.create({\n      method: 'deleteStore',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    if (err === 'notFound') {\n      return;\n    }\n    console.log('**************ERR IN DELETE STORE**********');\n    console.log(err);\n    return res.status(500).json(err);\n  });\n};\n\n/**\n * Delete an employee from a store\n */\nexports.deleteEmployee = (req, res) => {\n  const params = req.params;\n  const currentUser = req.user;\n  // Find employee\n  User.findById(params.employeeId)\n    // Remove employee\n  .then((employee) => {\n    if (currentUser.role === 'corporate-admin' && currentUser.company.toString() !== employee.company.toString()) {\n      throw 'permissions';\n    }\n    if (currentUser.role === 'manager' && currentUser.store.toString() !== employee.store.toString()) {\n      throw 'permissions';\n    }\n    return employee.remove();\n  })\n    // Get store\n  .then(() => {\n    return Store.findById(params.storeId);\n  })\n    // Remove employee from store\n  .then((store) => {\n    store.users.splice(store.users.indexOf(params.employeeId), 1);\n    store.save();\n  })\n  .then(() => {\n    return res.json();\n  })\n  .catch(async (err) => {\n\n    await ErrorLog.create({\n      method: 'deleteEmployee',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    if (err === 'permissions') {\n      return res.status(401).json();\n    } else {\n      console.log('**************ERR IN DELETE EMPLOYEE**********');\n      console.log(err);\n      return res.status(500).json(err);\n    }\n  });\n};\n\n/**\n * Update a company\n */\nexports.updateCompany = (req, res) => {\n  const companyId = req.params.companyId;\n  const body = req.body;\n  // Find company\n  Company.findById(companyId)\n  .then((company) => {\n    // Update\n    Object.assign(company, body);\n    return company.save();\n  })\n    // Success\n  .then((company) => {\n    return res.json(company);\n  })\n    // Failure\n  .catch(async (err) => {\n    console.log('**************ERR IN UPDATE COMPANY**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'updateCompany',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(400).json(err);\n  });\n};\n\n/**\n * Get store with buy rates\n */\nexports.getStoreWithBuyRates = (req, res) => {\n  const id = req.params.storeId;\n  Store.findById(id)\n  .populate('buyRateRelations')\n  .then(store => {\n    return res.json(store);\n  })\n  .catch(async err => {\n    console.log('**************ERR IN GET STORE WITH BUY RATES**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getStoreWithBuyRates',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  })\n};\n\n/**\n * Update store buy rates for a specific retailer\n */\nexports.updateStoreBuyRates = (req, res) => {\n  const {retailerId, storeId} = req.params;\n  // Get percentage buy rates\n  const buyRate = parseFloat(req.body.buyRate) / 100;\n  let storeRecord, retailerRecord, existingBuyRateId, buyRateId;\n  // Look for existing buy rate relationship\n  BuyRate.findOne({retailerId, storeId})\n  .then(buyRateRecord => {\n    // No buy rate set\n    if (!buyRateRecord) {\n      buyRateRecord = new BuyRate({storeId, retailerId, buyRate});\n      return buyRateRecord.save();\n    }\n    existingBuyRateId = buyRateRecord._id;\n    // Update existing buy rate\n    return BuyRate.update({_id: buyRateRecord._id}, {$set: {buyRate: buyRate}});\n  })\n    // Get buy rate id, and then store\n  .then(buyRate => {\n    buyRateId = buyRate._id || existingBuyRateId;\n    return Store.findById(storeId);\n  })\n    // Store buy rate ID on store\n  .then(store => {\n    storeRecord = store;\n    // Add relationship if necessary\n    if (!Array.isArray(store.buyRateRelations)) {\n      store.buyRateRelations = [];\n      store.buyRateRelations.push(buyRateId);\n      return store.save();\n    }\n    // Relationships exist, but not this one\n    if (store.buyRateRelations.indexOf(buyRateId) === -1) {\n      store.buyRateRelations.push(buyRateId);\n      return store.save();\n    }\n  })\n    // Get retailer\n  .then(() => {\n    return Retailer.findById(retailerId)\n  })\n    // Store buy rate ID on retailer\n  .then(retailer => {\n    retailerRecord = retailer;\n    // Add relationship if necessary\n    if (!Array.isArray(retailer.buyRateRelations)) {\n      retailer.buyRateRelations = [];\n      retailer.buyRateRelations.push(buyRateId);\n      return retailer.save();\n    }\n    // Relationships exist, but not this one\n    if (!Array.isArray(retailer.buyRateRelations) || retailer.buyRateRelations.indexOf(buyRateId) === -1) {\n      retailer.buyRateRelations.push(buyRateId);\n      return retailer.save();\n    }\n  })\n    // Return buy rate\n  .then(() => {\n    return res.json(buyRate);\n  })\n  .catch(async err => {\n    console.log('**************UPDATE STORE BUY RATES ERR**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'updateStoreBuyRates',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    res.status(500).json(err);\n  });\n};\n\n/**\n * Get cards in inventory\n * @param req\n * @param res\n */\nexport function getCardsInInventory(req, res) {\n  const params = req.params;\n  const findParams = {\n    company: params.companyId,\n    reconciliation: {$exists: false}\n  };\n  // Search for inventories for this store\n  if (params.storeId && isValidObjectId(params.storeId)) {\n    findParams.store = params.storeId;\n  }\n\n  let companySettings;\n\n  // Can't use Company.findById and Inventory.find with Promise.all because\n  // we want to call company.getSettings()\n  Company.findById(params.companyId)\n  .then(company => {\n    if (company) {\n      return company.getSettings();\n    }\n\n    throw 'companyNotFound';\n  })\n  .then(settings => {\n    companySettings = settings;\n\n    return Inventory.find(findParams)\n    .populate('card')\n    .populate('retailer')\n    .populate('customer')\n    .sort({created: -1});\n  })\n  .then(inventories => {\n    if (['manager', 'employee'].indexOf(req.user.role) !== -1) {\n      if (companySettings.useAlternateGCMGR) {\n        inventories = inventories.map(inventory => {\n          inventory.card.number = inventory.card.getLast4Digits();\n          return inventory;\n        });\n      }\n    }\n\n    return res.json(inventories);\n  })\n  .catch(async err => {\n    console.log('**************ERR IN GET CARDS IN INVENTORY**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getCardsInInventory',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  });\n}\n\n/**\n * Get cards in reconciliation\n *\n * @todo Update this, I can't be retrieving all reconciliations and then filtering, need to determine the query for just\n * retrieving inventories that aren't complete\n * @param req\n * @param res\n */\nexport function getCardsInReconciliation(req, res) {\n  const params = req.params;\n  // Retrieve\n  Inventory.find({\n      store: params.storeId,\n      company: params.companyId,\n      reconciliation: {$exists: true}\n    })\n    .populate('card')\n    .populate('retailer')\n    .populate('customer')\n    .populate('reconciliation')\n    .sort({created: -1})\n    .then(cards => {\n      cards = cards.filter(card => {\n        if (card && card.reconciliation) {\n          return !card.reconciliation.reconciliationComplete;\n        }\n        return false;\n      });\n      return res.json(cards)\n    })\n    .catch(async err => {\n      console.log('**************ERR IN GET CARDS IN RECONCILIATION**********');\n      console.log(err);\n\n      await ErrorLog.create({\n        method: 'getCardsInReconciliation',\n        controller: 'company.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n\n      return res.status(500).json(err);\n    });\n}\n\n/**\n * Get the last time this store was reconciled\n */\nexport function getLastReconciliationTime(req, res) {\n  const params = req.params;\n  Store.findById(params.storeId)\n  .then(store => res.json({reconciledLast: store.reconciledTime || null}))\n  .catch(async err => {\n    console.log('**************ERR IN GET LAST RECONCILIATION TIME**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getLastReconciliationTime',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  });\n}\n\n/**\n * Get the last time reconciliation was completed for this store\n */\nexport function reconciliationCompleteTime(req, res) {\n  const params = req.params;\n  Store.findById(params.storeId)\n    .then(store => res.json({reconcileCompleteTime: store.reconcileCompleteTime || null}))\n    .catch(async err => {\n      console.log('**************ERR IN RECONCILIATION COMPLETE TIME**********');\n      console.log(err);\n\n      await ErrorLog.create({\n        method: 'reconciliationCompleteTime',\n        controller: 'company.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n\n      return res.status(500).json(err);\n    });\n}\n\n/**\n * Reconcile available cards\n */\nexport async function reconcile(req, res) {\n  let matchedInventories = [];\n  const body = req.body;\n  const tzOffset = body.userTime.substr(-6);\n  const userTime = moment.utc().add(parseInt(tzOffset), 'hours').toDate();\n  let company;\n  // Find physical\n  const findParams = {\n    type: /physical/i,\n    reconciliation: {$exists: false},\n    soldToLiquidation: true\n  };\n  // Find electronic\n  const findElectronicParams = {\n    type: /electronic/i,\n    status: /SALE_NON_API/i,\n    reconciliation: {$exists: false},\n  };\n  // Find others\n  const findOthersParams = {\n    type: /electronic/i,\n    status: /SALE_NON_API/i,\n    reconciliation: {$exists: false},\n  };\n  let storeIdParam = req.params.storeId;\n  if (storeIdParam === 'all') {\n    storeIdParam = false;\n  } else if (!isValidObjectId(storeIdParam)) {\n    storeIdParam = req.user.store;\n  }\n  if (storeIdParam) {\n    findParams.store = storeIdParam;\n    findElectronicParams.store = storeIdParam;\n    findOthersParams.store = storeIdParam;\n  // Use company\n  } else {\n    company = req.user && req.user.company ? req.user.company : null;\n    if (company) {\n      findParams.company = company;\n      findElectronicParams.company = company;\n      findOthersParams.company = company;\n    }\n  }\n  // Make sure we have store or company\n  if (!storeIdParam && !company) {\n    return res.status(500).json({err: 'Unable to determine store or company'});\n  }\n  // Physical cards\n  Inventory.find(findParams)\n  .then(inventories => {\n    // Add to matched\n    if (inventories) {\n      matchedInventories = matchedInventories.concat(inventories);\n    }\n    // Electronic and status === SALE_CONFIRMED\n    return Inventory.find(findElectronicParams)\n  })\n  .then(inventories => {\n    if (inventories) {\n      // Add to matched\n      matchedInventories = matchedInventories.concat(inventories);\n    }\n    // Find electronic cards which are stuck or have otherwise not sold\n    return Inventory.find(findOthersParams)\n  })\n  // Convert these to physical\n  .then(inventories => {\n    if (inventories) {\n      // Add to matched\n      matchedInventories = matchedInventories.concat(inventories);\n    }\n  })\n  .then(() => {\n    matchedInventories = matchedInventories.filter((thisInventory, index, collection) => {\n      // Find index of this _id. If not the same as current index, filter it out, since duplicate\n      return collection.findIndex(t => t._id.toString() === thisInventory._id.toString()) === index;\n    });\n  })\n  .then(() => {\n    const matchPromises = [];\n    // Create reconciliation for each inventory\n    matchedInventories.forEach(thisMatch => {\n      const reconciliation = new Reconciliation({\n        inventory: thisMatch._id,\n        userTime: userTime,\n        created: userTime\n      });\n      matchPromises.push(reconciliation.save());\n    });\n    return Promise.all(matchPromises);\n  })\n    // Add reconciliations to cards\n  .then(reconciliations => {\n    const inventoryPromises = [];\n    reconciliations.forEach((reconciliation, index) => {\n      matchedInventories[index].reconciliation = reconciliation._id;\n      inventoryPromises.push(matchedInventories[index].save());\n    });\n    return Promise.all(inventoryPromises);\n  })\n  // Get store\n  .then(() => {\n    if (storeIdParam) {\n      return Store.findById(req.params.storeId);\n    }\n    return new Promise(resolve => resolve());\n  })\n  // Update the last time this store was reconciled\n  .then(store => {\n    if (store) {\n      store.reconciledTime = Date.now();\n      return store.save();\n    }\n    return new Promise(resolve => resolve());\n  })\n  .then((inventories) => res.json({data: inventories}))\n  .catch(async err => {\n    console.log('**************RECONCILIATION ERROR**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'reconcile',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  });\n}\n\n/**\n * Get denials since the last time reconciliation was closed\n */\nexport async function getDenials(req, res) {\n  // Get the last time reconciliation was closed\n  // Check for denials since the reconciliation close\n  const {pageSize = 10, page = 0} = req.params;\n  let begin = req.params.begin;\n  let end = req.params.end;\n  begin = moment.utc(begin).startOf('day');\n  end = moment.utc(end).endOf('day');\n  let retailers_with_denials = [];\n  let searchQuery = {};\n\n  if(req.query.hasOwnProperty('companyId')) {\n    if(req.query.hasOwnProperty('storeId')) {\n      searchQuery = {\n        company: req.query.companyId,\n        store: req.query.storeId\n      }\n    } else {\n      searchQuery = {\n        company: req.query.companyId\n      }\n    }\n  }\n  else if(req.query.hasOwnProperty('storeId')) {\n    searchQuery = {\n      store: req.query.storeId\n    }\n  }\n  searchQuery.created = {$gt: begin.toDate(), $lt: end.toDate()};\n\n  try {\n    const retailersCount = await Retailer.count({});\n    const retailers = await Retailer.find({})\n      .limit(parseInt(pageSize))\n      .skip(parseInt(page) * parseInt(pageSize)).lean();\n\n    for(let ret of retailers) {\n      let query = searchQuery;\n      query.retailer = ret._id;\n      const inventories = await Inventory.count(query);\n      query.rejected = true;\n      const rejected_inventories = await Inventory.count(query);\n      if(inventories && rejected_inventories) {\n        ret['percentOfDenials'] = rejected_inventories / inventories * 100;\n      } else {\n        ret['percentOfDenials'] = 0;\n      }\n      retailers_with_denials.push(ret);\n    }\n\n    return res.json({\n      data: retailers_with_denials,\n      total: retailersCount\n    });\n  }\n  catch(err) {\n    console.log('********************ERR IN GETDENIALS***********************');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getDenials',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  }\n}\n\n/**\n * Delete a single inventory and all associated records\n * @param inventoryId Inventory document ID\n */\nexport function doDeleteInventory(inventoryId) {\n  let inventory, card;\n  return Inventory.findById(inventoryId)\n    // Get inventory\n    .then(thisInventory => {\n      inventory = thisInventory;\n      // Get card\n      return Card.findById(inventory.card);\n    })\n    .then(thisCard => {\n      // Save reference to card\n      card = thisCard;\n      // Remove all card updates\n      return CardUpdate.remove({\n        _id: {\n          $in: card.updates\n        }\n      });\n    })\n    // Remove all deferred for this card\n    .then(() => {\n      return DeferredBalanceInquiry.remove({\n        card: card._id\n      });\n    })\n    // Remove reconciliations\n    .then(() => {\n      return Reconciliation.remove({\n        _id: inventory.reconciliation\n      });\n    })\n    // Remove inventory\n    .then(() => inventory.remove())\n    // Remove card\n    .then(() => card.remove());\n}\n\n/**\n * Delete an inventory record\n * @param req\n * @param res\n */\nexport function deleteInventory(req, res) {\n  // Delete this inventory ID\n  doDeleteInventory(req.params.inventoryId)\n  .then(() => res.json('deleted'))\n  .catch(async err => {\n    console.log('**************ERR IN DELETE INVENTORY**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'deleteInventory',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err)\n  });\n}\n\n/**\n * Mark cards currently in reconciliation as reconciled\n */\nexport async function markAsReconciled(req, res) {\n  const params = req.params;\n  const body = req.body;\n  const user = req.user;\n  const tzOffset = body.userTime.substr(-6);\n  const userTime = moment.utc().add(parseInt(tzOffset), 'hours').toDate();\n  let inventoriesToUse;\n  let store;\n  // Create batch\n  const batch = {\n    company: user.company,\n    inventories: []\n  };\n  const findParams = {\n    company: params.companyId,\n    reconciliation: {$exists: true}\n  };\n  if (params.storeId === 'all') {\n    store = isValidObjectId(params.storeId)\n  } else if (isValidObjectId(params.store)) {\n    store = params.store;\n  } else {\n    store = user.store;\n  }\n  if (store) {\n    batch.store = store;\n    findParams.store = store;\n  }\n  Inventory.find(findParams)\n  .populate('reconciliation')\n  .then(inventories => {\n    // only return those inventories that don't have a complete reconciliation\n    inventoriesToUse = inventories.filter(inventory => {\n      if (!inventory || !inventory.reconciliation) {\n        return false;\n      }\n      if (typeof inventory.reconciliation === 'object') {\n        return !inventory.reconciliation.reconciliationComplete;\n      }\n      return false;\n    });\n    const reconciliationPromises = [];\n    inventoriesToUse.forEach(thisInventory => {\n      reconciliationPromises.push(thisInventory.reconciliation.update({\n        $set: {\n          reconciliationComplete: true,\n          reconciliationCompleteUserTime: userTime\n        }\n      }));\n      // Add to batch\n      batch.inventories.push(thisInventory._id);\n    });\n    return Promise.all(reconciliationPromises);\n  })\n  .then(() => {\n    if (batch.inventories.length) {\n      const thisBatch = new Batch(batch);\n      return thisBatch.save();\n    }\n  })\n  .then(batch => {\n    if (!batch) {\n      return;\n    }\n    const batchPromises = [];\n    inventoriesToUse.map(thisInventory => {\n      batchPromises.push(thisInventory.update({\n        $set: {\n          batch: batch._id\n        }\n      }));\n    });\n    return Promise.all(batchPromises);\n  })\n  .then(batch => res.json({data: batch}))\n  .catch(async err => {\n    console.log('**************ERROR IN MARKED AS RECONCILED**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'markAsReconciled',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.json(err);\n  })\n}\n\n/**\n * Retrieve reconciliation for today\n * @param req\n * @param res\n */\nexport function getReconciliationToday(req, res) {\n  const storeParam = req.params.storeId;\n  const companyId = req.user.company;\n  let dbStores = [];\n  let thisStore = '';\n  if (storeParam === 'all') {\n    thisStore = '';\n  } else if (isValidObjectId(storeParam)) {\n    thisStore = storeParam;\n  } else {\n    thisStore = req.user.store;\n  }\n  const params = req.params;\n  const dayBegin = moment(params.today).startOf('day');\n  const dayEnd = moment(params.today).endOf('day');\n  let dbUser, dbReconciliations;\n  let promise;\n  if (thisStore === '') {\n    promise = Store.find({\n      companyId\n    });\n  } else {\n    promise = new Promise(resolve => resolve());\n  }\n  promise\n  .then(stores => {\n    if (stores) {\n      dbStores = stores.map(store => store._id.toString());\n    }\n    // Find user, company, store\n    return User.findById(req.user._id)\n      .populate('store')\n      .populate('company')\n  })\n  .then(user => {\n    dbUser = user;\n\n    return Promise.all([dbUser.company.getSettings(), Reconciliation.find({\n      reconciliationCompleteUserTime: {\n        $gt: dayBegin.toISOString(),\n        $lt: dayEnd.toISOString()\n      }\n    })\n      .populate({\n        path: 'inventory',\n        populate: [{\n          path: 'card',\n          model: 'Card'\n        }, {\n          path: 'retailer',\n          model: 'Retailer'\n        },{\n          path: 'customer',\n          model: 'Customer'\n        }]\n      })]);\n  })\n  .then(([companySettings, reconciliations]) => {\n    // Only return reconciliations for this store\n    dbReconciliations = reconciliations.filter(thisReconciliation => {\n      let storeId;\n      try {\n        storeId = thisReconciliation.inventory.store.toString();\n      } catch (e) {\n        storeId = '';\n      }\n      if (!thisStore) {\n        return dbStores.indexOf(storeId) > -1;\n      }\n      return storeId === thisStore.toString();\n    });\n\n    dbReconciliations = dbReconciliations.map(reconciliation => {\n      if (companySettings.useAlternateGCMGR && ['manager', 'employee'].indexOf(dbUser.role) !== -1) {\n        reconciliation.inventory.card.number = reconciliation.inventory.card.getLast4Digits();\n      }\n\n      return reconciliation;\n    });\n\n    if (dbReconciliations.length) {\n      // Get batch\n      if (dbReconciliations[0].inventory && dbReconciliations[0].inventory.batch) {\n        return Batch.findById(dbReconciliations[0].inventory.batch);\n      }\n    } else {\n      return false;\n    }\n  })\n  .then(batch => {\n    return res.json({\n      reconciliations: dbReconciliations,\n      user: dbUser,\n      batch: batch ? batch : {}\n    });\n  })\n  .catch(async err => {\n    console.log('**************ERROR IN RECONCILIATION TODAY**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getReconciliationToday',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err)\n  });\n}\n\n/**\n * Retrieve date range params for activity\n * @param params\n */\nfunction getActivityDateRange(params) {\n  const {beginDate, endDate, beginEnd, date} = params;\n  const findParams = {};\n  const begin = beginDate ? moment.utc(beginDate, 'MM-DD-YYYY').startOf('day') : moment().subtract(100, 'years');\n  const end = endDate ? moment.utc(endDate, 'MM-DD-YYYY').endOf('day') : moment().add(100, 'years');\n  if (beginDate && endDate) {\n    findParams.created = {$gt: begin.toDate(), $lt: end.toDate()};\n    // Begin date only\n  } else if (beginEnd === 'begin' && date) {\n    findParams.created = {$gt: begin.toDate()};\n  }\n  if (typeof params.companyId !== 'undefined') {\n    findParams.company = params.companyId;\n  }\n  if (typeof params.rejected && params.rejected === 'true') {\n    params.rejected = true;\n  }\n  // Only sold\n  findParams.soldToLiquidation = true;\n\n  return findParams;\n}\n\n/**\n * Expose inventory values\n * @param valuesToExpose\n * @param inventory\n * @returns {*}\n */\nfunction exposeInventoryValues(valuesToExpose, inventory) {\n  _.forEach(valuesToExpose, (value, key) => {\n    if (typeof value === 'string') {\n      inventory[key] = _.get(inventory, value, '');\n    } else if (_.isPlainObject(value)) {\n      inventory[key] = _.get(inventory, value.path, value.default);\n      // Modification function\n      if (value.modify) {\n        inventory[key] = value.modify(inventory[key])\n      }\n    }\n  });\n  return inventory;\n}\n\n/**\n * Inventory map reduce params\n */\nconst inventoryMapReduceParams = {\n  map: function () {\n    if (typeof counter !== 'number' || (counter >= begin && counter < end)) {\n      let verifiedBalance = typeof this.verifiedBalance === 'number' ? this.verifiedBalance : 0;\n      const claimedBalance = typeof this.balance === 'number' ? this.balance : 0;\n      const actualBalance = verifiedBalance || claimedBalance;\n      emit('balance', claimedBalance);\n      const buyRate = typeof this.buyRate === 'number' ? this.buyRate : 0;\n      emit('buyRate', buyRate);\n      const buyAmount = typeof this.buyAmount === 'number' ? this.buyAmount : 0;\n      emit('buyAmount', buyAmount);\n      // CQ paid\n      const margin = this.margin || 0.03;\n      const liquidationSoldFor = this.liquidationSoldFor || 0;\n      let rateThisInventory = typeof this.liquidationRate === 'number' ? this.liquidationRate : 0;\n      if (!rateThisInventory && claimedBalance) {\n        rateThisInventory = liquidationSoldFor / claimedBalance;\n      }\n      let cqPaid = actualBalance * (rateThisInventory - margin);\n\n      if (this.isTransaction) {\n        cqPaid = this.transaction.cqPaid;\n      }\n\n      if (typeof cqPaid !== 'number' || cqPaid < 0) {\n        cqPaid = 0;\n      }\n      // Service fee (CQ Paid for corporate, SMP paid for admin)\n      const serviceFee = cqPaid * 0.0075;\n      emit('serviceFee', serviceFee);\n      emit('cqPaid', cqPaid);\n      // Sold for\n      emit('soldFor', liquidationSoldFor);\n\n      if (this.isTransaction) {\n        emit('netAmount', this.transaction.netPayout);\n      } else {\n        // Company ACH search including a deduction\n        if (cqAchSearch && this.deduction) {\n          emit('netAmount', cqPaid * -1);\n          return;\n        } else {\n          emit('netAmount', cqPaid - serviceFee);\n        }\n      }\n      // Verified balance\n      emit('verifiedBalance', verifiedBalance);\n      // Paid for already\n      const cqHasPaid = typeof this.cqAch !== 'undefined';\n      // Has no CQ ACH\n      emit('cqOwes', cqHasPaid ? 0 : cqPaid - serviceFee);\n      // The amount outstanding which CQ has yet to pay. If 4 cards bought for $50 each, and we've paid for 3, this should be $50\n      emit('outstandingBuyAmount', cqHasPaid ? 0 : buyAmount);\n    }\n    if (typeof counter === 'number') {\n      counter++;\n    }\n  },\n  reduce: function (k, v) {\n    switch (k) {\n      case 'buyRate':\n        return (Array.sum(v)) / v.length;\n        break;\n      default:\n        return Array.sum(v);\n        break;\n    }\n  },\n  scope: {\n    counter: 0,\n    begin: 0,\n    end: 0,\n    corporate: false\n  }\n};\n\n/**\n * Create param map as an intermediate step for getting search params\n * @param map Incoming map\n * @param inventory Current inventory\n * @param inventoryParam\n * @param displayParam\n */\nfunction createParamMap(map, inventory, inventoryParam, displayParam = 'name') {\n  map[inventory[inventoryParam]._id] = {\n    [displayParam]: inventory[inventoryParam][displayParam],\n    _id: inventory[inventoryParam]._id\n  };\n  return map;\n}\n\n/**\n * Get params in date range for dropdowns\n */\nexport async function getParamsInRange(req, res) {\n  const query = req.query;\n  const {companyId} = query;\n  query.beginDate = query.dateBegin;\n  query.endDate = query.dateEnd;\n  if (query.beginDate && !query.endDate) {\n    query.beginEnd = 'begin';\n    query.date = query.beginDate;\n  } else if (query.endDate && !query.beginDate) {\n    query.beginEnd = 'end';\n    query.date = query.endDate;\n  }\n  if (companyId) {\n    query.companyId = companyId;\n  }\n  // Role for caching\n  query.userRole = req.user.role;\n  let batchMap = {}, companyMap = {}, storeMap = {};\n  const batchFinal = [], companyFinal = [], storeFinal = [];\n\n  try {\n    const cache = await InventoryParamCache.getCache(query);\n    // Return cache if it's still valid\n    if (cache) {\n      return res.json({batches: cache.batches, companies: cache.companies, stores: cache.stores});\n    }\n    const params = getActivityDateRange(query);\n    Inventory.find(params)\n      .populate('batch')\n      .populate('company')\n      .populate('store')\n      .then(async inventories => {\n        inventories.forEach(inventory => {\n          if (inventory.batch) {\n            batchMap = createParamMap(batchMap, inventory, 'batch', 'batchId');\n          }\n          if (inventory.company) {\n            companyMap = createParamMap(companyMap, inventory, 'company');\n          }\n          if (inventory.store) {\n            storeMap = createParamMap(storeMap, inventory, 'store');\n          }\n        });\n        _.forEach(batchMap, batch => batchFinal.push(batch));\n        _.forEach(companyMap, company => companyFinal.push(company));\n        _.forEach(storeMap, store => storeFinal.push(store));\n        // Store cache\n        if (!cache) {\n          await InventoryParamCache.storeCache(query, {\n            batches: batchFinal,\n            companies: companyFinal,\n            stores: storeFinal\n          });\n        }\n        return res.json({batches: batchFinal, companies: companyFinal, stores: storeFinal});\n      });\n  }\n  catch (err) {\n    console.log('**************ERROR IN RECONCILIATION TODAY**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getParamsInRange',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  }\n}\n\n/**\n * Get CQ paid\n * @param inventory\n * @param companyId\n * @param rejected Calculate rejected amount\n * @param totalRejections Total amount of rejections\n */\nfunction calculateValues(inventory, companyId, rejected, totalRejections) {\n  if (!_.isPlainObject(inventory)) {\n    inventory = inventory.toObject();\n  }\n  inventory.verifiedBalance = typeof inventory.verifiedBalance === 'number' ? inventory.verifiedBalance : null;\n  inventory.claimedBalance = typeof inventory.balance === 'number' ? inventory.balance : 0;\n  inventory.actualBalance = inventory.verifiedBalance || inventory.claimedBalance;\n  inventory.buyRate = typeof inventory.buyRate === 'number' ? inventory.buyRate : 0;\n  inventory.buyAmount = typeof inventory.buyAmount === 'number' ? inventory.buyAmount : 0;\n  inventory.margin = inventory.margin || 0.03;\n  inventory.liquidationSoldFor = inventory.liquidationSoldFor || 0;\n  if (inventory.credited || inventory.rejected) {\n    inventory.liquidationSoldFor = inventory.verifiedBalance * inventory.liquidationRate;\n  }\n  inventory.rateThisInventory = typeof inventory.liquidationRate === 'number' ? inventory.liquidationRate : 0;\n  if (!inventory.rateThisInventory && inventory.actualBalance) {\n    inventory.rateThisInventory = inventory.liquidationSoldFor / inventory.actualBalance;\n  }\n  const rateAfterMargin = inventory.rateThisInventory > inventory.margin ? inventory.rateThisInventory - inventory.margin : 0;\n  const serviceFeeRate = inventory.serviceFee || environment.serviceFee;\n  // Transactions handled differently\n  if (inventory.isTransaction) {\n    inventory.cqPaid = inventory.transaction.cqPaid;\n    inventory.displayMargin = true;\n    inventory.companyMargin = inventory.serviceFee + inventory.margin;\n  } else {\n    inventory.cqPaid = inventory.actualBalance * rateAfterMargin;\n    inventory.serviceFee = inventory.cqPaid * serviceFeeRate;\n    inventory.netAmount = inventory.cqPaid - inventory.serviceFee;\n  }\n  // Company margin\n  if (typeof inventory.verifiedBalance === 'number' && inventory.verifiedBalance < inventory.balance) {\n    inventory.companyMargin = null;\n    inventory.displayMargin = false;\n  } else if (!inventory.isTransaction) {\n    inventory.companyMargin = ((inventory.netAmount - inventory.buyAmount) / inventory.netAmount) * 100;\n    inventory.displayMargin = true;\n  }\n  // Company activity\n  inventory.corpRateThisInventory = rateAfterMargin;\n\n  const smps = smpNames;\n  // SMP\n  inventory.smp = smps[inventory.smp];\n  if (inventory.activityStatus) {\n    if (companyId) {\n      inventory.activityStatus = environment.statusDisplay[inventory.activityStatus];\n    }\n  } else {\n    inventory.activityStatus = 'Not shipped';\n  }\n\n  if (rejected) {\n    // Original buy amount\n    // const buyAmount = inventory.buyAmount;\n    // Buy amount after adjustment\n    inventory.realBuyAmount = inventory.buyRate * inventory.verifiedBalance;\n    inventory.amountOwed = inventory.buyAmount - inventory.realBuyAmount;\n    // Begin calculating for this customer\n    if (!totalRejections.user[inventory.customer._id.toString()]) {\n      totalRejections.user[inventory.customer._id.toString()] = {\n        owed: 0\n      };\n    }\n    totalRejections.user[inventory.customer._id.toString()].owed += inventory.amountOwed;\n  }\n  return inventory;\n}\n\n/**\n * Allow for search on multiple values for the listed items\n * @param query\n * @return {*}\n */\nfunction allowSearchOnMultipleValues(query) {\n  const searchMultiple = ['transactionPrefix', 'retailer', 'number', 'pin', 'balance', 'verifiedBalance', 'orderNumber', 'smpAch', 'cqAch', 'adminActivityNote'];\n  const splitQuery = Object.assign({}, query);\n  _.forEach(query, (item, key) => {\n    // Allow for split values\n    if (searchMultiple.indexOf(key) > -1 && query[key]) {\n      splitQuery[key] = query[key].split(',').join('|').trim();\n    // Trim values which cannot be split\n    } else if (typeof query[key] === 'string') {\n      splitQuery[key] = query[key].trim();\n    }\n  });\n  return splitQuery;\n}\n\n/**\n * Query activity\n * @param dateParams Date range\n * @param query\n * @param limit\n * @param skip\n * @param count Return only count\n */\nfunction queryActivity(dateParams, query, limit, skip, count = false) {\n  const promises = [];\n  // Sort by created by default\n  let sort = {created: 1};\n  // Allow for search on multiple values for specific inputs\n  query = allowSearchOnMultipleValues(query);\n  // Partial object ID match\n  if (query._id) {\n    query.$where = `this._id.toString().match(/${query._id}/i) || this.card.toString().match(/${query._id}/i)`;\n    delete query._id;\n  }\n  if (query.balance) {\n    query.balance = parseFloat(query.balance);\n  }\n  if (query.type) {\n    if (!(query.type instanceof RegExp)) {\n      query.type = new RegExp(query.type, 'i');\n    }\n  }\n  if (query.balance) {\n    const balance = parseFloat(query.balance);\n    query.$where = `String(this.balance).match(/^${balance}/) != null`;\n    delete query.balance;\n  }\n  if (typeof query.orderNumber === 'string') {\n    query.orderNumber = new RegExp('^' + query.orderNumber, 'i');\n  }\n  if (typeof query.liquidationSoldFor === 'string') {\n    query.orderNumber = new RegExp('^' + query.orderNumber, 'i');\n  }\n  if (typeof query.smpAch === 'string') {\n    query.smpAch = new RegExp('^' + query.smpAch, 'i');\n  }\n  if (typeof query.cqAch === 'string') {\n    query.$or = [\n      {cqAch: new RegExp('^' + query.cqAch, 'i')},\n      {deduction: new RegExp('^' + query.cqAch, 'i')}\n    ];\n    delete query.cqAch;\n  }\n  // Blank\n  if (!query.activityStatus && (!query.company || query.isAdmin)) {\n    query.activityStatus = {$exists: false};\n  }\n  // Search any\n  if (query.activityStatus === '-') {\n    // Don't modify original query object, or it'll mess up count`\n    query = Object.assign({}, query);\n    delete query.activityStatus;\n  }\n  // Sort by system time for admin\n  if (typeof query.isAdmin) {\n    delete query.isAdmin;\n    sort = {systemTime: 1};\n  }\n  // Transactions\n  if (query.isTransactions) {\n    query.transaction = {$exists: query.isTransactions === 'true'};\n    delete query.isTransactions;\n  }\n  // search by verified balance\n  if (query.verifiedBalance) {\n    const verifiedBalance = parseFloat(query.verifiedBalance);\n    query.$where = `String(this.verifiedBalance).match(/^${verifiedBalance}/) != null`;\n    delete query.verifiedBalance;\n  }\n  const findParams = Object.assign(query, dateParams);\n  // Custom sort\n  if (findParams.sort) {\n    sort = {};\n    const sortParts = findParams.sort.split(':');\n    sort[sortParts[0]] = parseInt(sortParts[1], 10);\n    delete findParams.sort;\n  }\n\n  if (query.balanceCardIssued) {\n    if (query.balanceCardIssued === 'true') {\n      query['transaction.nccCardValue'] = {$gt: 0};\n    }\n\n    if (query.balanceCardIssued === 'false') {\n      query['transaction.nccCardValue'] = 0;\n    }\n\n    delete query.balanceCardIssued;\n  }\n\n  if (query.transactionPrefix) {\n    if (query.transactionPrefix.indexOf(',') > -1) {\n      query.transactionPrefix = query.transactionPrefix.split(',').join('|');\n    }\n    query['transaction.prefix'] = new RegExp(query.transactionPrefix, 'i');\n    delete query.transactionPrefix;\n  }\n\n  // Query by a subdocument\n  const subdocumentConstraints = [\n    'number', 'pin', 'retailer', 'customerName', 'employeeName', 'customerPhone', 'customerEmail'\n  ];\n  let queryBySubdocument = false;\n\n  subdocumentConstraints.forEach(constraint => {\n    if (query[constraint]) {\n      queryBySubdocument = true;\n    }\n  });\n\n  if (queryBySubdocument) {\n    const cardParams = {}, retailerParams = {};\n    let searchCard = false;\n    if (query.number) {\n      searchCard = true;\n      if (!(query.number instanceof RegExp)) {\n        cardParams.number = new RegExp(query.number);\n      }\n      delete query.number;\n    }\n    if (query.pin) {\n      searchCard = true;\n      if (!(query.pin instanceof RegExp)) {\n        cardParams.pin = new RegExp(query.pin);\n      }\n      delete query.pin;\n    }\n    if (query.retailer) {\n      if (!(query.name instanceof RegExp)) {\n        retailerParams.name = new RegExp(query.retailer, 'i');\n      }\n      delete query.retailer;\n      // Search retailers\n      promises.push(\n        Retailer.find(retailerParams)\n          .then(retailers => {\n            findParams.retailer = {$in: retailers.map(retailer => retailer._id.toString())};\n          }));\n    }\n    // Search cards\n    if (searchCard) {\n      promises.push(\n        Card.find(cardParams)\n          .then(cards => {\n            findParams.card = {$in: cards.map(card => card._id.toString())};\n          }));\n    }\n\n    const customerQuery = {};\n\n    // Search customer\n    if (query.customerName) {\n      let customerNameRegExp;\n      if (!(query.customerName instanceof RegExp)) {\n        customerNameRegExp = new RegExp(query.customerName, 'i');\n      } else {\n        customerNameRegExp = query.customerName;\n      }\n\n      customerQuery.fullName = customerNameRegExp;\n    }\n\n    if (query.customerPhone) {\n      customerQuery.phone = new RegExp(query.customerPhone, 'i');\n    }\n\n    if (query.customerEmail) {\n      customerQuery.email = new RegExp(query.customerEmail, 'i');\n    }\n\n    if (!_.isEmpty(customerQuery)) {\n      promises.push(\n        Customer.find(customerQuery)\n        .then(customers => {\n          findParams.customer = {$in: customers.map(customer => customer._id.toString())};\n          delete query.customerName;\n          delete query.customerPhone;\n          delete query.customerEmail;\n        }));\n    }\n\n    // Search employee\n    if (query.employeeName) {\n      const employeeRegExp = new RegExp(query.employeeName.split(' ').join('|'), 'i');\n      promises.push(\n        // Check firstName and lastName as well because some users might not have the fullName attribute\n        User.find({$or: [{firstName: employeeRegExp}, {lastName: employeeRegExp}, {fullName: employeeRegExp}]})\n        .then(employees => {\n          findParams.user = {$in: employees.map(employee => employee._id.toString())};\n          delete query.employeeName;\n        })\n      );\n    }\n  }\n  if (!count) {\n    return Promise.all(promises)\n      .then(() => {\n        return Inventory.find(findParams)\n          .populate('customer')\n          .populate('retailer')\n          .populate('store')\n          .populate('company')\n          .populate('liquidationError')\n          .populate('card')\n          .populate('user')\n          .populate('reconciliation')\n          .populate('batch')\n          .sort(sort)\n          .limit(parseInt(limit))\n          .skip(parseInt(skip));\n      })\n      .then(inventories => {\n        return {\n          inventories,\n          findParams\n        };\n      });\n  } else {\n    return Promise.all(promises).then(() => { return Inventory.count(findParams); });\n  }\n}\n\n/**\n * Set inventory as unchanged\n * @param inventory\n * @return {Promise.<void>}\n */\nasync function setInventoryUnchanged(inventory) {\n  inventory = await Inventory.findById(inventory._id);\n  inventory.changed = false;\n  return inventory.save();\n}\n\n/**\n * Get inventory cache, or handle calculations on an inventory\n * @param inventory\n * @param companySettings\n * @param userRole Role of current user\n * @param companyId\n * @param getDenialsPayments Whether to calculate rejected amount\n * @param totalRejections Total rejections\n * @return {Promise.<T>}\n *\n * @todo We need to handle calculations of user total rejections even when getting cached values\n */\nasync function handleCalculations(inventory, companySettings, userRole, companyId, getDenialsPayments, totalRejections) {\n  // Don't use cache for rejections, since we need to total the values\n  if (!getDenialsPayments) {\n    let cache;\n    // Inventory unchanged, no need to recalculate\n    cache = await Inventory.getCalculatedValues(inventory);\n    if (cache) {\n      if (!_.isPlainObject(inventory)) {\n        inventory = inventory.toObject();\n      }\n      cache = cache.toObject();\n      // Combine cache with inventory\n      for (let i in cache) {\n        if (cache.hasOwnProperty(i)) {\n          if (['_id', 'inventory', 'created'].indexOf(i) !== -1) {\n            continue;\n          }\n          inventory[i] = cache[i];\n        }\n      }\n      inventory.isCached = true;\n      return Promise.resolve(inventory);\n    }\n  }\n  if (['manager', 'employee'].indexOf(userRole) !== -1 && companySettings.useAlternateGCMGR) {\n    inventory.card.number = inventory.card.getLast4Digits();\n  }\n  // Calculate values for this inventory\n  const thisInventory = calculateValues(inventory, companyId, getDenialsPayments, totalRejections);\n  return Promise.resolve(thisInventory);\n}\n\n/**\n * Calculate values (from cache if possible, else cache result)\n * @param inventories\n * @param companySettings\n * @param userRole\n * @param companyId\n * @param getDenialsPayments Whether to\n * @param rejections\n * @return {Promise.<void>}\n */\nasync function getCalculatedValues(inventories, companySettings, userRole, companyId, getDenialsPayments, rejections) {\n  // Inventories after all calculations or cache applications\n  const finalInventories = [];\n  // return inventories.forEach(getCalc);\n  for (let inventory of inventories) {\n    // Calculate inventory values\n    inventory = await handleCalculations(inventory, companySettings, userRole, companyId, getDenialsPayments, rejections);\n    // cache if necessary\n    if (!inventory.isCached) {\n      // Cache inventory values\n      await Inventory.cacheInventoryValues(inventory);\n    }\n    // Now that we're cached, set inventory as unchanged\n    await setInventoryUnchanged(inventory);\n    // Temp critical bug fix. We need to figure out which place is the best one to put this\n    // or put the mapped value along with the cached inventory data.\n    if (smpNames[inventory.smp]) {\n      inventory.smp = smpNames[inventory.smp];\n    }\n\n    // Add to final\n    finalInventories.push(inventory);\n  }\n  return Promise.resolve(finalInventories);\n}\n\n/**\n * Create CSV for an SMP\n * @param inventories\n * @param csvSmp\n * @param res\n * @return {Promise.<void>}\n */\nasync function getSmpCsv(inventories, csvSmp, res) {\n  let format = [];\n  const isCc = csvSmp.toLowerCase() === 'cardcash';\n  const isCp = csvSmp.toLowerCase() === 'cardpool';\n  const isGcz = csvSmp.toLowerCase() === 'giftcardzen';\n  const isCorporate = csvSmp.toLowerCase() === 'corporate';\n  if (isCp) {\n    format = ['retailer', 'number', 'pin', 'balance'];\n  } else if (isCc) {\n    format = ['Merchant', 'Number', 'Pin', 'Balance', 'REF'];\n  } else if (isGcz) {\n    format = ['Merchant', 'Card Number', 'PIN', 'Balance', 'Note'];\n    // Corporate, get all\n  } else if (isCorporate) {\n    format = ['userTime', 'cardId', 'retailer', 'number', 'pin', 'balance', 'verifiedBalance', 'netAmount', 'customerName', 'buyAmount', 'ach'];\n    // Add in denial amount for CSV denials\n    if (getDenialsPayments) {\n      format.splice(9, 0, 'rejectAmount');\n    }\n  } else {\n    throw 'unknownSmpFormat';\n  }\n  const csvWriter = CsvWriter({ headers: format});\n  const outFile = `salesCsv/${moment().format('YYYYMMDD')}-${csvSmp}.csv`;\n  // Remove existing file\n  if (fs.existsSync(outFile)) {\n    fs.unlinkSync(outFile);\n  }\n  csvWriter.pipe(fs.createWriteStream(outFile));\n  inventories = inventories.filter(inventory => {\n    let used = false;\n    // All for corporate\n    if (isCorporate) {\n      used = true;\n      // Electronic cards can have any status before sent to SMP\n    } else {\n      let activityStatus = typeof inventory.activityStatus === 'string' ? inventory.activityStatus.toLowerCase() : '';\n      activityStatus = activityStatus.replace(/\\s/g, '');\n      if (inventory.type.toLowerCase() === 'electronic') {\n        used = !activityStatus || activityStatus === 'notshipped';\n        // Physical cards must be received\n      } else {\n        used = activityStatus === 'receivedcq';\n      }\n    }\n    if (!used) {\n      return false;\n    }\n    // 2\n    if (isCc) {\n      return inventory.smp.toLowerCase() === 'cardcash' || inventory.smp === environment.smpIds.CARDCASH;\n      // 3\n    } else if (isCp) {\n      return inventory.smp.toLowerCase() === 'cardpool' || inventory.smp === environment.smpIds.CARDPOOL;\n    } else if (isGcz) {\n      return inventory.smp.toLowerCase() === 'giftcardzen' || inventory.smp === environment.smpIds.GIFTCARDZEN;\n      // Corporate\n    } else if (isCorporate) {\n      return inventory;\n    }\n  });\n  // Create columns\n  for (let inventory of inventories) {\n    let row;\n    if (inventory.card) {\n      // ['cardId', 'retailer', 'number', 'pin', 'balance', 'verifiedBalance', 'netAmount', 'customerName', 'buyAmount', 'ach']\n      if (csvSmp === 'corporate') {\n        inventory = calculateValues(inventory, companyId);\n        const netAmount = inventory.isTransaction ? inventory.transaction.netPayout : inventory.netAmount;\n        let customerName = '';\n        // Get customer name, which could be different based on which endpoint the cards sold from\n        if (inventory.card.lqCustomerName) {\n          customerName = inventory.card.lqCustomerName;\n        } else if (inventory.customer && inventory.customer.fullName) {\n          customerName = inventory.customer.fullName;\n        }\n        row = [moment(inventory.created).format(), inventory.card._id, inventory.retailer.name, inventory.card.number, inventory.card.pin,\n               inventory.balance.toFixed(2), inventory.verifiedBalance ? inventory.verifiedBalance.toFixed(2) : inventory.balance.toFixed(2),\n               netAmount.toFixed(2), customerName, inventory.buyAmount.toFixed(2), inventory.cqAch];\n        // Denials\n        if (getDenialsPayments) {\n          row.splice(9, 0, inventory.rejectAmount ? inventory.rejectAmount.toFixed(2) : `(${inventory.creditAmount.toFixed(2)})`);\n        }\n      } else {\n        // Get retailer object\n        if (_.isPlainObject(inventory.retailer)) {\n          inventory.retailer = await Retailer.findById(inventory.retailer._id);\n        }\n        const retailerName = inventory.retailer.getSmpSpelling()[csvSmp] || inventory.retailer.name;\n        row = [retailerName, inventory.card.number, inventory.card.pin, inventory.verifiedBalance || inventory.balance];\n      }\n      if (isCc || isGcz) {\n        row.push('');\n      }\n      csvWriter.write(row);\n    }\n  }\n  csvWriter.end();\n  res.json({url: `${environment.serverApiUrl}${outFile}`});\n}\n\n/**\n * Get all activity (admin revised)\n */\nexport async function getAllActivityRevised(req, res) {\n  try {\n    const {\n            perPage,\n            offset\n          } = req.params;\n    const query = req.query;\n    let companyId;\n    let companySettings = null;\n    // Download CSV for an SMP\n    let csvSmp;\n    // See if a CQ ACH search is being performed\n    let cqAchCompanySearch = !!query.cqAch;\n    // Whether to get denial payments\n    let getDenialsPayments = false;\n    let payments = [];\n    let meta = {};\n    // Date range params\n    const findParams = getActivityDateRange(req.params);\n    let inventories;\n    // Params after formatting for activity query\n    let finalFindParams;\n    const rejections = {\n      user: {}\n    };\n    // Store company ID and format for query\n    if (query.companyId) {\n      companyId = query.companyId;\n      query.company = query.companyId;\n      delete query.companyId;\n    }\n    // Download CSV\n    if (query.csvSmp) {\n      csvSmp = query.csvSmp;\n      delete query.csvSmp;\n    }\n    // Set rejected to boolean\n    if (query.rejected && query.rejected === 'true') {\n      // Either credited or rejected\n      query.$or = [\n        {credited: true},\n        {rejected: true}\n      ];\n      delete query.rejected;\n      getDenialsPayments = true;\n      // Search all statuses for denials\n      query.activityStatus = '-';\n    }\n    // User is admin\n    if (req.user.role === 'admin') {\n      query.isAdmin = true;\n    }\n    const queryRes = await queryActivity(findParams, query, perPage, offset, false, true);\n    inventories = queryRes.inventories;\n    finalFindParams = queryRes.findParams;\n    // If querying as corporate\n    const company = await Company.findById(companyId);\n    if (company) {\n      companySettings = await company.getSettings();\n    }\n    // Calculate values for activity\n    inventories = await getCalculatedValues(inventories, companySettings, req.user.role, companyId, getDenialsPayments, rejections);\n    // Set mongo grand total params\n    inventoryMapReduceParams.query = finalFindParams;\n    inventoryMapReduceParams.scope = {\n      counter: null,\n      begin: 0,\n      end: 0,\n      corporate: !!companyId,\n      cqAchSearch: cqAchCompanySearch\n    };\n    const mrRes = await Inventory.mapReduce(inventoryMapReduceParams);\n    meta.totals = {};\n    mrRes.forEach(item => {\n      meta.totals[item._id] = item.value;\n    });\n    if (getDenialsPayments) {\n      payments = await DenialPayments.find({\n        customer: query.customer\n      });\n    }\n    // Set mongo skip and limit\n    inventoryMapReduceParams.query = finalFindParams;\n    const paramsOffset = parseInt(offset);\n    const paramsPerPage = parseInt(perPage);\n    inventoryMapReduceParams.scope = {\n      counter: 0,\n      begin: paramsOffset,\n      end: (paramsPerPage + paramsOffset),\n      corporate: !!companyId,\n      cqAchSearch: cqAchCompanySearch\n    };\n    const mrPageRes = await Inventory.mapReduce(inventoryMapReduceParams);\n    meta.pageTotals = {};\n    mrPageRes.forEach(item => {\n      meta.pageTotals[item._id] = item.value;\n    });\n    const count = await queryActivity(findParams, query, perPage, offset, true);\n    meta.total = count;\n    meta.pages = Math.ceil(count / perPage);\n    // Download formatted for upload to an SMP\n    if (csvSmp) {\n      return getSmpCsv(inventories, csvSmp, res);\n    }\n    res.json({\n      inventories,\n      meta,\n      payments\n    });\n  } catch (err) {\n    console.log('**************GETALLACTIVITYREVISED ERR**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getAllActivityRevised',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json({err: err});\n  }\n}\n\n/**\n * Retrieve a company summary report\n */\nexport async function getCompanySummary(req, res) {\n  const {companyId} = req.params;\n  let begin = req.params.begin;\n  let end = req.params.end;\n  begin = moment.utc(begin).startOf('day');\n  end = moment.utc(end).endOf('day');\n  let dbStores;\n\n  try {\n    Store.find({\n      companyId\n    })\n      .then(stores => {\n        dbStores = stores;\n        const promises = [];\n        stores.forEach(store => {\n          inventoryMapReduceParams.query = {\n            created: {$gt: begin.toDate(), $lt: end.toDate()},\n            company: companyId,\n            store: store._id\n          };\n          inventoryMapReduceParams.scope = {\n            counter: null,\n            begin: 0,\n            end: 0,\n            corporate: true,\n            cqAchSearch: false\n          };\n          promises.push(Inventory.mapReduce(inventoryMapReduceParams));\n        });\n        return Promise.all(promises);\n      })\n      .then(results => {\n        const storesWithData = [];\n        for (let i = 0; i < results.length; i++) {\n          const resultObject = {};\n          results[i].forEach(result => {\n            resultObject[result._id] = result.value;\n          });\n          storesWithData.push({\n            store: dbStores[i],\n            data: resultObject\n          });\n        }\n        return res.json({data: storesWithData});\n      });\n  }\n  catch (err) {\n    console.log('**************getCompanySummary ERR**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getCompanySummary',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json({err: err});\n  }\n}\n\n/**\n * Sell a card which is not auto-sold\n */\nexport async function sellNonAutoCard(req, res) {\n  const user = req.user;\n  const params = req.params;\n  const isCorporateAdmin = user.role === 'corporate-admin';\n  // Wrong company\n  if (user.company.toString() !== params.companyId) {\n    return res.status(401).json();\n  }\n  // Right company, wrong store\n  if (!isCorporateAdmin) {\n    if (!user.store || user.store.toString() !== params.storeId) {\n      return res.status(401).json();\n    }\n  }\n  Inventory.findById(params.inventoryId)\n  .then(inventory => {\n    inventory.proceedWithSale = true;\n    inventory.save();\n  })\n  .then(inventory => res.json(inventory))\n  .catch(async err => {\n    console.log('**************ERR IN SELL NON AUTO CARD**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'sellNonAutoCard',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  });\n}\n\n/**\n * Check if there is inventory which needs to be reconciled\n */\nexport async function checkInventoryNeedsReconciled(req, res) {\n  const {companyId, storeId} = req.params;\n\n  try {\n    Inventory.find({\n      company: companyId,\n      store: storeId,\n      soldToLiquidation: true,\n      reconciliation: {\n        $exists: false\n      }\n    })\n      .then(inventories => {\n        return res.json({\n          needReconciliation: !!inventories.length\n        });\n      })\n  }\n  catch (err) {\n    console.log('**************ERR IN checkInventoryNeedsReconciled**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'checkInventoryNeedsReconciled',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  }\n}\n\n/**\n * Get receipts for a company\n */\nexport async function getReceipts(req, res) {\n  const {perPage = 20, offset = 0} = req.query;\n\n  try {\n    const receiptService = new ReceiptService();\n    const query = Object.assign({}, _.pick(req.query, ['created']), {company: req.user.company});\n    const [totalReceipts, receipts] = await Promise.all([\n      receiptService.getReceiptsCount(query),\n      receiptService.getReceipts(query, {perPage: parseInt(perPage, 10), offset: parseInt(offset, 10)})\n    ]);\n\n    res.json({\n      data: receipts,\n      pagination: {\n        total: totalReceipts\n      }\n    });\n  } catch (err) {\n    console.log('**************ERR IN GET RECEIPTS**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'getReceipts',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  }\n}\n\n/**\n * Delete one or more inventories\n */\nexport async function deleteInventories(req, res) {\n  const body = req.body;\n  const inventories = [];\n\n  try {\n    _.forEach(body, thisInventory => {\n      inventories.push(thisInventory);\n    });\n    Inventory.find({\n      _id: {\n        $in: inventories\n      }\n    })\n      .populate('card')\n      .then(async dbInventories => {\n        for (const inventory of dbInventories) {\n          if (inventory.transaction) {\n            await inventory.removeReserve();\n          }\n          await inventory.card.remove();\n          await inventory.remove();\n        }\n\n        return res.json();\n      });\n  }\n  catch (err) {\n    console.log('**************ERR IN deleteInventories**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'deleteInventories',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  }\n}\n\n/**\n * Change users role\n */\nexport async function updateRole(req, res){\n  const userId = req.params.userId;\n\n  try {\n    User.findById(userId)\n      .then(user => {\n        user.role = req.params.userRole;\n        user.save();\n      })\n      .then(() => res.json())\n  }\n  catch (err) {\n    console.log('**************ERR IN updateRole**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'updateRole',\n      controller: 'company.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json(err);\n  }\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}