{"version":3,"sources":["api/company/companySettings.model.js"],"names":["mongoose","require","Promise","Schema","CompanySettingsSchema","managersSetBuyRates","type","Boolean","default","autoSetBuyRates","employeesCanSeeSellRates","autoSell","margin","Number","min","max","minimumAdjustedDenialAmount","created","Date","now","updated","company","Types","ObjectId","ref","autoBuyRates","cardType","String","enum","get","convertToLowerCase","set","biOnly","customerDataRequired","useAlternateGCMGR","serviceFee","defaultServiceFee","setServiceFee","callbackUrl","timezone","getTimezone","pre","next","call","methods","getAutoBuyRates","model","findOne","settings","_id","dbBuyRates","create","save","whatever","toLowerCase","getters","module","exports"],"mappings":"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","file":"api/company/companySettings.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\n\nimport config from '../../config/environment';\nimport {ensureDecimals} from '../../helpers/validation';\n\nconst CompanySettingsSchema = new Schema({\n  // Managers only allowed to set buy rates\n  managersSetBuyRates: {type: Boolean, default: false},\n  // Auto-set buy rates based on sell-rates\n  autoSetBuyRates: {type: Boolean, default: false},\n  // Employees can see buy rates\n  employeesCanSeeSellRates: {type: Boolean, default: false},\n  // Auto-sell cards which are put in inventory\n  autoSell: {type: Boolean, default: true},\n  // Company margin\n  margin: {type: Number, default: 0.03, min: 0, max: 1},\n  // Minimum adjusted denial amount allowed to take on a sale\n  // So, if a customer owes 500 and this is set to 10%, the adjusted buy amount cannot be set less than $50\n  minimumAdjustedDenialAmount: {type: Number, default: 0.1, min: 0, max: 1},\n\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  updated: {\n    type: Date,\n    default: Date.now\n  },\n  // Company\n  company: {type: Schema.Types.ObjectId, ref: 'Company'},\n  // Auto buy rates\n  autoBuyRates: {type: Schema.Types.ObjectId, ref: 'AutoBuyRate'},\n  // Card type\n  cardType: {type: String, enum: ['electronic', 'physical', 'both'], default: 'both', get: convertToLowerCase, set: convertToLowerCase},\n  // BI only\n  biOnly: {type: Boolean, default: false},\n  // Must include information on customer when creating (address, phone, etc)\n  customerDataRequired: {type: Boolean, default: true},\n  // Use alternate GCMGR\n  useAlternateGCMGR: {type: Boolean, default: false},\n  // Service fee\n  serviceFee: {type: Number, get: defaultServiceFee, set: setServiceFee},\n  // Callback url for once a VB has been retrieved for a card\n  callbackUrl: String,\n  // Timezone\n  timezone: {type: String, get: getTimezone}\n});\n\n// Updated time\nCompanySettingsSchema\n  .pre('save', function(next) {\n    this.updated = new Date();\n    next();\n  });\n\n/**\n * Make sure that margin and service fee are decimals\n */\nCompanySettingsSchema.pre('validate', function (next) {\n  ensureDecimals.call(this, next, ['margin', 'serviceFee'], {margin: 0.1});\n});\n\nCompanySettingsSchema.methods = {\n  /**\n   * Get auto-buy settings, or create a new one\n   */\n  getAutoBuyRates: async function () {\n    let dbBuyRates = await (this.model('AutoBuyRate')).findOne({settings: this._id});\n    // Create auto buy rate\n    if (!dbBuyRates) {\n      dbBuyRates = await (this.model('AutoBuyRate')).create({settings: this._id});\n      this.autoBuyRates = dbBuyRates._id;\n      this.save();\n      return dbBuyRates;\n    }\n    return dbBuyRates;\n  }\n};\n\n/**\n * Default to 0.0075 for service fee, unless set\n * @param serviceFee\n * @return {*}\n */\nfunction defaultServiceFee(serviceFee) {\n  if (!serviceFee) {\n    return config.serviceFee;\n  }\n  return serviceFee;\n}\nfunction setServiceFee(serviceFee) {\n  return serviceFee;\n}\n\n// Make sure whatever is returned is lowercase\nfunction convertToLowerCase(whatever) {\n  if (whatever) {\n    return whatever.toLowerCase();\n  }\n}\n\nfunction getTimezone(timezone) {\n  if (timezone) {\n    return timezone;\n  }\n\n  return 'America/Los_Angeles';\n}\n\nCompanySettingsSchema.set('toJSON', {getters: true});\nCompanySettingsSchema.set('toObject', {getters: true});\n\nmodule.exports = mongoose.model('CompanySettings', CompanySettingsSchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}