{"version":3,"sources":["api/mailer/mailer.js"],"names":["helper","require","mail","fs","path","module","exports","from","setApiKey","key","apiKey","sendResetPasswordEmail","to","data","callback","Email","subject","templatePath","resolve","__dirname","readFile","err","template","replace","resetLink","content","Content","Mail","sg","request","emptyRequest","method","body","toJSON","API","sendAccountingEmail","recipients","email","setFrom","setSubject","personalization","Personalization","forEach","addTo","recipient","addPersonalization","addContent"],"mappings":";;AAAA,IAAMA,SAASC,QAAQ,UAAR,EAAoBC,IAAnC;AACA,IAAMC,KAAKF,QAAQ,IAAR,CAAX;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;;AAEAI,OAAOC,OAAP,GAAiB;AACf;;;;;AAKAC,QAAM,uBANS;;AAQf;;;;;AAKAC,aAAW,mBAAUC,GAAV,EAAe;AACxB,SAAKC,MAAL,GAAcD,GAAd;AACD,GAfc;;AAiBf;;;;;;;AAOAE,0BAAwB,gCAAUC,EAAV,EAAcC,IAAd,EAAoBC,QAApB,EAA8B;AAAA;;AACpD,QAAMP,OAAO,IAAIP,OAAOe,KAAX,CAAiB,KAAKR,IAAtB,CAAb;AACAK,SAAK,IAAIZ,OAAOe,KAAX,CAAiBH,EAAjB,CAAL;AACA,QAAMI,UAAU,qBAAhB;AACA,QAAMC,eAAeb,KAAKc,OAAL,CAAaC,SAAb,EAAwB,qCAAxB,CAArB;AACAhB,OAAGiB,QAAH,CAAYH,YAAZ,EAA0B,MAA1B,EAAkC,UAACI,GAAD,EAAMC,QAAN,EAAmB;AACnDA,iBAAWA,SAASC,OAAT,CAAiB,oBAAjB,EAAuCV,KAAKW,SAA5C,CAAX;AACA,UAAMC,UAAU,IAAIzB,OAAO0B,OAAX,CAAmB,WAAnB,EAAgCJ,QAAhC,CAAhB;AACA,UAAMpB,OAAO,IAAIF,OAAO2B,IAAX,CAAgBpB,IAAhB,EAAsBS,OAAtB,EAA+BJ,EAA/B,EAAmCa,OAAnC,CAAb;;AAEA,UAAMG,KAAK3B,QAAQ,UAAR,EAAoB,MAAKS,MAAzB,CAAX;AACA,UAAMmB,UAAUD,GAAGE,YAAH,CAAgB;AAC9BC,gBAAQ,MADsB;AAE9B3B,cAAM,eAFwB;AAG9B4B,cAAM9B,KAAK+B,MAAL;AAHwB,OAAhB,CAAhB;;AAMAL,SAAGM,GAAH,CAAOL,OAAP,EAAgBf,QAAhB;AACD,KAbD;AAcD,GA3Cc;;AA6Cf;;;;;;;;AAQAqB,uBAAqB,6BAAUC,UAAV,EAAsBpB,OAAtB,EAA+BgB,IAA/B,EAAqClB,QAArC,EAA+C;AAAA;;AAClE,QAAMuB,QAAQ,IAAIrC,OAAO2B,IAAX,EAAd;AACAU,UAAMC,OAAN,CAAc,IAAItC,OAAOe,KAAX,CAAiB,KAAKR,IAAtB,CAAd;AACA8B,UAAME,UAAN,CAAiBvB,OAAjB;;AAEA,QAAMwB,kBAAkB,IAAIxC,OAAOyC,eAAX,EAAxB;AACAL,eAAWM,OAAX,CAAmB,qBAAa;AAC9BF,sBAAgBG,KAAhB,CAAsB,IAAI3C,OAAOe,KAAX,CAAiB6B,SAAjB,CAAtB;AACD,KAFD;AAGAP,UAAMQ,kBAAN,CAAyBL,eAAzB;;AAEA,QAAMvB,eAAeb,KAAKc,OAAL,CAAaC,SAAb,EAAwB,yCAAxB,CAArB;AACAhB,OAAGiB,QAAH,CAAYH,YAAZ,EAA0B,MAA1B,EAAkC,UAACI,GAAD,EAAMC,QAAN,EAAmB;AACnDA,iBAAWA,SAASC,OAAT,CAAiB,eAAjB,EAAkCP,OAAlC,CAAX;AACAM,iBAAWA,SAASC,OAAT,CAAiB,iBAAjB,EAAoCS,IAApC,CAAX;;AAEAK,YAAMS,UAAN,CAAiB,IAAI9C,OAAO0B,OAAX,CAAmB,WAAnB,EAAgCJ,QAAhC,CAAjB;;AAEA,UAAMM,KAAK3B,QAAQ,UAAR,EAAoB,OAAKS,MAAzB,CAAX;AACA,UAAMmB,UAAUD,GAAGE,YAAH,CAAgB;AAC9BC,gBAAQ,MADsB;AAE9B3B,cAAM,eAFwB;AAG9B4B,cAAMK,MAAMJ,MAAN;AAHwB,OAAhB,CAAhB;;AAMAL,SAAGM,GAAH,CAAOL,OAAP,EAAgBf,QAAhB;AACD,KAdD;AAeD;AAhFc,CAAjB","file":"api/mailer/mailer.js","sourcesContent":["const helper = require('sendgrid').mail;\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  /**\n   * The from address that we'll be using to send emails\n   *\n   * @var {String}\n   */\n  from: 'noreply@cardquiry.com',\n\n  /**\n   * Set SendGrid API key\n   *\n   * @param {String} key\n   */\n  setApiKey: function (key) {\n    this.apiKey = key;\n  },\n\n  /**\n   * Send reset password email\n   *\n   * @param {String} to\n   * @param {{resetLink: String}} data\n   * @param {Function} callback\n   */\n  sendResetPasswordEmail: function (to, data, callback) {\n    const from = new helper.Email(this.from);\n    to = new helper.Email(to);\n    const subject = 'Reset Your Password';\n    const templatePath = path.resolve(__dirname, '../../../mail_templates/forgot.html');\n    fs.readFile(templatePath, 'utf8', (err, template) => {\n      template = template.replace(/{{{RESET_LINK}}}/gi, data.resetLink);\n      const content = new helper.Content('text/html', template);\n      const mail = new helper.Mail(from, subject, to, content);\n\n      const sg = require('sendgrid')(this.apiKey);\n      const request = sg.emptyRequest({\n        method: 'POST',\n        path: '/v3/mail/send',\n        body: mail.toJSON()\n      });\n\n      sg.API(request, callback);\n    });\n  },\n\n  /**\n   * Sends an email to a list of recipients\n   *\n   * @param {Array} recipients\n   * @param {String} subject\n   * @param {String} body\n   * @param {FUnction} callback\n   */\n  sendAccountingEmail: function (recipients, subject, body, callback) {\n    const email = new helper.Mail();\n    email.setFrom(new helper.Email(this.from));\n    email.setSubject(subject);\n\n    const personalization = new helper.Personalization();\n    recipients.forEach(recipient => {\n      personalization.addTo(new helper.Email(recipient));\n    });\n    email.addPersonalization(personalization);\n\n    const templatePath = path.resolve(__dirname, '../../../mail_templates/accounting.html')\n    fs.readFile(templatePath, 'utf8', (err, template) => {\n      template = template.replace(/{{{TITLE}}}/gi, subject);\n      template = template.replace(/{{{CONTENT}}}/gi, body);\n\n      email.addContent(new helper.Content('text/html', template));\n\n      const sg = require('sendgrid')(this.apiKey);\n      const request = sg.emptyRequest({\n        method: 'POST',\n        path: '/v3/mail/send',\n        body: email.toJSON(),\n      });\n\n      sg.API(request, callback);\n    });\n  }\n};\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}