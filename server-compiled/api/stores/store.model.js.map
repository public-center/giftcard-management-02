{"version":3,"sources":["api/stores/store.model.js"],"names":["mongoose","require","Promise","Schema","StoreSchema","name","type","String","required","address1","address2","city","state","zip","phone","created","Date","default","now","reconciledTime","reconcileCompleteTime","creditValuePercentage","Number","maxSpending","get","spend","payoutAmountPercentage","reserveTotal","total","companyId","Types","ObjectId","ref","users","buyRateRelations","reserves","callbackUrl","indexes","path","validate","length","respond","constructor","findOne","err","store","id","pre","next","call","set","virtuals","module","exports","model"],"mappings":"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","file":"api/stores/store.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\nimport {ensureDecimals} from '../../helpers/validation';\nimport createIndexes from '../../config/indexDb';\n\nconst StoreSchema = new Schema({\n  // Company name\n  name: {\n    type: String,\n    required: true\n  },\n  address1: String,\n  address2: String,\n  city: String,\n  state: String,\n  zip: String,\n  phone: String,\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  // The last time a store was reconciled\n  reconciledTime: Date,\n  // The last time a store closed a reconciliation for shipment\n  reconcileCompleteTime: Date,\n  // Credit value percentage\n  creditValuePercentage: {type: Number, default: 1.1},\n  // Maximum spending in total transaction\n  maxSpending: {type: Number, default: 30, get: function (spend) {\n    return typeof spend !== 'number' ? 30 : spend;\n  }},\n  // Payout percentage\n  payoutAmountPercentage: {type: Number, default: 0.5},\n  // Reserve total\n  reserveTotal: {type: Number, default: 0, get: function (total) {\n    if (!total) {\n      return 0;\n    }\n    return total;\n  }},\n  /**\n   * References\n   */\n  companyId: {type: Schema.Types.ObjectId, ref: 'Company'},\n  // Company users\n  users: [{type: Schema.Types.ObjectId, ref: 'User'}],\n  // Buy rate relations\n  buyRateRelations: [{type: Schema.Types.ObjectId, ref: 'BuyRate'}],\n  // Reserves\n  reserves: [{type: Schema.Types.ObjectId, ref: 'Reserve'}],\n  // Verified balance received callback URL\n  callbackUrl: String\n});\n\n// Indexes\nconst indexes = [\n  [{name: 1}],\n  [{companyId: 1}],\n];\ncreateIndexes(StoreSchema, indexes);\n\n/**\n * Validations\n */\n\n// Validate empty name\nStoreSchema\n  .path('name')\n  .validate(function (name) {\n    return name.length;\n  }, 'Store name cannot be blank');\n\n// Validate duplicate names\nStoreSchema\n  .path('name')\n  .validate(function(name, respond) {\n    this.constructor.findOne({\n      name,\n      companyId: this.companyId\n    }, (err, store) => {\n      if (err) {\n        throw err;\n      }\n      if (store) {\n        if (this.id === store.id) {\n          return respond(true);\n        }\n        return respond(false);\n      }\n      respond(true);\n    });\n  }, 'Store name is already taken');\n\n/**\n * Make sure that margin and service fee are decimals\n */\nStoreSchema.pre('validate', function (next) {\n  ensureDecimals.call(this, next, ['payoutAmountPercentage', 'creditValuePercentage'], {creditValuePercentage: 2})\n});\n\n// Return virtuals\nStoreSchema.set('toJSON', {\n  virtuals: true\n});\n\nmodule.exports = mongoose.model('Store', StoreSchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}