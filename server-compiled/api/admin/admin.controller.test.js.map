{"version":3,"sources":["api/admin/admin.controller.test.js"],"names":["test","describe","initDb","before","createAdminUser","createCompanyAndCorporateAdminUser","createStoreAndManager","createEmployee","createCustomer","smpMaxMin","cardCash","max","min","cardPool","giftcardZen","createRetailer","name","loginUserSaveToken","createCard","number","pin","addCardsToInventory","retailers","retailer","find","_id","cards","slice","length","inventories","map","card","inventory","update","$set","verifiedBalance","multi","rejectCard","it","request","get","Date","add","format","set","tokens","admin1","token","then","res","body","data","to","be","an","equal","total","percentOfDenials","parseFloat","toFixed","companies","id","stores"],"mappings":"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","file":"api/admin/admin.controller.test.js","sourcesContent":["import {expect} from 'chai';\nimport moment from 'moment';\n\nimport TestHelper from '../../tests/helpers';\nconst test = new TestHelper();\nimport {sellCardsInLiquidation, completeTransactions} from '../deferredBalanceInquiries/runDefers';\nimport Card from '../card/card.model';\nimport Inventory from '../inventory/inventory.model';\n\ndescribe('admin.controller.js', function () {\n  // Init DB for card controller\n  test.initDb();\n  // Init company and admin user\n  before(async function () {\n    // Create admin\n    await test.createAdminUser();\n    // Company and corporate admin\n    await test.createCompanyAndCorporateAdminUser();\n    await test.createCompanyAndCorporateAdminUser(2);\n    // Create store\n    await test.createStoreAndManager();\n    await test.createStoreAndManager(2);\n    // Create employees\n    await test.createEmployee();\n    await test.createEmployee(2);\n    // Create customers\n    await test.createCustomer();\n    await test.createCustomer(2);\n\n    const smpMaxMin = {\n      cardCash: {\n        max: 50,\n        min: 0\n      },\n      cardPool: {\n        max: 100,\n        min: 10\n      },\n      giftcardZen: {\n        max: null,\n        min: 100\n      }\n    };\n    // Create 2 retailers\n    await test.createRetailer({name: 'Retailer1', smpMaxMin});\n    await test.createRetailer({name: 'Retailer2', smpMaxMin});\n    // Login employees to sell cards\n    await test.loginUserSaveToken('employee');\n    await test.loginUserSaveToken('employee', 2);\n    // Login as admin\n    await test.loginUserSaveToken('admin');\n\n    // Sell cards for each retailer\n    await test.createCard(1, {});\n    await test.createCard(1, {number: '2', pin: '2'});\n    await test.createCard(2, {number: '3', pin: '3'});\n    await test.createCard(2, {number: '4', pin: '4'});\n    await test.createCard(2, {number: '5', pin: '5'});\n    // Add cards to inventory\n    await test.addCardsToInventory(1);\n    await test.addCardsToInventory(2);\n    // Reject some cards for each retailer\n    for (const retailer of test.retailers) {\n      let cards = await Card.find({retailer: retailer._id});\n      cards = cards.slice(0, cards.length - 1);\n      const inventories = cards.map(card => card.inventory);\n      await Inventory.update({_id: {'$in': inventories}}, {$set: {verifiedBalance: 0}}, {multi: true});\n      await test.rejectCard(inventories);\n    }\n    // Complete inventories\n    await sellCardsInLiquidation();\n  });\n\n  describe('GET /denials/begin/:begin/end/:end/:pageSize/:page', function () {\n    // inventory.rejected === true\n    it('should return array of retailers paginated with percentage of denials', async function () {\n      return await test.request\n        .get(`/api/admin/denials/begin/2015-01-01/end/${moment(new Date()).add(2, 'days').format('YYYY-MM-DD')}/10/0`)\n        .set('Authorization', `bearer ${test.tokens.admin1.token}`)\n        .then(async res => {\n          const body = res.body;\n          expect(body.data).to.be.an('array');\n          expect(body.data.length).to.be.equal(2);\n          expect(body.total).to.be.an('number');\n          // Test that denials are correct\n          expect(body.data[0].percentOfDenials).to.be.equal(50);\n          expect(parseFloat(body.data[1].percentOfDenials.toFixed(2))).to.be.equal(66.67);\n        });\n    });\n\n    // inventory.rejected === true && inventory.company === companyId\n    it('should return array of retailers paginated with percentage of denials from a selected company', async function () {\n      return await test.request\n        .get(`/api/admin/denials/begin/2015-01-01/end/${moment(new Date()).add(2, 'days').format('YYYY-MM-DD')}/10/0?companyId=${test.companies[0].id}`)\n        .set('Authorization', `bearer ${test.tokens.admin1.token}`)\n        .then(async res => {\n          const data = res.body.data;\n          expect(data).to.be.an('array');\n          expect(data.length).to.be.equal(2);\n          expect(res.body.total).to.be.an('number');\n\n          expect(data[0].percentOfDenials).to.be.equal(50);\n          expect(data[1].percentOfDenials).to.be.equal(0);\n        });\n    });\n\n    // inventory.rejected === true && inventory.store === storeId\n    it('should return array of retailers paginated with percentage of denials from a selected store', async function () {\n      return await test.request\n        .get(`/api/admin/denials/begin/2015-01-01/end/${moment(new Date()).add(2, 'days').format('YYYY-MM-DD')}/10/0?storeId=${test.stores[0].id}`)\n        .set('Authorization', `bearer ${test.tokens.admin1.token}`)\n        .then(async res => {\n          const data = res.body.data;\n          // const a = { store: ObjectId('59c1acf8d133a349e99425bb'), retailer: ObjectId('59c1acf8d133a349e99425c3') };\n          expect(data).to.be.an('array');\n          expect(data.length).to.be.equal(2);\n          expect(res.body.total).to.be.an('number');\n\n          expect(data[0].percentOfDenials).to.be.equal(50);\n          expect(data[1].percentOfDenials).to.be.equal(0);\n        });\n    });\n  });\n});\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}