{"version":3,"sources":["api/admin/admin.controller.js"],"names":["req","res","params","pageSize","page","begin","end","utc","startOf","endOf","retailersWithDenials","searchQuery","query","hasOwnProperty","company","companyId","store","storeId","created","$gt","toDate","$lt","count","retailersCount","find","limit","parseInt","skip","lean","retailers","retailer","Object","assign","_id","inventoriesThisRetailer","rejected","rejectedInventories","push","json","data","total","console","log","status","err","getDenials","update","$in","body","cardIds","$set","activityStatus","multi","create","method","controller","revision","stack","error","user","invalid","setCardStatus","cardId","findOne","card","getInventory","duplicateLogs","allLogs","logs","sort","key","retailerId","toString","number","pin","dup","remove","fixBiLogDuplications","Date","inventories","cards","duplicates","inventory","inventoriesToDelete","entries","id","index","score","calculateInventoryWeight","inventoryValues","orderNumber","cqAch","smpAch","credited","inventoryWeightTuples","tuple","toLowerCase","allZeroValues","length","fixInventoryDuplications","dateBegin","dateEnd","findParams","isTransaction","populate","dbInventories","findById","companySettings","getSettings","code","message","recalculateTransactions","apiCustomer","customer","type","pullType","multiplier","amountType","Promise","resolve","amount","splice","indexOf","rejectionTotal","save","updateCustomerRejectionCredit","name","ps","$or","$exists","$ne","fixLqApiCustomerCompany","force","types","dbInventory","toObject","thisType","sendCallbackFromActivity","getCardFromBiLog","aggregate","$group","$sum","biRequestLogs","$push","$match","dupes","hasMultipleCards","hasNoCards","dupe","a","b","hasValidLog","numValid","balance","responseCode","hasPrefix","numPrefix","prefix","indexWithCards","map","keep","numKeep","filter","thisLog","cleanUpBILogs","emailSubject","emailBody","emails","bookkeepingEmails","split","recipients","forEach","email","trim","sendAccountingEmail","response","errors","recreateRejectionHistory","addDeduction","systemTime","testCallback","then","promises","denialPayments","denial","all","buyAmount","realBuyAmount","buyRate","verifiedBalance","rejectAmount","rejectedDate","now","customers","reduce","curr","next","currentRejectionTotal","isNumber","e","denialPayment","ach","companies","Set","add","inv","size","deduction","catch","activityStatusValues","shipped","receivedCq","sentToSmp","receivedSmp","property","activityStatusValue","isNaN"],"mappings":"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","file":"api/admin/admin.controller.js","sourcesContent":["'use strict';\n\nimport '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport Inventory from '../inventory/inventory.model';\nimport DenialPayment from '../denialPayment/denialPayment.model';\nimport BiRequestLogs from '../biRequestLog/biRequestLog.model';\nimport CompanySettings from '../company/companySettings.model';\nimport Company from '../company/company.model';\nimport Customer from '../customer/customer.model';\nimport ErrorLog from '../errorLog/errorLog.model';\nimport Retailer from '../retailer/retailer.model';\nimport {recalculateTransactionAndReserve} from '../card/card.helpers';\nimport {DocumentNotFoundException, SellLimitViolationException} from '../../exceptions/exceptions';\nimport {resendCallback} from '../callbackLog/callbackLog.controller';\nimport {lqCustomerFind, apiCustomerValues} from '../lq/lq.controller';\nimport Card from '../card/card.model';\nimport {biCodes, retailersNoPin} from '../../config/environment';\nimport _ from 'lodash';\nimport {isObjectId} from '../../helpers/validation';\nimport mailer from '../mailer';\nimport {getGitRev} from '../../helpers/errors';\nimport moment from 'moment';\n\n\n/**\n * Get denials since the last time reconciliation was closed\n */\nexport async function getDenials(req, res) {\n  // Get the last time reconciliation was closed\n  // Check for denials since the reconciliation close\n  const {pageSize = 10, page = 0} = req.params;\n  let begin = req.params.begin;\n  let end = req.params.end;\n  begin = moment.utc(begin).startOf('day');\n  end = moment.utc(end).endOf('day');\n  let retailersWithDenials = [];\n  let searchQuery = {};\n\n  if(req.query.hasOwnProperty('companyId')) {\n    if(req.query.hasOwnProperty('storeId')) {\n      searchQuery = {\n        company: req.query.companyId,\n        store: req.query.storeId\n      }\n    } else {\n      searchQuery = {\n        company: req.query.companyId\n      }\n    }\n  }\n  else if(req.query.hasOwnProperty('storeId')) {\n    searchQuery = {\n      store: req.query.storeId\n    }\n  }\n  searchQuery.created = {$gt: begin.toDate(), $lt: end.toDate()};\n\n  try {\n    const retailersCount = await Retailer.count({});\n    const retailers = await Retailer.find({})\n      .limit(parseInt(pageSize))\n      .skip(parseInt(page) * parseInt(pageSize)).lean();\n\n    for(let retailer of retailers) {\n      let query = Object.assign({}, searchQuery);\n      query.retailer = retailer._id;\n      const inventoriesThisRetailer = await Inventory.count(query);\n      query.rejected = true;\n      const rejectedInventories = await Inventory.count(query);\n      if(inventoriesThisRetailer && rejectedInventories) {\n        retailer['percentOfDenials'] = rejectedInventories / inventoriesThisRetailer * 100;\n      } else {\n        retailer['percentOfDenials'] = 0;\n      }\n      retailersWithDenials.push(retailer);\n    }\n\n    return res.json({\n      data: retailersWithDenials,\n      total: retailersCount\n    });\n  }\n  catch(e) {\n    console.log('********************ERR IN ADMIN GETDENIALS***********************');\n    console.log(e);\n    return res.status(500).json({err: e});\n  }\n}\n\n/**\n * Set card statuses\n */\nexport async function setCardStatus(req, res) {\n  try {\n    await Inventory.update(\n      {\n        _id: {\n          $in: req.body.cardIds\n        }\n      },\n      {\n        $set: {\n          activityStatus: req.body.status\n        }\n      },\n      {multi: true});\n    res.json({});\n  }\n  catch(err) {\n    console.log('**************ERR IN SET CARD STATUS**********');\n\n    await ErrorLog.create({\n      method: 'setCardStatus',\n      controller: 'admin.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.json({\n      invalid: 'An error has occurred.'\n    });\n  }\n}\n\n/**\n * Recreate rejection history\n */\nexport function recreateRejectionHistory(req, res) {\n  DenialPayment.find({})\n  .then(denialPayments => {\n    const promises = [];\n    denialPayments.forEach(denial => {\n      promises.push(denial.remove());\n    });\n    return Promise.all(promises);\n  })\n  .then(() => {\n    return Inventory.find({\n      rejected: true\n    })\n    .populate('customer');\n  })\n  .then(inventories => {\n    const promises = [];\n    inventories.forEach(inventory => {\n      // Update rejection amounts\n      const buyAmount = inventory.buyAmount;\n      // Buy amount after adjustment\n      const realBuyAmount = inventory.buyRate * inventory.verifiedBalance;\n      if (realBuyAmount < buyAmount) {\n        const rejectAmount = buyAmount - realBuyAmount;\n        // Set rejected\n        inventory.rejectedDate = Date.now();\n        inventory.rejectAmount = rejectAmount;\n        promises.push(inventory.save());\n      }\n    });\n    return Promise.all(promises);\n  })\n  .then(inventories => {\n    const customers = {};\n    inventories.forEach(inventory => {\n      // Create collection of customers with inventories\n      if (!customers[inventory.customer._id]) {\n        customers[inventory.customer._id] = {\n          inventories: [],\n          rejectionTotal: 0,\n          customer: inventory.customer\n        };\n      }\n      customers[inventory.customer._id].inventories.push(inventory);\n    });\n    return customers;\n  })\n  .then(customers => {\n    const promises = [];\n    _.forEach(customers, customer => {\n      customer.rejectionTotal = customer.inventories.reduce((curr, next) => {\n        return curr + next.rejectAmount;\n      }, 0);\n      let currentRejectionTotal = 0;\n      // Get current reject value\n      try {\n        if (_.isNumber(currentRejectionTotal)) {\n          currentRejectionTotal = customer.customer.rejectionTotal;\n        }\n      } catch (e) {\n        currentRejectionTotal = 0;\n      }\n      let denialPayment = null;\n      // If less than it should be, create a denial payment\n      if (currentRejectionTotal < customer.rejectionTotal) {\n        denialPayment = new DenialPayment({\n          customer: customer.customer._id,\n          amount: customer.rejectionTotal - currentRejectionTotal\n        });\n        promises.push(denialPayment.save());\n      }\n      promises.push(customer.customer.save());\n    });\n  })\n  .then(() => res.json({}));\n}\n\n/**\n * Add deduction\n */\nexport function addDeduction(req, res) {\n  const {ach, inventory} = req.body;\n  let company;\n\n  Inventory.find({cqAch: ach})\n  .then(inventories => {\n    if (! inventories.length) {\n      throw 'achNotFound';\n    }\n\n    if (inventories.length > 1) {\n      const companies = new Set();\n      inventories.forEach(inv => {\n        companies.add(inv.company.toString());\n      });\n\n      if (companies.size > 1) {\n        throw 'multipleCompanies';\n      }\n    }\n\n    company = inventories[0].company;\n\n    return Inventory.findById(inventory);\n  })\n  .then(dbInventory => {\n    if (! dbInventory) {\n      throw 'inventoryNotFound';\n    }\n\n    if (dbInventory.company.toString() !== company.toString()) {\n      throw 'differentCompany';\n    }\n\n    dbInventory.deduction = ach;\n    dbInventory.save();\n\n    return res.json({});\n  })\n  .catch(async err => {\n\n    if (err === 'achNotFound') {\n      return res.status(400).json({error: \"The ACH could not be found in the database.\"});\n    }\n\n    if (err === 'inventoryNotFound') {\n      return res.status(400).json({error: \"Invalid inventory specified.\"});\n    }\n\n    if (err === 'multipleCompanies') {\n      return res.status(400).json({error: \"This ACH belongs to multiple companies.\"});\n    }\n\n    if (err === 'differentCompany') {\n      return res.status(400).json({error: \"This ACH belongs to a different company.\"});\n    }\n\n    console.log('**************ERR IN ADDDEDUCTION**************');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'addDeduction',\n      controller: 'admin.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json({error: \"Something went wrong.\"});\n  });\n}\n\n/**\n * Fill in system time on existing cards\n */\nexport function systemTime(req, res) {\n  Inventory.find()\n  .then(inventories => {\n    const promises = [];\n    inventories.forEach(inventory => {\n      if (!inventory.systemTime) {\n        inventory.systemTime = inventory.created;\n        promises.push(inventory.save());\n      }\n    });\n    return Promise.all(promises);\n  })\n  .then(() => res.json({}))\n}\n\nexport function testCallback(req, res) {\n  console.log(req.body);\n  res.json({});\n}\n\nasync function getInventory(cardId) {\n  return Inventory.findOne({card: cardId});\n}\n\n/**\n * Fix BI log duplications\n * @return {Promise.<void>}\n */\nexport async function fixBiLogDuplications(req, res) {\n  const duplicateLogs = {};\n  const allLogs = {};\n  let logs;\n  logs = await BiRequestLogs.find({}).sort({created: -1});\n  for (const log of logs) {\n    const key = `${log.retailerId.toString()}.${log.number}.${log.pin}`;\n    // Duplicate\n    if (allLogs[key]) {\n      // Duplicate already exists in structure\n      if (duplicateLogs[key]) {\n        duplicateLogs[key].push(log._id);\n      // First duplicate instance, push duplicate and original\n      } else {\n        duplicateLogs[key] = [log._id];\n      }\n    } else {\n      allLogs[key] = log._id;\n    }\n  }\n  // Remove duplicates\n  for (const dup in duplicateLogs) {\n    await BiRequestLogs.remove({\n      _id: {$in: duplicateLogs[dup]}\n    });\n  }\n  return res.json({});\n}\n\n/**\n * Calculate an inventory's \"completeness\" score\n * @param inventory\n * @return {number}\n */\nfunction calculateInventoryWeight(inventory) {\n  // Assign partial weight to activity status, since we need to compare them, but giving entire points would throw everything off\n  const activityStatusValues = {\n    'notShipped': 0,\n    shipped: 0.2,\n    receivedCq: 0.4,\n    sentToSmp: 0.6,\n    receivedSmp: 0.8,\n    rejected: 0.1\n  };\n  // Inventory \"score\" to see how complete it is based on admin activity interaction\n  let score = 0;\n  // Iterate the values typically modified from admin activity\n  ['orderNumber', 'cqAch', 'smpAch', 'credited', 'rejected', 'activityStatus'].forEach(property => {\n    if (inventory[property]) {\n      score = score + 1;\n    }\n    if (property === 'activityStatus') {\n      const activityStatusValue = activityStatusValues[inventory[property]];\n      if (!isNaN(activityStatusValue)) {\n        score = score + activityStatusValue;\n      }\n    }\n  });\n  return score;\n}\n\n/**\n * Fix inventory duplications (find multiple inventories which apply to the same card)\n */\nexport async function fixInventoryDuplications(req, res) {\n  const inventories = await Inventory.find({created: {$gt: new Date('2017-06-01')}});\n  const cards = {};\n  const duplicates = {}     ;\n  for (const inventory of inventories) {\n    // First instance\n    if (!cards[inventory.card.toString()]) {\n      cards[inventory.card.toString()] = inventory;\n    // Not first instance\n    } else {\n      // First duplicate\n      if (!duplicates[inventory.card.toString()]) {\n        duplicates[inventory.card.toString()] = [cards[inventory.card.toString()], inventory];\n      // Additional duplicates\n      } else {\n        duplicates[inventory.card.toString()].push(inventory);\n      }\n    }\n  }\n  const inventoriesToDelete = {};\n  for (const [id, inventories] of Object.entries(duplicates)) {\n    for (const [index, inventory] of inventories.entries()) {\n      // Init new comparison, assume it's the first one to delete\n      if (!index) {\n        inventoriesToDelete[inventory.card.toString()] = [];\n      }\n\n      const score = calculateInventoryWeight(inventory);\n      // inventoriesToDelete[inventory.card.toString()].push({score, inventory: inventory._id});\n      const inventoryValues = {\n        '_id'           : inventory._id,\n        'orderNumber'   : inventory.orderNumber,\n        'cqAch'         : inventory.cqAch,\n        'smpAch'        : inventory.smpAch,\n        'credited'      : inventory.credited,\n        'rejected'      : inventory.rejected,\n        'activityStatus': inventory.activityStatus\n      };\n      inventoriesToDelete[inventory.card.toString()].push({score, inventory: inventoryValues});\n    }\n  }\n  for (const [cardId, inventoryWeightTuples] of Object.entries(inventoriesToDelete)) {\n    // Remove those which are marked duplicate\n    for (const tuple of inventoryWeightTuples) {\n      if (tuple.inventory.orderNumber && tuple.inventory.orderNumber.toLowerCase() === 'duplicate') {\n        await Inventory.remove({_id: tuple.inventory._id});\n      }\n    }\n    // make sure we don't delete all inventories\n    let allZeroValues = false;\n    // Delete all of the 0 scored\n    for (const tuple of inventoryWeightTuples) {\n      if (tuple.score > 0) {\n        allZeroValues = true;\n      }\n    }\n    // If we have a zero value, delete it so long as there are other inventories\n    if (!allZeroValues) {\n      for (const tuple of inventoryWeightTuples) {\n        await Inventory.remove({_id: tuple.inventory._id});\n      }\n    // All zero values, just delete all but one\n    } else {\n      const count = inventoryWeightTuples.length;\n      for (const inventory of inventoryWeightTuples.entries()) {\n        // Remove all but one at random\n        if (inventory[0] < count) {\n          await Inventory.remove({_id: inventory[1].inventory._id});\n        }\n      }\n    }\n  }\n  return res.json({});\n}\n\n/***\n * Recalculate transaction values\n */\nexport async function recalculateTransactions(req, res) {\n  const {inventories, dateBegin = null, dateEnd = null} = req.body;\n  let findParams = {};\n  if (inventories) {\n    findParams = {\n      _id: {\n        $in: inventories\n      },\n      isTransaction: true\n    };\n  } else if (dateBegin && dateEnd) {\n    findParams = {\n      created: {\n        $gt: new Date(dateBegin),\n        $lt: new Date(dateEnd)\n      },\n      isTransaction: true\n    };\n  } else {\n    return res.status(400).json({err: 'inventories or dateBegin and dateEnd are needed'})\n  }\n  try {\n    const dbInventories = await Inventory.find(findParams)\n    .populate('retailer');\n    // Redo calculations for each transaction\n    for (let inventory of dbInventories) {\n      const companyId = inventory.company;\n      // Get settings\n      let companySettings = await CompanySettings.findById(companyId);\n      // No settings yet\n      if (!companySettings) {\n        const company = await Company.findById(companyId);\n        companySettings = await company.getSettings();\n      }\n      await recalculateTransactionAndReserve(inventory);\n    }\n    return res.json({});\n  } catch (err) {\n    console.log('**************ADMIN RECALCULATE TRANSACTION ERROR**********');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'recalculateTransactions',\n      controller: 'admin.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    if (err instanceof DocumentNotFoundException || err instanceof SellLimitViolationException) {\n      return res.status(err.code).json({err: err.message});\n    } else {\n      res.status(500).json({err: 'Unable to recalculate transactions'});\n    }\n  }\n}\n\n/**\n * Update customer rejections or credits\n * @param apiCustomer Default API customer\n * @param customer Correct company customer\n * @param inventory Inventory on wrong customer\n * @param type \"rejection\" or \"credit\" or \"none\"\n * @return {Promise.<*>}\n */\nasync function updateCustomerRejectionCredit(apiCustomer, customer, inventory, type = 'none') {\n  let pullType = 'credits';\n  let multiplier = 1;\n  let amountType = 'creditAmount';\n  if (type === 'rejection') {\n    pullType = 'rejections';\n    multiplier = -1;\n    amountType = 'rejectAmount';\n  }\n  // Set customer on inventory\n  await inventory.update({\n    $set: {\n      customer: customer._id\n    }\n  });\n  // Nothing to do on non-rejection/credits\n  if (type === 'none') {\n    return Promise.resolve([apiCustomer, customer]);\n  } else {\n    if (type === 'credit') {\n      // Remove the existing denial payment\n      DenialPayment.remove({\n        customer: apiCustomer._id,\n        amount: inventory[amountType]\n      });\n      // Add in new denial payment\n      await DenialPayment.create({\n        customer: customer._id,\n        amount: inventory[amountType]\n      });\n    }\n    // Update API customer\n    apiCustomer[pullType].splice(apiCustomer[pullType].indexOf(inventory._id), 1);\n    apiCustomer.rejectionTotal = apiCustomer.rejectionTotal - (inventory[amountType] * multiplier);\n    apiCustomer = await apiCustomer.save();\n    // Update correct customer\n    customer[pullType].splice(customer[pullType].indexOf(inventory._id, 1));\n    customer.rejectionTotal = customer.rejectionTotal - (inventory[amountType] * multiplier);\n    customer = await customer.save();\n    return Promise.resolve([apiCustomer, customer]);\n  }\n}\n\n/**\n * Change generic API_CUSTOMER to a company specific API customer\n */\nexport async function fixLqApiCustomerCompany(req, res) {\n  const ps = await Company.findOne({name: /posting/i});\n  // Get\n  let apiCustomer = await Customer.find(Object.assign({}, lqCustomerFind, {$or: [\n    {company: {$exists: false}},\n    {company: ps._id}\n  ]}));\n  // Make sure we're not running this multiple times, as it might have some crazy side effects\n  if (apiCustomer.length > 1) {\n    return res.status(400).json({err: 'Already run'});\n  }\n  apiCustomer = apiCustomer[0];\n  // Found customer\n  if (apiCustomer) {\n    // Make the default customer into PS's\n    if (!apiCustomer.company) {\n      apiCustomer.company = ps._id;\n      await apiCustomer.save();\n    }\n  } else {\n    // // Don't allow this to be run more than once\n    return res.status(400).json({err: 'Unable to find API customer'});\n  }\n  // Get all inventories by the API customer\n  const inventories = await Inventory.find({customer: apiCustomer._id, company: {$ne: ps._id}});\n\n  // Find inventories which do not belong to PS\n  for (const inventory of inventories) {\n    // Non-PS\n    if (inventory.company.toString() !== ps._id.toString()) {\n      // Create API customer for this company if it doesn't already exist\n      let customer = await Customer.findOne(apiCustomerValues(inventory.company));\n      if (!customer) {\n        customer = await Customer.create(apiCustomerValues(inventory.company));\n      }\n      let type = 'none';\n      if (inventory.credited || inventory.rejected) {\n        type = inventory.credited ? 'credit' : 'rejection'\n      }\n      // See if this inventory has rejections/credits that need to be moved\n      [apiCustomer, customer] = await updateCustomerRejectionCredit(apiCustomer, customer, inventory, type);\n    }\n  }\n  return res.json({});\n}\n\n/**\n * Send a cqPaymentInitiated callback for each inventory specified in the request body\n */\nexport async function sendCallbackFromActivity(req, res) {\n  const {inventories, type = 'cqPaymentInitiated', force = false} = req.body;\n  let types = [];\n  if (type === 'denial') {\n    types = ['denial', 'credit'];\n  } else {\n    types = [type];\n  }\n\n  for (const inventory of inventories) {\n    const dbInventory = await Inventory.findById(inventory).populate('card');\n    const card = Object.assign({}, dbInventory.card.toObject());\n    card.inventory = dbInventory.toObject();\n    for (const thisType of types) {\n      await resendCallback(null, card, thisType, force);\n    }\n  }\n\n  return res.json({});\n}\n\n/**\n * Retrieve card from log\n * @param log\n * @return {Promise.<*>}\n */\nasync function getCardFromBiLog(log) {\n  let findParams = {};\n  if (log.card) {\n    findParams.card = log.card;\n  } else {\n    findParams = {\n      retailer: log.retailer,\n      number: log.number,\n    };\n    if (log.pin) {\n      findParams.pin = log.pin;\n    }\n  }\n  return await Card.findOne(findParams);\n}\n\n/**\n * Clean up BI logs with the following logic:\n *\n * First, check for any duplicates. If duplicates were found, we'd prioritise\n * the ones that have verifiedBalance set, followed by the date they were created.\n * Any duplicates that don't have responseCode will be deleted.\n * Lastly, delete any remaining logs that have no responseCode, even if they're not duplicates.\n */\nexport async function cleanUpBILogs(req, res) {\n  try {\n    await BiRequestLogs.remove({created: {$lt: new Date('2017-07-01')}});\n    const dupes = await BiRequestLogs.aggregate([\n      {\n        $group: {\n          _id: {number: \"$number\", retailerId: \"$retailerId\"},\n          count: {$sum: 1},\n          biRequestLogs: {$push: \"$$ROOT\"}\n        }\n      },\n      {\n        $match: {count: {$gt: 1}}\n      },\n    ]);\n    let hasMultipleCards = 0;\n    let hasNoCards = 0;\n\n    for (const dupe of dupes) {\n      let card;\n      let logs = dupe.biRequestLogs.sort((a, b) => {\n        // Sort by date\n        if (a.created === b.created) {\n          return 0;\n        }\n        return a.created < b.created ? 1 : -1;\n      });\n\n      let hasValidLog = false;\n      let numValid = 0;\n      // Make sure any group that requires PINs doesn't have multiple results\n      for (const log of logs) {\n        if (retailersNoPin[log.retailerId.toString()]) {\n          break;\n        }\n        if (typeof log.balance === 'number' && !(log.balance === 0 && log.responseCode !== biCodes.invalid)) {\n          hasValidLog = true;\n          numValid++;\n        }\n      }\n      if (hasValidLog && numValid > 1) {\n        console.log('**************NUM VALID**********');\n        console.log(numValid);\n        console.log(logs);\n      }\n      // Make sure any group doesn't have multiple prefixes\n      let hasPrefix = false;\n      let numPrefix = 0;\n      for (const log of logs) {\n        if (log.prefix) {\n          hasPrefix = true;\n          numPrefix++;\n        }\n      }\n      if (hasPrefix) {\n        console.log('**************HAS PREFIX**********');\n        console.log(numPrefix);\n      }\n      // Find the ones with cards attached\n      const indexWithCards = [];\n      for (const [index, log] of logs.entries()) {\n        card = await getCardFromBiLog(log);\n        if (card) {\n          indexWithCards.push(index);\n        }\n      }\n      if (!indexWithCards.length) {\n        hasNoCards++;\n      } else if (indexWithCards.length > 1) {\n        hasMultipleCards++;\n      } else {\n        hasNoCards++;\n      }\n      // logs = logs.map(log => log.toObject());\n      /**\n       * Now that we know we have a steady set, find the ones to delete\n       * @type {Array}\n       */\n      // keep logs with a balance, if only one has a balance\n      logs = logs.map(log => {\n        if (typeof log.balance === 'number' && log.balance > 0) {\n          log.keep = true;\n        }\n        return log;\n      });\n      const numKeep = logs.filter(log => log.keep);\n      if (numKeep === 1) {\n        for (const log of logs) {\n          if (!log.keep) {\n            await BiRequestLogs.remove({_id: log._id});\n            logs = logs.filter(thisLog => thisLog._id.toString() !== log._id.toString());\n          }\n        }\n      }\n      //\n      if (logs.length === 1) {\n        continue;\n      }\n      // If we still have logs, remove all but the most recent\n      for (const [index, log] of logs.entries()) {\n        if (index) {\n          await BiRequestLogs.remove({_id: log._id});\n        }\n      }\n    }\n\n    return res.json({});\n  }\n  catch (err) {\n    console.log('***************************ERR IN CLEANUPBILOGS***************************');\n    console.log(err);\n\n    await ErrorLog.create({\n      method: 'cleanUpBILogs',\n      controller: 'admin.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    return res.status(500).json({\n      invalid: 'An error has occurred.'\n    });\n  }\n}\n\n/**\n * Sends an email\n */\nexport async function sendAccountingEmail(req, res) {\n  const {companyId} = req.params;\n  const {emailSubject, emailBody} = req.body;\n\n  const company = await Company.findById(companyId);\n  const emails = company.bookkeepingEmails.split(',');\n  const recipients = [];\n  emails.forEach(email => {\n    if (email.trim().length) {\n      recipients.push(email.trim());\n    }\n  });\n\n  if (recipients.length) {\n    try {\n      mailer.sendAccountingEmail(recipients, emailSubject, emailBody, async err => {\n        if (! err) {\n          return res.json({});\n        } else {\n          console.log('**************************ERR IN SENDEMAILS**************************');\n          console.log(err);\n          console.log(err.response.body.errors);\n\n          await ErrorLog.create({\n            method: 'sendAccountingEmail',\n            controller: 'admin.controller',\n            revision: getGitRev(),\n            stack: err.stack,\n            error: err,\n            user: req.user._id\n          });\n\n          return res.status(500).json({\n            invalid: 'An error has occurred.'\n          });\n        }\n      });\n    } catch (err) {\n      console.log('**************************ERR IN SENDEMAILS**************************');\n      console.log(err);\n\n      await ErrorLog.create({\n        method: 'sendAccountingEmail',\n        controller: 'admin.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n\n      return res.status(500).json({\n        invalid: 'An error has occurred.'\n      });\n    }\n\n    return;\n  }\n\n  return res.json({});\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}