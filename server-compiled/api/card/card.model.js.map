{"version":3,"sources":["api/card/card.model.js"],"names":["mongoose","require","Promise","Schema","CardSchema","number","type","String","required","pin","created","Date","default","now","userTime","balanceStatus","validate","validator","v","test","message","valid","Boolean","uid","lqCustomerName","buyRate","Number","buyAmount","sellRate","balance","verifiedBalance","updates","Types","ObjectId","ref","user","customer","retailer","inventory","store","company","merchandise","indexes","name","unique","methods","getLast4Digits","substring","length","statics","getCardWithInventory","cardId","findById","populate","module","exports","model"],"mappings":"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","file":"api/card/card.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nimport createIndexes from '../../config/indexDb';\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\n\nconst CardSchema = new Schema({\n  // Card number\n  number: {\n    type: String,\n    required: true\n  },\n  // Pin\n  pin: String,\n  // When original record is created\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  // User time when created (this is currently wrong. The timezone which is sent to the backend\n  // is converted to UTC on saving to mongo, which renders this useless)\n  userTime: {\n    type: Date\n  },\n  balanceStatus: {\n    type: String,\n    validate: {\n      validator: function(v) {\n        return /^(unchecked|deferred|received|bad|manual)$/.test(v);\n      },\n      message: 'Balance status must be \"unchecked,\" \"deferred,\" \"bad\", \"received\", or manual'\n    }\n  },\n  // Whether a card is valid or not. Assumed to be valid until BI returns invalid\n  valid: {\n    type: Boolean,\n    default: true\n  },\n  // LQ ID\n  uid: String,\n  // Customer name coming in from LQ\n  lqCustomerName: String,\n  // Retailer buy rate at the time of sale. This is not the actual buy rate, which can be overwritten on\n  // intake.\n  buyRate: {type: Number},\n  // Buy amount\n  buyAmount: Number,\n  // Sell rate at time of card intake after company margins\n  sellRate: {type: Number},\n  // Balance\n  balance: {type: Number},\n  // Verified balance (now it's possible to get a verified balance on a card without an inventory), set to 0 for invalid cards\n  verifiedBalance: {type: Number},\n  // Updates\n  updates: [{type: Schema.Types.ObjectId, ref: 'CardUpdate'}],\n  // User adding the card\n  user: [{type: Schema.Types.ObjectId, ref: 'User'}],\n  // Customer selling the card\n  customer: {type: Schema.Types.ObjectId, ref: 'Customer'},\n  // Retailer\n  retailer: {type: Schema.Types.ObjectId, ref: 'Retailer', required: true},\n  // Inventory\n  inventory: {type: Schema.Types.ObjectId, ref: 'Inventory'},\n  // Store\n  store: {type: Schema.Types.ObjectId, ref: 'Store'},\n  // Company\n  company: {type: Schema.Types.ObjectId, ref: 'Company'},\n  // Whether this is a merchandise card or not. Defaults to false.\n  merchandise: {type: Boolean, default: false},\n});\n\n// Indexes\nconst indexes = [\n  // Unique inventory index\n  [{inventory: 1}],\n  // @todo\n  [{number: 1, pin: 1, retailer: 1}, {name: 'inventory', unique: true}]\n];\n// @todo did not work\ncreateIndexes(CardSchema, indexes);\n\nCardSchema.methods.getLast4Digits = function () {\n  return '****' + this.number.substring(this.number.length - 4);\n};\n\nCardSchema.statics = {\n  /**\n   * Get card with inventory\n   * @param cardId\n   * @return {Promise.<*|{path, model}>}\n   */\n  async getCardWithInventory(cardId) {\n    return this.findById(cardId).populate('inventory');\n  }\n};\n\nmodule.exports = mongoose.model('Card', CardSchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}