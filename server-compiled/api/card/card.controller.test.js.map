{"version":3,"sources":["api/card/card.controller.test.js"],"names":["test","describe","initDb","before","createAdminUser","createCompanyAndCorporateAdminUser","createStoreAndManager","createEmployee","createCustomer","createRetailer","name","loginUserSaveToken","it","references","companies","to","have","lengthOf","users","stores","customers","retailers","retailerId","getDefaultReferenceId","customerId","storeId","params","Date","request","post","set","tokens","employee1","token","send","then","res","status","expectedProps","body","checkResponseProperties","findOne","card","retailer","toString","be","equal","user","_id","customer","balance","sellRate","get","text","not","empty","cardsData","property","data","instanceof","Array","find","dbCards","length","catch","err","employee2","instanceOf","newBalance","requestBody","updatedCard","response","statusMessage","equals","number","pin","merchandise","cardId","delete","addCardsToInventory","populate","path","model","cards","receipt","inventory","bodyReceipt","ok","updateInventoryDetails","orderNumber","findById","hasVerifiedBalance","liquidationRate","liquidationSoldFor"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;AAEA,IAAMA,OAAO,uBAAb;;AAEAC,SAAS,oBAAT,EAA+B,YAAY;AACzC;AACAD,OAAKE,MAAL;AACA;AACAC,iEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAECH,KAAKI,eAAL,EAFD;;AAAA;AAAA;AAAA,mBAICJ,KAAKK,kCAAL,EAJD;;AAAA;AAAA;AAAA,mBAMCL,KAAKM,qBAAL,EAND;;AAAA;AAAA;AAAA,mBAQCN,KAAKO,cAAL,EARD;;AAAA;AAAA;AAAA,mBAUCP,KAAKQ,cAAL,EAVD;;AAAA;AAAA;AAAA,mBAYCR,KAAKS,cAAL,CAAoB,EAACC,MAAM,eAAP,EAApB,CAZD;;AAAA;AAAA;AAAA,mBAcCV,KAAKW,kBAAL,CAAwB,UAAxB,CAdD;;AAAA;AAAA;AAAA,mBAeCX,KAAKW,kBAAL,CAAwB,OAAxB,CAfD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;;AAkBAC,KAAG,uCAAH,EAA4C,YAAY;AACtD;AACA,sBAAOZ,KAAKa,UAAL,CAAgBC,SAAvB,EAAkCC,EAAlC,CAAqCC,IAArC,CAA0CC,QAA1C,CAAmD,CAAnD;AACA,sBAAOjB,KAAKa,UAAL,CAAgBK,KAAvB,EAA8BH,EAA9B,CAAiCC,IAAjC,CAAsCC,QAAtC,CAA+C,CAA/C;AACA,sBAAOjB,KAAKa,UAAL,CAAgBM,MAAvB,EAA+BJ,EAA/B,CAAkCC,IAAlC,CAAuCC,QAAvC,CAAgD,CAAhD;AACA,sBAAOjB,KAAKa,UAAL,CAAgBO,SAAvB,EAAkCL,EAAlC,CAAqCC,IAArC,CAA0CC,QAA1C,CAAmD,CAAnD;AACA,sBAAOjB,KAAKa,UAAL,CAAgBQ,SAAvB,EAAkCN,EAAlC,CAAqCC,IAArC,CAA0CC,QAA1C,CAAmD,CAAnD;AACD,GAPD;;AASAL,KAAG,yCAAH,0DAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACtCZ,KAAKW,kBAAL,CAAwB,UAAxB,CADsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAIAV,WAAS,wBAAT,EAAmC,YAAY;AAC7CW,OAAG,sCAAH,0DAA2C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCU,wBADmC,GACtBtB,KAAKuB,qBAAL,CAA2B,WAA3B,CADsB;AAEnCC,wBAFmC,GAEtBxB,KAAKuB,qBAAL,CAA2B,WAA3B,CAFsB;AAGnCE,qBAHmC,GAGtBzB,KAAKuB,qBAAL,CAA2B,QAA3B,CAHsB;AAInCG,oBAJmC,GAItB;AACjB,4BAAYJ,UADK;AAEjB,0BAAY,GAFK;AAGjB,uBAAY,GAHK;AAIjB,4BAAYE,UAJK;AAKjB,yBAAYC,OALK;AAMjB,4BAAY,IAAIE,IAAJ,EANK;AAOjB,2BAAY;AAPK,eAJsB;AAAA;AAAA,qBAa5B3B,KAAK4B,OAAL,CACZC,IADY,CACP,mBADO,EAEZC,GAFY,CAER,eAFQ,cAEmB9B,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBC,KAFzC,EAGZC,IAHY,CAGPR,MAHO,EAIZS,IAJY;AAAA,oFAIP,kBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,4CAAOA,GAAP,EAAYrB,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACA;AACMC,uCAHF,GAGkB,CAAC,KAAD,EAAQ,UAAR,EAAoB,SAApB,EAA+B,eAA/B,EAAgD,UAAhD,EAA4D,QAA5D,EAAsE,KAAtE,EAA6E,UAA7E,EACC,UADD,EACa,SADb,EACwB,aADxB,EACuC,MADvC,EAC+C,SAD/C,EAC0D,OAD1D,EACmE,SADnE,CAHlB;AAKEC,8BALF,GAKkBH,IAAIG,IALtB;;AAMJvC,+BAAKwC,uBAAL,CAA6BD,IAA7B,EAAmCD,aAAnC;;AANI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJO;;AAAA;AAAA;AAAA;AAAA,kBAb4B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3C;;AA2BA1B,OAAG,+EAAH,0DAAoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAE/D,eAAK6B,OAAL,CAAa,EAAb,CAF+D;;AAAA;AAE5EC,kBAF4E;;AAGlF,gCAAOA,KAAKC,QAAL,CAAcC,QAAd,EAAP,EAAiC7B,EAAjC,CAAoC8B,EAApC,CAAuCC,KAAvC,CAA6C9C,KAAKuB,qBAAL,CAA2B,WAA3B,EAAwCqB,QAAxC,EAA7C;AACA,gCAAOF,KAAKK,IAAL,CAAU,CAAV,EAAaH,QAAb,EAAP,EAAgC7B,EAAhC,CAAmC8B,EAAnC,CAAsCC,KAAtC,CAA4C9C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAAlE;AACA,gCAAON,KAAKO,QAAL,CAAcL,QAAd,EAAP,EAAiC7B,EAAjC,CAAoC8B,EAApC,CAAuCC,KAAvC,CAA6C9C,KAAKuB,qBAAL,CAA2B,WAA3B,EAAwCqB,QAAxC,EAA7C;;AALkF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApF;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAhC,OAAG,mFAAH,0DAAwF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACnE,eAAK6B,OAAL,CAAa,EAAb,CADmE;;AAAA;AAChFC,kBADgF;;AAEtF,gCAAOA,KAAKQ,OAAZ,EAAqBnC,EAArB,CAAwB8B,EAAxB,CAA2BC,KAA3B,CAAiC,GAAjC;AACA,gCAAOJ,KAAKS,QAAZ,EAAsBpC,EAAtB,CAAyB8B,EAAzB,CAA4BC,KAA5B,CAAkC,IAAlC;;AAHsF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxF;AAKD,GAlED;;AAoEA7C,WAAS,2BAAT,EAAsC,YAAY;AAChD;AACAE,mEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACCH,KAAKK,kCAAL,CAAwC,CAAxC,CADD;;AAAA;AAAA;AAAA,qBAGCL,KAAKM,qBAAL,CAA2B,CAA3B,CAHD;;AAAA;AAAA;AAAA,qBAKCN,KAAKO,cAAL,CAAoB,CAApB,CALD;;AAAA;AAAA;AAAA,qBAOCP,KAAKQ,cAAL,CAAoB,CAApB,CAPD;;AAAA;AAAA;AAAA,qBASCR,KAAKW,kBAAL,CAAwB,UAAxB,EAAoC,CAApC,CATD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAYAC,OAAG,0DAAH,0DAA+D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACvDY,wBADuD,GAC1CxB,KAAKuB,qBAAL,CAA2B,WAA3B,CAD0C;AAAA;AAAA,qBAEhDvB,KAAK4B,OAAL,CACZwB,GADY,CACR,eAAe5B,UADP,EAEZM,GAFY,CAER,eAFQ,cAEmB9B,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBC,KAFzC,EAGZE,IAHY;AAAA,oFAGP,kBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,4CAAOA,GAAP,EAAYrB,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACA,4CAAOD,IAAIiB,IAAX,EAAiBtC,EAAjB,CAAoBuC,GAApB,CAAwBT,EAAxB,CAA2BU,KAA3B;;AAEIC,mCAJA,GAIYpB,IAAIG,IAJhB;;AAKJ,4CAAOiB,SAAP,EAAkBzC,EAAlB,CAAqBC,IAArB,CAA0ByC,QAA1B,CAAmC,MAAnC;AACA,4CAAOD,UAAUE,IAAjB,EAAuB3C,EAAvB,CAA0B8B,EAA1B,CAA6Bc,UAA7B,CAAwCC,KAAxC;AACA;AAPI;AAAA,iCAQkB,eAAKC,IAAL,CAAU,EAACd,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAV,CARlB;;AAAA;AAQEc,iCARF;;AASJ,4CAAON,UAAUE,IAAV,CAAeK,MAAtB,EAA8BhD,EAA9B,CAAiC8B,EAAjC,CAAoCC,KAApC,CAA0CgB,QAAQC,MAAlD;;AATI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHO;;AAAA;AAAA;AAAA;AAAA,kBAFgD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/D;;AAkBAnD,OAAG,6FAAH,0DACE;AAAA;AAAA;AAAA;AAAA;AAAA;AACQY,wBADR,GACqBxB,KAAKuB,qBAAL,CAA2B,WAA3B,EAAwC,CAAxC,CADrB;AAAA;AAAA,qBAEevB,KAAK4B,OAAL,CACZwB,GADY,CACR,eAAe5B,UADP,EAEZM,GAFY,CAER,eAFQ,cAEmB9B,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBC,KAFzC,EAGZ+B,KAHY;AAAA,qFAGN,mBAAgBC,GAAhB;AAAA;AAAA;AAAA;AAAA;AACL,4CAAOA,GAAP,EAAYlD,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHM;;AAAA;AAAA;AAAA;AAAA,kBAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;;AAWAzB,OAAG,uEAAH,0DAA4E;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACpEY,wBADoE,GACvDxB,KAAKuB,qBAAL,CAA2B,WAA3B,EAAwC,CAAxC,CADuD;AAAA;AAAA,qBAE7DvB,KAAK4B,OAAL,CACZwB,GADY,CACR,eAAe5B,UADP,EAEZM,GAFY,CAER,eAFQ,cAEmB9B,KAAK+B,MAAL,CAAYmC,SAAZ,CAAsBjC,KAFzC,EAGZE,IAHY;AAAA,qFAGP,mBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,4CAAOA,GAAP,EAAYrB,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACA,4CAAOD,IAAIG,IAAX,EAAiBxB,EAAjB,CAAoBC,IAApB,CAAyByC,QAAzB,CAAkC,MAAlC;AACA,4CAAOrB,IAAIG,IAAJ,CAASmB,IAAhB,EAAsB3C,EAAtB,CAAyB8B,EAAzB,CAA4BsB,UAA5B,CAAuCP,KAAvC;AACA,4CAAOxB,IAAIG,IAAJ,CAASmB,IAAT,CAAcK,MAArB,EAA6BhD,EAA7B,CAAgC8B,EAAhC,CAAmCC,KAAnC,CAAyC,CAAzC;AACA;AALI;AAAA,iCAMkB,eAAKe,IAAL,CAAU,EAACZ,UAAUzB,UAAX,EAAV,CANlB;;AAAA;AAMEsC,iCANF;;AAOJ,4CAAOA,QAAQC,MAAf,EAAuBhD,EAAvB,CAA0B8B,EAA1B,CAA6BC,KAA7B,CAAmCV,IAAIG,IAAJ,CAASmB,IAAT,CAAcK,MAAjD;;AAPI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHO;;AAAA;AAAA;AAAA;AAAA,kBAF6D;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA5E;AAeD,GA1DD;;AA4DA9D,WAAS,+BAAT,EAA0C,YAAY;;AAEpD;AACA;AACA;AACA;;AAEAW,OAAG,6CAAH,0DAAkD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEtB,eAAK6B,OAAL,CAAa,EAACM,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAb,CAFsB;;AAAA;AAE1CN,kBAF0C;AAG1C0B,wBAH0C,GAG5B,EAH4B;AAI1CC,yBAJ0C,GAI5B;AAClBrB,qBAASN,KAAKM,GADI;AAElBE,yBAASkB;AAFS,eAJ4B;AAAA;AAAA,qBAQ1CpE,KAAK4B,OAAL,CACLC,IADK,CACA,0BADA,EAELC,GAFK,CAED,eAFC,cAE0B9B,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBC,KAFhD,EAGLC,IAHK,CAGAmC,WAHA,EAILlC,IAJK;AAAA,qFAIA,mBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AACJ;AACA,4CAAOA,GAAP,EAAYrB,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;;AAFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJA;;AAAA;AAAA;AAAA;AAAA,kBAR0C;;AAAA;AAAA;AAAA,qBAiBtB,eAAKI,OAAL,CAAa,EAAC,OAAOC,KAAKM,GAAb,EAAb,CAjBsB;;AAAA;AAiB1CsB,yBAjB0C;;AAkBhD,gCAAOA,YAAYpB,OAAnB,EAA4BnC,EAA5B,CAA+B8B,EAA/B,CAAkCC,KAAlC,CAAwCsB,UAAxC;;AAlBgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlD;;AAqBAxD,OAAG,8FAAH,0DACE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC4B,eAAK6B,OAAL,CAAa,EAACM,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAb,CAD5B;;AAAA;AACQN,kBADR;AAEQ0B,wBAFR,GAEsB,EAFtB;AAGQC,yBAHR,GAGsB;AAClBrB,qBAASN,KAAKM,GADI;AAElBE,yBAASkB;AAFS,eAHtB;AAAA;AAAA,qBAOQpE,KAAK4B,OAAL,CACLC,IADK,CACA,0BADA,EAELC,GAFK,CAED,eAFC,cAE0B9B,KAAK+B,MAAL,CAAYmC,SAAZ,CAAsBjC,KAFhD,EAGLC,IAHK,CAGAmC,WAHA,EAILlC,IAJK;AAAA,qFAIA,mBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJA;;AAAA;AAAA;AAAA;AAAA,mBAML4B,KANK,CAMC,eAAO;AACZ,kCAAOC,GAAP,EAAYlD,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACA,kCAAO4B,IAAIM,QAAJ,CAAanC,GAAb,CAAiBoC,aAAxB,EAAuCzD,EAAvC,CAA0C8B,EAA1C,CAA6C4B,MAA7C,CAAoD,cAApD;AACA,kCAAOR,IAAIM,QAAJ,CAAanC,GAAb,CAAiBG,IAAjB,CAAsB0B,GAA7B,EAAkClD,EAAlC,CAAqC8B,EAArC,CAAwC4B,MAAxC,CAA+C,uCAA/C;AACD,eAVK,CAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;;AAqBA7D,OAAG,yFAAH,0DAA8F;AAAA;AAAA;AAAA;AAAA;AAAA;AACtFyD,yBADsF,GACxE;AAClBrB,qBAAShD,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GADb;AAElBE,yBAAS;AAFS,eADwE;AAAA;AAAA,qBAKtFlD,KAAK4B,OAAL,CACLC,IADK,CACA,0BADA,EAELC,GAFK,CAED,eAFC,cAE0B9B,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBC,KAFhD,EAGLC,IAHK,CAGAmC,WAHA,EAILL,KAJK,CAIC,eAAO;AACZ,kCAAOC,IAAI5B,MAAX,EAAmBtB,EAAnB,CAAsB8B,EAAtB,CAAyBC,KAAzB,CAA+B,GAA/B;AACD,eANK,CALsF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9F;AAaD,GA9DD;;AAgEA7C,WAAS,qBAAT,EAAgC,YAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEAW,OACE,qHADF,0DAEE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC4B,eAAK6B,OAAL,CAAa,EAACM,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAb,CAD5B;;AAAA;AACQN,kBADR;AAEQC,sBAFR,GAEsB3C,KAAKuB,qBAAL,CAA2B,WAA3B,CAFtB;AAGQ8C,yBAHR,GAGsB;AAClBrB,qBAAaN,KAAKM,GADA;AAElB0B,wBAAa,GAFK;AAGlBC,qBAAa,GAHK;AAIlBC,6BAAa,IAJK;AAKlBjC,0BAAaA;AALK,eAHtB;AAAA;AAAA,qBAWQ3C,KAAK4B,OAAL,CACLC,IADK,CACA,gBADA,EAELC,GAFK,CAED,eAFC,cAE0B9B,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBC,KAFhD,EAGLC,IAHK,CAGAmC,WAHA,EAILlC,IAJK;AAAA,qFAIA,mBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,4CAAOA,GAAP,EAAYrB,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACMiC,qCAFF,GAEgBlC,IAAIG,IAFpB;;AAGJ,4CAAO+B,YAAYI,MAAnB,EAA2B3D,EAA3B,CAA8B8B,EAA9B,CAAiC4B,MAAjC,CAAwCJ,YAAYK,MAApD;AACA,4CAAOJ,YAAYK,GAAnB,EAAwB5D,EAAxB,CAA2B8B,EAA3B,CAA8B4B,MAA9B,CAAqCJ,YAAYM,GAAjD;AACA,4CAAOL,YAAYM,WAAnB,EAAgC7D,EAAhC,CAAmC8B,EAAnC,CAAsC4B,MAAtC,CAA6CJ,YAAYO,WAAzD;;AALI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJA;;AAAA;AAAA;AAAA;AAAA,kBAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF;;AA2BAhE,OAAG,8FAAH,0DACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC4B,eAAK6B,OAAL,CAAa,EAACM,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAb,CAD5B;;AAAA;AACQN,kBADR;AAEQC,sBAFR,GAEsB3C,KAAKuB,qBAAL,CAA2B,WAA3B,CAFtB;AAGQ8C,yBAHR,GAGsB;AAClBrB,qBAAaN,KAAKM,GADA;AAElB0B,wBAAa,GAFK;AAGlBC,qBAAa,GAHK;AAIlBC,6BAAa,IAJK;AAKlBjC,0BAAaA;AALK,eAHtB;AAAA;AAAA,qBAWQ3C,KAAK4B,OAAL,CACLC,IADK,CACA,gBADA,EAELC,GAFK,CAED,eAFC,cAE0B9B,KAAK+B,MAAL,CAAYmC,SAAZ,CAAsBjC,KAFhD,EAGLC,IAHK,CAGAmC,WAHA,EAILL,KAJK,CAIC,eAAO;AACZ,kCAAOC,GAAP,EAAYlD,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACA,kCAAO4B,IAAIM,QAAJ,CAAanC,GAAb,CAAiBoC,aAAxB,EAAuCzD,EAAvC,CAA0C8B,EAA1C,CAA6C4B,MAA7C,CAAoD,cAApD;AACA,kCAAOR,IAAIM,QAAJ,CAAanC,GAAb,CAAiBG,IAAjB,CAAsB0B,GAA7B,EAAkClD,EAAlC,CAAqC8B,EAArC,CAAwC4B,MAAxC,CAA+C,uCAA/C;AACD,eARK,CAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;;AAuBA7D,OAAG,2EAAH,0DAAgF;AAAA;AAAA;AAAA;AAAA;AAAA;AACxEyD,yBADwE,GAC1D;AAClBrB,qBAAahD,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GADjB;AAElB0B,wBAAa,GAFK;AAGlBC,qBAAa,GAHK;AAIlBC,6BAAa,IAJK;AAKlBjC,0BAAa;AALK,eAD0D;AAAA;AAAA,qBASxE3C,KAAK4B,OAAL,CACLC,IADK,CACA,gBADA,EAELC,GAFK,CAED,eAFC,cAE0B9B,KAAK+B,MAAL,CAAYmC,SAAZ,CAAsBjC,KAFhD,EAGLC,IAHK,CAGAmC,WAHA,EAILL,KAJK,CAIC,eAAO;AACZ,kCAAOC,IAAI5B,MAAX,EAAmBtB,EAAnB,CAAsB8B,EAAtB,CAAyBC,KAAzB,CAA+B,GAA/B;AACD,eANK,CATwE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhF;AAiBD,GA3ED;;AA6EA7C,WAAS,0BAAT,EAAqC,YAAY;AAC/CW,OAAG,6CAAH,0DAAkD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC3B,eAAK6B,OAAL,CAAa,EAACM,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAb,CAD2B;;AAAA;AAC1CN,kBAD0C;AAE1CmC,oBAF0C,GAEjCnC,KAAKM,GAF4B;AAAA;AAAA,qBAGnChD,KAAK4B,OAAL,CACZkD,MADY,CACL,eAAeD,MADV,EAEZ/C,GAFY,CAER,eAFQ,cAEmB9B,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBC,KAFzC,EAGZE,IAHY;AAAA,qFAGP,mBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AACJ,4CAAOA,GAAP,EAAYrB,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACA,4CAAOD,IAAIiB,IAAX,EAAiBtC,EAAjB,CAAoB8B,EAApB,CAAuBC,KAAvB,CAA6B,2BAA7B;;AAFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHO;;AAAA;AAAA;AAAA;AAAA,kBAHmC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlD;;AAYAlC,OAAG,8FAAH,0DACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEuB,eAAK6B,OAAL,CAAa,EAACM,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAb,CAFvB;;AAAA;AAEQN,kBAFR;AAGQmC,oBAHR,GAGiBnC,KAAKM,GAHtB;AAAA;AAAA,qBAIehD,KAAK4B,OAAL,CACZkD,MADY,CACL,eAAeD,MADV,EAEZ/C,GAFY,CAER,eAFQ,cAEmB9B,KAAK+B,MAAL,CAAYmC,SAAZ,CAAsBjC,KAFzC,EAGZ+B,KAHY,CAGN,eAAO;AACZ,kCAAOC,GAAP,EAAYlD,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACA,kCAAO4B,IAAIM,QAAJ,CAAanC,GAAb,CAAiBoC,aAAxB,EAAuCzD,EAAvC,CAA0C8B,EAA1C,CAA6C4B,MAA7C,CAAoD,cAApD;AACD,eANY,CAJf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;;AAcA7D,OAAG,2EAAH,0DAAgF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACzD,eAAK6B,OAAL,CAAa,EAACM,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAb,CADyD;;AAAA;AACxEN,kBADwE;AAExEmC,oBAFwE,GAE/D7E,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAFyC;AAAA;AAAA,qBAGjEhD,KAAK4B,OAAL,CACZkD,MADY,CACL,eAAeD,MADV,EAEZ/C,GAFY,CAER,eAFQ,cAEmB9B,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBC,KAFzC,EAGZ+B,KAHY,CAGN,eAAO;AACZ,kCAAOC,GAAP,EAAYlD,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACA,kCAAO4B,IAAIM,QAAJ,CAAanC,GAAb,CAAiBoC,aAAxB,EAAuCzD,EAAvC,CAA0C8B,EAA1C,CAA6C4B,MAA7C,CAAoD,WAApD;AACD,eANY,CAHiE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhF;AAYD,GAvCD;;AAyCAxE,WAAS,+BAAT,EAA0C,YAAY;AACpDW,OAAG,wEAAH,0DAA6E;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACrEZ,KAAK+E,mBAAL,CAAyB,CAAzB,EACL5C,IADK;AAAA,qFACA,mBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,4CAAOA,GAAP,EAAYrB,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AACA;AAFI;AAAA,iCAGgB,eAAKwB,IAAL,CAAU,EAACd,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAV,EACnBgC,QADmB,CACV;AACRC,kCAAM,WADE;AAERD,sCAAU;AACRC,oCAAM,SADE;AAERC,qCAAO;AAFC;AAFF,2BADU,CAHhB;;AAAA;AAGEC,+BAHF;AAWEC,iCAXF,GAWYD,MAAM,CAAN,EAASE,SAAT,CAAmBD,OAX/B;AAYEE,qCAZF,GAYgBlD,IAAIG,IAZpB;;AAaJ,4CAAO6C,OAAP,EAAgBrE,EAAhB,CAAmB8B,EAAnB,CAAsB0C,EAAtB;AACA,4CAAOD,YAAYtC,GAAZ,CAAgBJ,QAAhB,EAAP,EAAmC7B,EAAnC,CAAsC8B,EAAtC,CAAyCC,KAAzC,CAA+CsC,QAAQpC,GAAR,CAAYJ,QAAZ,EAA/C;;AAdI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA;;AAAA;AAAA;AAAA;AAAA,kBADqE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7E;;AAoBAhC,OAAG,4CAAH,0DAAiD;AAAA;AAAA;AAAA;AAAA;AAAA;AACzC8B,kBADyC,GAClC,eAAKD,OAAL,CAAa,EAAb,EAAiBuC,QAAjB,CAA0B,WAA1B,CADkC;AAE/C;AACA;;AAH+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjD;;AAMApE,OAAG,uEAAH,0DAA4E;AAAA;AAAA;AAAA;AAAA;AAAA;AACpEyE,uBADoE,GACxD,oBAAU5C,OAAV,CAAkB,EAAlB,EAAsBuC,QAAtB,CAA+B,MAA/B,CADwD;AAE1E;;AAF0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA5E;;AAKApE,OAAG,mDAAH,0DAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC9B,oBAAU6B,OAAV,CAAkB,EAAlB,CAD8B;;AAAA;AAChD4C,uBADgD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxD;AAEE;AAFF;;AAKAzE,OAAG,qDAAH,0DAA0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAChC,oBAAU6B,OAAV,CAAkB,EAAlB,CADgC;;AAAA;AAClD4C,uBADkD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1D;AAEE;AAFF;AAID,GAzCD;;AA2CApF,WAAS,8BAAT,EAAyC,YAAY;AACnDE,mEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,wCADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAGAS,OAAG,sDAAH,0DAA2D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACvC,eAAKiD,IAAL,CAAU,EAACd,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAV,EAA6CgC,QAA7C,CAAsD,WAAtD,CADuC;;AAAA;AACrDG,mBADqD;AAAA;AAAA,qBAEnDnF,KAAKwF,sBAAL,CAA4B,CAACL,MAAM,CAAN,EAASE,SAAT,CAAmBrC,GAApB,CAA5B,EAAsD;AAC1DyC,6BAAa;AAD6C,eAAtD,EAGLtD,IAHK;AAAA,qFAGA,mBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,4CAAOA,GAAP,EAAYrB,EAAZ,CAAeC,IAAf,CAAoBqB,MAApB,CAA2B,GAA3B;AADI;AAAA,iCAEoB,oBAAUqD,QAAV,CAAmBP,MAAM,CAAN,EAASE,SAAT,CAAmBrC,GAAtC,CAFpB;;AAAA;AAEEqC,mCAFF;;AAGJ,4CAAOA,UAAUI,WAAjB,EAA8B1E,EAA9B,CAAiC8B,EAAjC,CAAoCC,KAApC,CAA0C,MAA1C;;AAHI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHA;;AAAA;AAAA;AAAA;AAAA,kBAFmD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3D;;AAYAlC,OAAG,kEAAH,0DAAuE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACnD,eAAKiD,IAAL,CAAU,EAACd,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAV,EAA6CgC,QAA7C,CAAsD,WAAtD,CADmD;;AAAA;AACjEG,mBADiE;;AAErEnF,mBAAKwF,sBAAL,CAA4B,CAACL,MAAM,CAAN,EAASE,SAAT,CAAmBrC,GAApB,CAA5B,EAAsD;AACpD2C,oCAAoB;AADgC,eAAtD,EAGCxD,IAHD,yDAGM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACoB,oBAAUuD,QAAV,CAAmBP,MAAM,CAAN,EAASE,SAAT,CAAmBrC,GAAtC,CADpB;;AAAA;AACEqC,iCADF;;AAEJ,0CAAOA,UAAUM,kBAAjB,EAAqC5E,EAArC,CAAwC8B,EAAxC,CAA2CC,KAA3C,CAAiD,KAAjD;;AAFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHN;;AAFqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvE;;AAWAlC,OAAG,yEAAH,0DAA8E;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC1D,eAAKiD,IAAL,CAAU,EAACd,MAAM/C,KAAK+B,MAAL,CAAYC,SAAZ,CAAsBgB,GAA7B,EAAV,EAA6CgC,QAA7C,CAAsD,WAAtD,CAD0D;;AAAA;AACxEG,mBADwE;;AAE5EnF,mBAAKwF,sBAAL,CAA4B,CAACL,MAAM,CAAN,EAASE,SAAT,CAAmBrC,GAApB,CAA5B,EAAsD;AACpD4C,iCAAiB;AADmC,eAAtD,EAGCzD,IAHD,yDAGM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACoB,oBAAUuD,QAAV,CAAmBP,MAAM,CAAN,EAASE,SAAT,CAAmBrC,GAAtC,CADpB;;AAAA;AACEqC,iCADF;;AAEJ,0CAAOA,UAAUQ,kBAAjB,EAAqC9E,EAArC,CAAwC8B,EAAxC,CAA2CC,KAA3C,CAAiD,EAAjD;;AAFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHN;;AAF4E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9E;AAUD,GArCD;AAsCD,CA1aD","file":"api/card/card.controller.test.js","sourcesContent":["import {expect} from 'chai';\nimport Card from './card.model';\nimport Inventory from '../inventory/inventory.model';\nimport {sellCardsInLiquidation} from '../deferredBalanceInquiries/runDefers';\n\nimport TestHelper from '../../tests/helpers';\n\nconst test = new TestHelper();\n\ndescribe('card.controller.js', function () {\n  // Init DB for card controller\n  test.initDb();\n  // Init company and admin user\n  before(async function () {\n    // Create admin\n    await test.createAdminUser();\n    // Company and corporate admin\n    await test.createCompanyAndCorporateAdminUser();\n    // Create store\n    await test.createStoreAndManager();\n    // Create employee\n    await test.createEmployee();\n    // Create a customer\n    await test.createCustomer();\n    // Create a retailer\n    await test.createRetailer({name: 'Test Retailer'});\n    // Login users\n    await test.loginUserSaveToken('employee');\n    await test.loginUserSaveToken('admin');\n  });\n\n  it('should have set up the tests properly', function () {\n    // Check to see if records were created\n    expect(test.references.companies).to.have.lengthOf(1);\n    expect(test.references.users).to.have.lengthOf(3);\n    expect(test.references.stores).to.have.lengthOf(1);\n    expect(test.references.customers).to.have.lengthOf(1);\n    expect(test.references.retailers).to.have.lengthOf(1);\n  });\n\n  it(\"should allow us to login as an employee\", async function () {\n    await test.loginUserSaveToken('employee');\n  });\n\n  describe('POST api/cards/newCard', function () {\n    it('should allow us to create a new card', async function () {\n      const retailerId = test.getDefaultReferenceId('retailers');\n      const customerId = test.getDefaultReferenceId('customers');\n      const storeId    = test.getDefaultReferenceId('stores');\n      const params     = {\n        \"retailer\": retailerId,\n        \"number\"  : \"1\",\n        \"pin\"     : \"1\",\n        \"customer\": customerId,\n        \"store\"   : storeId,\n        \"userTime\": new Date(),\n        \"balance\" : 100\n      };\n      return await test.request\n      .post('/api/card/newCard')\n      .set('Authorization', `bearer ${test.tokens.employee1.token}`)\n      .send(params)\n      .then(async res => {\n        expect(res).to.have.status(200);\n        // Make sure we have all expected props in the response\n        const expectedProps = ['_id', 'sellRate', 'buyRate', 'balanceStatus', 'retailer', 'number', 'pin', 'customer',\n                               'userTime', 'balance', 'merchandise', 'user', 'updates', 'valid', 'created'];\n        const body          = res.body;\n        test.checkResponseProperties(body, expectedProps);\n      });\n    });\n\n    it('should have the correct references to other objects on the newly created card', async function () {\n      // Check that card created is correct\n      const card = await Card.findOne({});\n      expect(card.retailer.toString()).to.be.equal(test.getDefaultReferenceId('retailers').toString());\n      expect(card.user[0].toString()).to.be.equal(test.tokens.employee1._id);\n      expect(card.customer.toString()).to.be.equal(test.getDefaultReferenceId('customers').toString());\n    });\n\n    /**\n     * When a card is sold, the balance is used to determine the market to which the card will be sold.\n     * In this case, the values are:\n     * sellRates: {\n      cardCash: 0.9,\n      cardPool: 0.8,\n      giftcardZen: 0.7\n    },\n     However, the card has a balance of $100, which is higher than the market with the highest rate, CardCash, will accept, according to the market minimum and maximum values:\n     smpMaxMin: {\n      cardCash: {\n        max: 50,\n        min: 0\n      },\n      cardPool: {\n        max: 100,\n        min: 10\n      },\n      giftcardZen: {\n        max: 0,\n        min: 100\n      }\n    },\n     As such, the card should go to the market with the best rate that will accept it, in this case, cardPool, giving it a 0.77 sellRate\n     */\n    it('should have sold to cardPool and have a sellRate of 0.03 less than cardPools rate', async function () {\n      const card = await Card.findOne({});\n      expect(card.balance).to.be.equal(100);\n      expect(card.sellRate).to.be.equal(0.77);\n    });\n  });\n\n  describe('GET api/cards/:customerId', function () {\n    // Create another company and customer, so we can verify that users cannot query customers that do not belong to the same company as they do\n    before(async function () {\n      await test.createCompanyAndCorporateAdminUser(2);\n      // Create store\n      await test.createStoreAndManager(2);\n      // Create employee\n      await test.createEmployee(2);\n      // Create a customer\n      await test.createCustomer(2);\n      // Login new employee\n      await test.loginUserSaveToken('employee', 2);\n    });\n\n    it('should retrieve the cards for the existing employee user', async function () {\n      const customerId = test.getDefaultReferenceId('customers');\n      return await test.request\n      .get('/api/card/' + customerId)\n      .set('Authorization', `bearer ${test.tokens.employee1.token}`)\n      .then(async res => {\n        expect(res).to.have.status(200);\n        expect(res.text).to.not.be.empty;\n\n        let cardsData = res.body;\n        expect(cardsData).to.have.property('data');\n        expect(cardsData.data).to.be.instanceof(Array);\n        // Make sure that we go the right number of cards\n        const dbCards = await Card.find({user: test.tokens.employee1._id});\n        expect(cardsData.data.length).to.be.equal(dbCards.length);\n      });\n    });\n\n    it('should return a 401 status code when a user tries to query cards that do not belong to them',\n      async function () {\n        const customerId = test.getDefaultReferenceId('customers', 2);\n        return await test.request\n        .get('/api/card/' + customerId)\n        .set('Authorization', `bearer ${test.tokens.employee1.token}`)\n        .catch(async function (err) {\n          expect(err).to.have.status(401);\n        });\n      });\n\n    it('should return an empty array when a customer with no cards is queried', async function () {\n      const customerId = test.getDefaultReferenceId('customers', 2);\n      return await test.request\n      .get('/api/card/' + customerId)\n      .set('Authorization', `bearer ${test.tokens.employee2.token}`)\n      .then(async res => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('data');\n        expect(res.body.data).to.be.instanceOf(Array);\n        expect(res.body.data.length).to.be.equal(0);\n        // Check DB to confirm that the right number of cards was returned\n        const dbCards = await Card.find({customer: customerId});\n        expect(dbCards.length).to.be.equal(res.body.data.length);\n      });\n    });\n  });\n\n  describe('POST api/cards/balance/update', function () {\n\n    // const exampleBody = {\n    //   _id: card,\n    //    balance: 90\n    // };\n\n    it('should update the balance on existing cards', async function () {\n\n      const card        = await Card.findOne({user: test.tokens.employee1._id});\n      const newBalance  = 20;\n      const requestBody = {\n        _id    : card._id,\n        balance: newBalance\n      }\n      await test.request\n      .post('/api/card/balance/update')\n      .set('Authorization', `bearer ${test.tokens.employee1.token}`)\n      .send(requestBody)\n      .then(async res => {\n        //console.log(\"response: \" + JSON.stringify(res))\n        expect(res).to.have.status(200);\n      });\n\n      const updatedCard = await Card.findOne({'_id': card._id});\n      expect(updatedCard.balance).to.be.equal(newBalance);\n    });\n\n    it('should return a 401 status code if user tries to update a card which does not belong to them',\n      async function () {\n        const card        = await Card.findOne({user: test.tokens.employee1._id});\n        const newBalance  = 20;\n        const requestBody = {\n          _id    : card._id,\n          balance: newBalance\n        }\n        await test.request\n        .post('/api/card/balance/update')\n        .set('Authorization', `bearer ${test.tokens.employee2.token}`)\n        .send(requestBody)\n        .then(async res => {\n        })\n        .catch(err => {\n          expect(err).to.have.status(401);\n          expect(err.response.res.statusMessage).to.be.equals(\"Unauthorized\");\n          expect(err.response.res.body.err).to.be.equals(\"Card does not belong to this customer\");\n        });\n      });\n\n    it('should return a 404 status code if the user tries to update a card which does not exist', async function () {\n      const requestBody = {\n        _id    : test.tokens.employee1._id,\n        balance: 0\n      };\n      await test.request\n      .post('/api/card/balance/update')\n      .set('Authorization', `bearer ${test.tokens.employee1.token}`)\n      .send(requestBody)\n      .catch(err => {\n        expect(err.status).to.be.equal(404);\n      });\n    });\n  });\n\n  describe('POST api/cards/edit', function () {\n    // const exampleBody = {\n    //   _id: <cardId>,\n    //   number: <new number>,\n    //   pin: <new pin>,\n    //   merchandise: true\n    // };\n\n    it(\n      'should allow for an existing card to have the number, pin, and whether the card is a merchandise card to be updated',\n      async function () {\n        const card        = await Card.findOne({user: test.tokens.employee1._id});\n        const retailer    = test.getDefaultReferenceId('retailers');\n        const requestBody = {\n          _id        : card._id,\n          number     : \"4\",\n          pin        : \"6\",\n          merchandise: true,\n          retailer   : retailer\n        };\n\n        await test.request\n        .post('/api/card/edit')\n        .set('Authorization', `bearer ${test.tokens.employee1.token}`)\n        .send(requestBody)\n        .then(async res => {\n          expect(res).to.have.status(200);\n          const updatedCard = res.body;\n          expect(updatedCard.number).to.be.equals(requestBody.number);\n          expect(updatedCard.pin).to.be.equals(requestBody.pin);\n          expect(updatedCard.merchandise).to.be.equals(requestBody.merchandise);\n\n        });\n      });\n\n    it('should return a 401 status code if user tries to update a card which does not belong to them',\n      async function () {\n        const card        = await Card.findOne({user: test.tokens.employee1._id});\n        const retailer    = test.getDefaultReferenceId('retailers');\n        const requestBody = {\n          _id        : card._id,\n          number     : \"4\",\n          pin        : \"6\",\n          merchandise: true,\n          retailer   : retailer\n        };\n\n        await test.request\n        .post('/api/card/edit')\n        .set('Authorization', `bearer ${test.tokens.employee2.token}`)\n        .send(requestBody)\n        .catch(err => {\n          expect(err).to.have.status(401);\n          expect(err.response.res.statusMessage).to.be.equals(\"Unauthorized\");\n          expect(err.response.res.body.err).to.be.equals(\"Card does not belong to this customer\");\n        });\n      });\n\n    it('should return a 404 status code if a card which does not exist is queried', async function () {\n      const requestBody = {\n        _id        : test.tokens.employee1._id,\n        number     : \"4\",\n        pin        : \"6\",\n        merchandise: true,\n        retailer   : \"Fake\"\n      };\n\n      await test.request\n      .post('/api/card/edit')\n      .set('Authorization', `bearer ${test.tokens.employee2.token}`)\n      .send(requestBody)\n      .catch(err => {\n        expect(err.status).to.be.equal(404);\n      });\n    });\n  });\n\n  describe('DELETE api/cards/:cardId', function () {\n    it('should allow an existing card to be deleted', async function () {\n      const card   = await Card.findOne({user: test.tokens.employee1._id});\n      const cardId = card._id;\n      return await test.request\n      .delete('/api/card/' + cardId)\n      .set('Authorization', `bearer ${test.tokens.employee1.token}`)\n      .then(async res => {\n        expect(res).to.have.status(200);\n        expect(res.text).to.be.equal('Card successfully removed');\n      });\n    });\n\n    it('should return a 401 status code if user tries to delete a card which does not belong to them',\n      async function () {\n\n        const card   = await Card.findOne({user: test.tokens.employee1._id});\n        const cardId = card._id;\n        return await test.request\n        .delete('/api/card/' + cardId)\n        .set('Authorization', `bearer ${test.tokens.employee2.token}`)\n        .catch(err => {\n          expect(err).to.have.status(401);\n          expect(err.response.res.statusMessage).to.be.equals(\"Unauthorized\");\n        });\n      });\n\n    it('should return a 404 status code if a card is deleted which does not exist', async function () {\n      const card   = await Card.findOne({user: test.tokens.employee1._id});\n      const cardId = test.tokens.employee1._id;\n      return await test.request\n      .delete('/api/card/' + cardId)\n      .set('Authorization', `bearer ${test.tokens.employee1.token}`)\n      .catch(err => {\n        expect(err).to.have.status(404);\n        expect(err.response.res.statusMessage).to.be.equals(\"Not Found\");\n      });\n\n    });\n  });\n\n  describe('POST api/cards/addToInventory', function () {\n    it('should return a 200 status code when the existing card ID is passed in', async function () {\n      await test.addCardsToInventory(1)\n      .then(async res => {\n        expect(res).to.have.status(200);\n        // Get cards\n        const cards = await Card.find({user: test.tokens.employee1._id})\n        .populate({\n          path: 'inventory',\n          populate: {\n            path: 'receipt',\n            model: 'Receipt'\n          }\n        });\n        const receipt = cards[0].inventory.receipt;\n        const bodyReceipt = res.body;\n        expect(receipt).to.be.ok;\n        expect(bodyReceipt._id.toString()).to.be.equal(receipt._id.toString());\n      });\n    });\n\n    it('should create an inventory object attached', async function () {\n      const card = Card.findOne({}).populate('inventory');\n      //console.log(\"inventory: \"+JSON.stringify(card))\n      //expect(card).to.have.property('inventory');\n    });\n\n    it('should have created a relationship between the card and the inventory', async function () {\n      const inventory = Inventory.findOne({}).populate('card');\n      //expect(inventory).to.have.property('card');\n    });\n\n    it('should have the SMP value defined as cardPool (3)', async function () {\n      const inventory = await Inventory.findOne({});\n      //expect(inventory.smp).to.be.equal(config.smpIds.CARDPOOL);\n    });\n\n    it('should have the created a receipt for the inventory', async function () {\n      const inventory = await Inventory.findOne({});\n      //expect(inventory).to.have.property('receipt');\n    });\n  });\n\n  describe('POST api/cards/updateDetails', function () {\n    before(async function () {\n      await sellCardsInLiquidation();\n    });\n    it('should allow the user to modify details about a card', async function () {\n      let cards = await Card.find({user: test.tokens.employee1._id}).populate('inventory');\n      await test.updateInventoryDetails([cards[0].inventory._id], {\n        orderNumber: '1000'\n      })\n      .then(async res => {\n        expect(res).to.have.status(200);\n        const inventory = await Inventory.findById(cards[0].inventory._id);\n        expect(inventory.orderNumber).to.be.equal('1000');\n      })\n    });\n\n    it('should not allow the user to update values which are non-mutable', async function () {\n      let cards = await Card.find({user: test.tokens.employee1._id}).populate('inventory');\n      test.updateInventoryDetails([cards[0].inventory._id], {\n        hasVerifiedBalance: true\n      })\n      .then(async () => {\n        const inventory = await Inventory.findById(cards[0].inventory._id);\n        expect(inventory.hasVerifiedBalance).to.be.equal(false);\n      })\n    });\n\n    it('should update the liquidationSoldFor value when liquidationRate changes', async function () {\n      let cards = await Card.find({user: test.tokens.employee1._id}).populate('inventory');\n      test.updateInventoryDetails([cards[0].inventory._id], {\n        liquidationRate: 0.5\n      })\n      .then(async () => {\n        const inventory = await Inventory.findById(cards[0].inventory._id);\n        expect(inventory.liquidationSoldFor).to.be.equal(10);\n      })\n    });\n  });\n});\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}