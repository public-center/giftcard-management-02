{"version":3,"sources":["api/card/card.controller.js"],"names":["req","res","dbRetailer","body","retailer","number","pin","_id","requestId","isPlainObject","gsId","aiId","params","$or","push","findOne","findById","status","json","err","log","responseCode","card","balance","verifiedBalance","balanceStatus","save","balanceInquiry","user","company","create","method","controller","revision","stack","error","console","checkBalance","retailerId","checkBiIdExists","checkBiAvailable","cardId","userId","companyId","retailerToUse","constructor","name","checkCardBalance","userid","toString","_card","findByIdAndUpdate","$set","updateBalance","store","e","dbCard","dbCustomer","createDefaultCustomer","then","customer","findCards","populate","isTestCard","inventory","reason","tzOffset","userTime","substr","utc","add","parseInt","toDate","created","path","model","settings","margin","populateMerchValues","buyRate","sellRate","catch","newCard","customerId","userCompany","find","$exists","sort","cards","data","getExistingCards","merchandise","remove","getSettings","editCard","cardCompany","cardUser","role","deferredResponse","cardUpdateResponse","result","ok","removeCard","_cardId","removeValue","handleRemoveCardResponse","deleteCard","dbCards","dbInventories","modifiedDenials","transaction","callbackUrl","rejectionTotal","thisOrderPurchaseAmount","realUserTime","noSmpCards","dbCompanySettings","thisCard","parseFloat","buyAmount","continueSale","forEach","sellTo","reduce","determineOrderTotal","isNaN","denialPayment","paidTowardsRejection","amount","Promise","all","createInventory","cardIds","$in","addInventoryToCards","receipt","key","total","appliedTowardsDenials","grandTotal","remainingDenials","modifiedDenialAmount","inventories","rollBackInventory","addToInventory","getInventoryFromCard","type","inventoryId","isStaging","resolve","reject","promises","sendCallback","setCardValue","customerUpdates","credits","Array","isArray","rejections","isApi","realBuyAmount","rejected","rejectAmount","credited","creditAmount","deltaAmount","indexOf","splice","rejectedDate","Date","now","creditedDate","Math","abs","handleInventoryReject","ids","inventoriesFinal","isTransaction","update","id","rejectCards","getExistingCardsReceipt","modifyInventory","updateDetails","createFakeCards","uploadCards","uploadFixes","runBi","moveForSale","editBalance","massUpdate","resellCards","defaultName","testRetailerIds","testNumbers","allowTest","testBiMockData","createCardUpdate","biResponse","manualCodes","biCodes","timeout","headerError","authenticationError","invalid","retailerNotSupported","retailerDisabled","inStoreBalanceOnly","phoneBalanceOnly","systemDown","test","success","updateBiLog","unknownRequest","verificationType","responseDateTime","responseMessage","finalized","updateCardDuringBalanceInquiry","debug","updates","valid","hasBalance","biSearchParams","biParams","response_datetime","handleBiResponse","stdout","stderr","arguments","response","JSON","parse","final","Object","assign","toObject","helpersPath","__dirname","exec","env","script","vistaBiUser","handleBiResponseBound","bind","stringify","length","reqUser","firstName","lastName","stateId","address1","city","state","zip","phone","uid","reconciliation","send","ensureValidInventoryNumber","input","companySettings","inventoryPromises","proceedWithSale","autoSell","serviceFee","sellRateAtPurchase","rate","cardPromises","dbInventory","errorPromises","curr","next","value","addedToLiquidation","soldToLiquidation","updateInventoryValue","liquidationRate","liquidationSoldFor","smp","activityStatus","cqAch","batch","smps","mutable","toUpperCase","oldBatch","$pull","$addToSet","callback","map","count","promise","limit","retailers","sellRates","i","createNewFakeCard","Error","file","files","fileName","filename","stream","createReadStream","cardCount","csvStream","on","record","thisRecord","retailerName","pipe","findRetailerFix","RegExp","findCardToFix","foundCard","newCardValues","best","replace","cardParams","currentCard","thisInt","setInterval","foundCards","clearInterval","updateInventoryBalance","values","updateParams","multi"],"mappings":"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","file":"api/card/card.controller.js","sourcesContent":["import fs from 'fs';\nimport csv from 'fast-csv';\nimport child_process from 'child_process';\nimport _ from 'lodash';\n\nimport '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport Card from './card.model';\nimport CardUpdate from '../cardUpdates/cardUpdates.model';\nimport DeferredInquiries from '../deferredBalanceInquiries/deferredBalanceInquiries.model';\nimport Inventory from '../inventory/inventory.model';\nimport Customer from '../customer/customer.model';\nimport '../company/companySettings.model';\nimport Company from '../company/company.model';\nimport ErrorLog from '../errorLog/errorLog.model';\nimport Receipt from '../receipt/receipt.model';\nimport Retailer from '../retailer/retailer.model';\nimport Batch from '../batch/batch.model';\nimport DenialPayment from '../denialPayment/denialPayment.model';\nimport User from '../user/user.model';\nimport path from 'path';\nimport moment from 'moment';\nimport config, {smpIds} from '../../config/environment';\nimport BiRequestLog from '../biRequestLog/biRequestLog.model';\nimport Callback from '../callbackLog/callback';\nimport {retailerSetBuyAndSellRates} from '../retailer/retailer.controller';\nimport {determineSellTo} from '../card/card.helpers';\nimport {recalculateTransactionAndReserve} from '../card/card.helpers';\nimport {getGitRev} from '../../helpers/errors';\n\n// Default user name\nconst defaultName = '__default__';\n\n/**\n * Test cards\n */\nconst testRetailerIds = ['952', '1045'];\nconst testNumbers = ['55555', '44444', '33333', '22222'];\nconst allowTest = true;\n\n// Output BI results for testing\nexport const testBiMockData = [];\n\n/**\n * Create an update record when a card is updated\n * @param userId User ID of the user making the request\n * @param biResponse Response from balance inquiry service\n * @param card Card document\n * @param balance Card balance\n * @returns {*}\n */\nfunction createCardUpdate(userId, biResponse, card, balance) {\n  // Create update record\n  const update = new CardUpdate();\n  update.card = card._id;\n  update.user = [userId];\n  const manualCodes = [config.biCodes.timeout, config.biCodes.headerError, config.biCodes.authenticationError,\n                       config.biCodes.invalid, config.biCodes.retailerNotSupported, config.biCodes.retailerDisabled,\n                       config.biCodes.inStoreBalanceOnly, config.biCodes.phoneBalanceOnly, config.biCodes.systemDown];\n  // Retailer not supported\n  if (manualCodes.indexOf(biResponse.responseCode) !== -1 || /error/i.test(biResponse)) {\n    update.balanceStatus = 'manual';\n    // Success\n  } else if (biResponse.responseCode === config.biCodes.success) {\n    update.balanceStatus = 'received';\n    update.balance = balance;\n    // Default to defer\n  } else {\n    update.balanceStatus = 'deferred';\n  }\n  return update.save();\n}\n\n/**\n * Update BI log\n * @param log BI log\n * @param biResponse Response from BI\n * @param balance Balance\n * @return {*}\n */\nfunction updateBiLog(log, biResponse, balance) {\n  if (typeof balance !== 'undefined') {\n    log.balance = balance;\n  }\n  // Update unless unknown, auth error, or system problems\n  if ([config.biCodes.unknownRequest, config.biCodes.headerError, config.biCodes.systemDown].indexOf(log.responseCode) === -1) {\n    log.verificationType = biResponse.verificationType;\n    log.responseDateTime = biResponse.responseDateTime;\n    // Insert request ID\n    if (typeof log.requestId === 'undefined') {\n      log.requestId = biResponse.requestId;\n    }\n    log.responseCode = biResponse.responseCode;\n    log.responseMessage = biResponse.responseMessage;\n    if ([config.biCodes.success, config.biCodes.invalid, config.biCodes.retailerNotSupported, config.biCodes.inStoreBalanceOnly, config.biCodes.phoneBalanceOnly].indexOf(log.responseCode) > -1) {\n      log.finalized = true;\n    }\n  }\n  return log;\n}\n\n/**\n * Update a card during a balance inquiry\n * @param dbCard Card document\n * @param update Update document\n * @param balance Card balance\n * @param biResponse Exact response from BI\n * @returns {*}\n */\nfunction updateCardDuringBalanceInquiry(dbCard, update, balance, biResponse) {\n  if (config.debug) {\n    console.log('**************UPDATE CARD DURING BALANCE INQUIRY**********');\n    console.log(dbCard);\n    console.log(update);\n    console.log(balance);\n    console.log(biResponse);\n  }\n  // Push update onto card\n  dbCard.updates.push(update._id);\n  // Update card info\n  dbCard.balanceStatus = update.balanceStatus;\n  // Bad card\n  if (dbCard.balanceStatus === 'bad' || dbCard.balanceStatus === 'manual') {\n    // Set invalid\n    if (dbCard.balanceStatus === 'bad') {\n      dbCard.valid = false;\n    }\n    return dbCard.save();\n  }\n  // Successful balance\n  const hasBalance = typeof balance !== 'undefined';\n  // For when we don't have a card\n  const biSearchParams = {\n    number: dbCard.number,\n    retailerId: dbCard.retailer._id\n  };\n  if (dbCard.pin) {\n    biSearchParams.pin = dbCard.pin;\n  }\n\n  // Update log if we have one\n  BiRequestLog.findOne({\n    $or: [{\n      card: dbCard._id\n    }, biSearchParams]\n  })\n  .then(log => {\n    if (log) {\n      // Update BI log\n      log = updateBiLog(log, biResponse, balance);\n      return log.save();\n    } else {\n      return false;\n    }\n  })\n  // Create log if we don't have one\n  .then(log => {\n    // Create BiLog\n    if (log === false) {\n      const biParams = {\n        number: dbCard.number,\n        retailerId: dbCard.retailer._id,\n        card: dbCard._id,\n        responseDateTime: biResponse.response_datetime,\n        requestId: biResponse.requestId,\n        responseCode: biResponse.responseCode,\n        responseMessage: update.balanceStatus\n      };\n      if (dbCard.pin) {\n        biParams.pin = dbCard.pin;\n      }\n      if (hasBalance) {\n        biParams.balance = balance;\n      }\n      log = new BiRequestLog(biParams);\n      return log.save()\n    }\n  })\n  // Update card and inventory\n  .then(() => {\n    // Have inventory, update it\n    if (hasBalance && dbCard.inventory) {\n      dbCard.inventory.verifiedBalance = balance;\n      dbCard.inventory.save().then(() => {});\n      // No inventory, set VB on card\n    } else if (hasBalance) {\n      dbCard.verifiedBalance = balance;\n    }\n\n    return dbCard.save();\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'updateCardDuringBalanceInquiry',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err\n    });\n    console.log('**************ERR IN updateCardDuringBalanceInquiry**********');\n    console.log(e);\n  });\n}\n\n/**\n * Handle BI response\n * @param resolve\n * @param reject\n * @param _id\n * @param userId\n * @param error\n * @param stdout Example: { verificationType: 'PJVT_BOT',\n                            balance: 'Null',\n                            response_datetime: '2017-08-17 12:06:30.343142',\n                            responseMessage: 'Delayed Verification Required',\n                            requestId: '2085642553683708326',\n                            responseCode: '010',\n                            request_id: '2085642553683708326',\n                            responseDateTime: '2017-08-17 12:06:30.343142',\n                            recheck: 'True',\n                            recheckDateTime: '2017-08-17 13:06:31.230734' }\n * @param stderr\n * @return {*}\n */\nfunction handleBiResponse(resolve, reject, _id, userId, error, stdout, stderr) {\n  console.log('**************HANDLE BI RES**********');\n  console.log(arguments);\n  console.log(stdout);\n  console.log(stderr);\n  let biResponse;\n  if (config.debug) {\n    console.log('**************BI STDOUT**********');\n    console.log(stdout);\n  }\n  if (stderr) {\n    // No card\n    if (_id === null) {\n      return resolve({response: 'Unable to retrieve balance'});\n    }\n    return reject(stderr);\n  }\n\n  try {\n    // BI response output\n    biResponse = JSON.parse(stdout);\n  } catch (err) {\n    if (err.constructor.name === 'SyntaxError') {\n      return null;\n    }\n  }\n  // Check response\n  if (config.debug) {\n    console.log('**************BI RESPONSE**********');\n    console.log(biResponse);\n  }\n  // Ignore BI errors\n  if (typeof biResponse === 'string') {\n    return resolve(biResponse);\n  }\n  let success;\n  // Success or failure of BI request\n  if (biResponse.responseMessage) {\n    success = biResponse.responseMessage === 'success';\n  }\n  let balance = null;\n  // Parse successful response\n  if (success) {\n    // Balance\n    balance = parseFloat(biResponse.balance);\n    // Balance is null\n    if (isNaN(balance)) {\n      balance = null;\n    }\n    // No card ID, just return balance, don't update card\n    if (_id === null) {\n      const final = Object.assign(biResponse, {balance});\n      return resolve(final);\n    }\n  } else {\n    // No card ID, just return balance, don't update card\n    if (_id === null) {\n      if (typeof biResponse === 'string') {\n        biResponse = {error: biResponse}\n      }\n      return resolve(biResponse);\n    }\n  }\n  // Existing card\n  let dbCard = {};\n  // Find card\n  return Card.findById(_id)\n  .populate('retailer')\n  .populate('inventory')\n  // Update record\n  .then(card => {\n    dbCard = card;\n    // Create update record\n    return createCardUpdate(userId, biResponse, card, balance);\n  })\n  // Update card\n  .then(update => updateCardDuringBalanceInquiry(dbCard, update, balance, biResponse))\n  .then(() => {\n    // Attach request ID\n    if (!_.isPlainObject(dbCard)) {\n      dbCard = dbCard.toObject();\n      dbCard.requestId = biResponse.requestId;\n    }\n    resolve(dbCard);\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'handleBiResponse',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: userId\n    });\n    reject(err)\n  });\n}\n\n/**\n * Perform the actual balance inquiry\n * @param retailerId Retailer ID\n * @param number Card number\n * @param pin Card pin\n * @param _id Card record ID\n * @param userId User ID making request\n * @param companyId Company ID\n * @param requestId Request ID for deferred checks\n */\nexport function balanceInquiry(retailerId, number, pin, _id, userId, companyId, requestId) {\n  const helpersPath = path.resolve(__dirname, '../../../helpers');\n  let exec;\n  let env;\n  // If vista, use vista\n  const script = companyId && Array.isArray(config.vistaBiUser) &&\n                 config.vistaBiUser.indexOf(companyId.toString()) > -1 ? 'balanceInquiry-vista.php' :\n                 'balanceInquiry.php';\n  if (config.env === 'development' || config.env === 'test') {\n    env = 'development=true staging=false';\n  } else if (config.isStaging === 'true') {\n    env = 'development=false staging=true';\n  } else {\n    env = 'development=false staging=false';\n  }\n  if (requestId) {\n    exec = `${env} php -f ${helpersPath}/${script} ${requestId}`;\n  } else {\n    if (pin) {\n      exec = `${env} php -f ${helpersPath}/${script} ${retailerId} ${number} ${pin}`;\n    } else {\n      exec = `${env} php -f ${helpersPath}/${script} ${retailerId} ${number}`;\n    }\n  }\n  // Separate out the BI response for testing purposes\n  if (config.env === 'test') {\n    return new Promise((resolve, reject) => {\n      const handleBiResponseBound = handleBiResponse.bind(this, resolve, reject,  _id, userId);\n      handleBiResponseBound(null, JSON.stringify(testBiMockData[testBiMockData.length - 1].params), null);\n    });\n  } else {\n    console.log('**************EXEC**********');\n    console.log(exec);\n  }\n  return new Promise((resolve, reject) => {\n    const handleBiResponseBound = handleBiResponse.bind(this, resolve, reject, _id, userId);\n    child_process.exec(exec, handleBiResponseBound);\n  });\n}\n\n/**\n * Check a card balance\n */\nexport async function checkBalance(req, res) {\n  let dbRetailer;\n  let {retailer, number, pin = '', _id = null, requestId = null} = req.body;\n  try {\n    // Retailer object with BI IDs\n    if (_.isPlainObject(retailer) && (retailer.gsId || retailer.aiId)) {\n      const params = {$or: []};\n      if (typeof retailer.gsId !== 'undefined') {\n        params.$or.push({gsId: retailer.gsId});\n      }\n      if (typeof retailer.aiId !== 'undefined') {\n        params.$or.push({aiId: retailer.aiId});\n      }\n      dbRetailer = await Retailer.findOne(params);\n    } else if (typeof retailer === 'string') {\n      dbRetailer = await Retailer.findById(retailer);\n    } else {\n      return res.status(400).json({err: 'Retailer not found'});\n    }\n    // Get log\n    const log = await BiRequestLog.findOne({\n      number, pin, retailer: dbRetailer._id\n    });\n    // BI already finished\n    if (log && 'responseCode' in log && (log.responseCode === '000' || log.responseCode === '900011')) {\n      const card = await Card.findOne({\n        number, pin, retailer: dbRetailer\n      });\n      if (log.responseCode === '000' && log.balance) {\n        card.verifiedBalance = log.balance;\n        card.balanceStatus = 'received';\n      } else if (log.responseCode === '900011') {\n        card.verifiedBalance = log.balance;\n        card.balanceStatus = 'received';\n      }\n      return await card.save();\n      // No log, begin BI\n    } else {\n      return await balanceInquiry(dbRetailer.gsId || dbRetailer.aiId, number, pin, _id, req.user._id, req.user.company, requestId);\n    }\n  } catch (err) {\n    await ErrorLog.create({\n      method: 'handleBiResponse',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    console.log('**************CHECK BALANCE ERR**********');\n    console.log(err);\n    res.status(500).json(err);\n  }\n}\n\n/**\n * Check to see if a BI ID exists for a retailer\n * @param retailer\n */\nfunction checkBiIdExists(retailer) {\n  if (!(retailer.gsId || retailer.aiId)) {\n    throw 'biUnavailableThisRetailer';\n  }\n}\n\n/**\n * Check to see if a retailer is available for BI\n * @param retailerId\n * @return {Promise.<null|*>}\n */\nasync function checkBiAvailable(retailerId) {\n  const retailer = await Retailer.findById(retailerId);\n  checkBiIdExists(retailer);\n  return retailer;\n}\n\n/**\n * Checks a card balance\n *\n * @param {Object|String} retailer\n * @param {String} number\n * @param {String} pin\n * @param {String} cardId\n * @param {String} requestId\n * @param userId\n * @param companyId\n */\nexport async function checkCardBalance(retailer, number, pin, cardId, requestId, userId, companyId) {\n  let retailerToUse;\n  // Plain object retailer\n  if (_.isPlainObject(retailer) && (retailer.gsId || retailer.aiId)) {\n    checkBiIdExists(retailer);\n    retailerToUse = retailer;\n  } else if (retailer.constructor.name === 'model') {\n    checkBiIdExists(retailer);\n    retailerToUse = retailer;\n  // Object ID as string or actual object ID\n  } else if (typeof retailer === 'string' || retailer.constructor.name === 'ObjectID') {\n    retailerToUse = await checkBiAvailable(retailer);\n    checkBiIdExists(retailer);\n  } else {\n    throw 'biUnavailableThisRetailer';\n  }\n\n  return balanceInquiry(retailerToUse.gsId || retailerToUse.aiId, number, pin, cardId, userId, companyId, requestId);\n}\n\n/**\n * Update card balance\n */\nexport async function updateBalance(req, res) {\n  try {\n    const userid = req.user._id.toString();\n    const _card = await Card.findOne({_id: req.body._id});\n    if (!_card) {\n      return res.status(404).json({err: 'Card does not exist'});\n    }\n    if (_card.user.toString() !== userid) {\n      return res.status(401).json({err: 'Card does not belong to this customer'});\n    }\n    const card = req.body;\n    await Card.findByIdAndUpdate(card._id, {\n      $set: {\n        balance: card.balance\n      }\n    });\n    return res.json({});\n  } catch (err) {\n    await ErrorLog.create({\n      method: 'updateBalance',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    console.log('**************ERR IN UPDATE BALANCE**********');\n    console.log(err);\n    return res.status(500).json(err);\n  }\n}\n\n/**\n * Find cards which already exist in the DB\n * @param retailer\n * @param number\n * @param customer\n * @param pin\n */\nfunction findCards(retailer, number, customer, pin) {\n  if (retailer && number && customer) {\n    return Card.findOne({\n      retailer,\n      number,\n      customer\n    });\n  } else if (typeof retailer !== 'undefined' && typeof number !== 'undefined') {\n    if (pin) {\n      return Card.findOne({\n        retailer,\n        number,\n        pin\n      })\n    } else {\n      return Card.findOne({\n        retailer,\n        number\n      })\n    }\n  }\n}\n\n/**\n * Create a default user if necessary\n * @param body Request body\n * @param reqUser Current user\n * @returns {Promise}\n */\nfunction createDefaultCustomer(body, reqUser) {\n  return new Promise((resolve) => {\n    if (body.customer === 'default') {\n      // Find default user this company\n      Customer.findOne({\n        company: reqUser.company,\n        firstName: defaultName,\n        lastName: defaultName\n      })\n      .then(customer => {\n        // No default customer, create one\n        if (!customer) {\n          const customer = new Customer({\n            firstName: defaultName,\n            lastName: defaultName,\n            stateId: defaultName,\n            address1: defaultName,\n            city: defaultName,\n            state: defaultName,\n            zip: defaultName,\n            phone: defaultName,\n            company: reqUser.company\n          });\n          customer.save()\n          .then(customer => {\n            resolve(customer._id);\n          })\n        } else {\n          // Default user exists\n          resolve(customer._id);\n        }\n      });\n    } else {\n      resolve(body.customer);\n    }\n  });\n}\n\n/**\n * Check if this is a test card\n * @param card\n * @returns {boolean}\n */\nfunction isTestCard(card) {\n  return allowTest && testRetailerIds.indexOf(card.uid) !== -1 && testNumbers.indexOf(card.number) !== -1;\n}\n\n/**\n * Input a new card\n */\nexport async function newCard(req, res){\n  const body = req.body;\n  const user = req.user;\n  const store = body.store || user.store;\n  let pin;\n  try {\n    pin = body.pin;\n  } catch (e) {\n    pin = null;\n  }\n  let dbCard, dbCustomer;\n  return createDefaultCustomer(body, user)\n  .then(customer => {\n    dbCustomer = customer;\n    // See if this card already exists\n    return findCards(body.retailer, body.number, null, pin)\n      .populate('retailer')\n  })\n  // If card exists, throw error\n  .then(card => {\n    if (card) {\n      // Don't overwrite test card\n      if (!isTestCard(card) && !card.inventory) {\n        return card;\n      }\n      dbCard = card;\n      res.status(500).json({reason: 'cardExists'});\n      throw 'cardExists';\n    }\n  })\n  .then(card => {\n    if (typeof card === 'undefined') {\n      card = new Card(body);\n    }\n    card.user = user._id;\n    card.balanceStatus = 'unchecked';\n    // User time when card was created\n    const tzOffset = body.userTime.substr(-6);\n    card.userTime = moment.utc().add(parseInt(tzOffset), 'hours').toDate();\n    card.created = moment.utc().add(parseInt(tzOffset), 'hours').toDate();\n    card.customer = dbCustomer;\n    dbCard = card;\n    // Save\n    return card.save()\n  })\n  .then(card => {\n    if (!card) {\n      return false;\n    }\n    // Retrieve card with retailer\n    return Card.findById(card._id)\n      .populate({\n        path: 'retailer',\n        populate: {\n          path: 'buyRateRelations',\n          model: 'BuyRate'\n        }\n      })\n      .populate('customer');\n  })\n  // Return\n  .then(card => {\n    if (!card) {\n      return false;\n    }\n    dbCard = card;\n    return Company.findById(user.company)\n      .populate({\n        path: 'settings',\n        populate: {\n          path: 'autoBuyRates',\n          model: 'AutoBuyRate'\n        }\n      });\n  })\n    // Get card buy and sell rate\n  .then(company => {\n    if (!company) {\n      return false;\n    }\n    const settings = company.settings ? company.settings : {margin: 0.03};\n    // Populate merch\n    let retailer = dbCard.retailer.populateMerchValues(dbCard);\n    retailer = retailerSetBuyAndSellRates(retailer, settings, store, null, dbCard.balance);\n    dbCard.buyRate = retailer.buyRate;\n    dbCard.sellRate = retailer.sellRate;\n    return dbCard.save();\n  })\n  .then(card => {\n    if (card) {\n      return res.json(card);\n    }\n    return res.status(500).json({error: 'Unable to create card'});\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'newCard',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    console.log('**************NEW CARD ERR**********');\n    console.log(err);\n    throw err;\n  });\n}\n\n/**\n * Get existing cards\n */\nexport async function getExistingCards(req, res) {\n  try {\n    const customerId = req.params.customerId;\n    const userCompany = req.user.company;\n    // Make sure that the customer being queried belongs to the company that the user belongs to\n    const customer = await Customer.findOne({_id: customerId, company: userCompany});\n    if (!customer) {\n      return res.status(401).json({err: 'Customer does not belong to this company'});\n    }\n    // Get cards for this customer\n    const cards = await Card.find({\n      customer,\n      inventory: {$exists: false}\n    })\n    .populate('retailer')\n    .sort({created: -1});\n    return res.json({data: cards});\n  } catch (err) {\n    await ErrorLog.create({\n      method: 'getExistingCards',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json({err});\n  }\n}\n\n/**\n * Get existing cards for receipt\n */\nexport function getExistingCardsReceipt(req, res) {\n  let customer = req.params.customerId;\n  // Find inventories for the default customer for this store\n  if (customer === 'default') {\n\n  } else {\n    Inventory\n    // Find cards in inventory that have not been reconciled\n    .find({\n      reconciliation: {$exists: false},\n      customer\n    })\n    .sort({created: -1})\n    .populate('retailer')\n    .populate('card')\n    .then(inventories => res.json({data: inventories}))\n    .catch(async err => {\n      await ErrorLog.create({\n        method: 'getExistingCardsReceipt',\n        controller: 'card.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n      return res.status(500).json(err);\n    });\n  }\n}\n\n/**\n * Edit an existing card\n */\nexport async function editCard(req, res) {\n  const {_id, number, pin, retailer: {retailerId}, merchandise} = req.body;\n  const userid = req.user._id.toString();\n\n  const _card = await Card.findOne({_id: _id});\n  if (!_card) {\n    return res.status(404).json({err: 'Card does not exist'});\n  }\n  if (_card.user.toString() !== userid) {\n    return res.status(401).json({err: 'Card does not belong to this customer'});\n  }\n  let dbCard;\n  // Find and update card\n  await Card.findById(_id)\n  .populate('retailer')\n  .then(card => {\n    dbCard = card;\n    dbCard.number = number;\n    dbCard.pin = pin;\n    dbCard.merchandise = merchandise;\n    return dbCard.save();\n  })\n  // Remove any existing deferred\n  .then((card) => {\n    dbCard = card;\n    return DeferredInquiries.remove({card: _id});\n  })\n  .then(() => {\n    return Company.findById(req.user.company);\n  })\n  .then(company => {\n    return company.getSettings();\n  })\n  // Recalculate buy and sell rates\n  .then(settings => {\n    const retailer = retailerSetBuyAndSellRates(dbCard.retailer, settings, req.user.store, null, dbCard.merchandise);\n    dbCard.buyRate = retailer.buyRate;\n    dbCard.sellRate = retailer.sellRate;\n    return dbCard.save();\n  })\n  // return response\n  .then(() => {\n    return res.json(dbCard);\n  })\n  // Begin balance inquiry\n  .then(() => {\n    return balanceInquiry(retailerId, number, pin, _id, req.user._id, req.user.company)\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'editCard',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    res.status(500).json(err);\n  });\n}\n\n/**\n * Remove a card\n * @param cardId Card ID\n * @param user User making the request\n * @returns {*}\n */\nasync function removeCard(cardId, user) {\n  const card = await Card.findById(cardId);\n  // Card not found\n  if (!card) {\n    return 'notFound';\n  }\n  let cardCompany = card.company;\n  if (!cardCompany) {\n    const cardUser = await User.findOne(card.user[0]);\n    cardCompany = cardUser.company;\n  }\n  // Card does not belong to the requesting user\n  if (user.role === 'corporate-admin' && (cardCompany.toString() !== user.company.toString())) {\n    return 'unauthorized';\n  } else if (user.role === 'employee' && (card.user[0].toString() !== user._id.toString())) {\n    return 'unauthorized';\n  }\n  // Card cannot be removed because an inventory is attached\n  if (card.inventory) {\n    return 'inventoryAttached';\n  }\n  const deferredResponse = await DeferredInquiries.remove({card: cardId});\n  const cardUpdateResponse = await CardUpdate.remove({card: cardId});\n  if(deferredResponse.result.ok && cardUpdateResponse.result.ok){\n   return 'CardRemoved';\n  }\n}\n\n/**\n * handle the response from removing a card\n * @param res\n * @param removeValue Return value from remove card\n * @return {*}\n */\nfunction handleRemoveCardResponse(res, removeValue) {\n  if (removeValue) {\n    switch (removeValue) {\n      case 'notFound':\n        res.status(404).send('');\n        return true;\n      case 'unauthorized':\n        res.status(401).send('');\n        return true;\n      case 'inventoryAttached':\n        res.status(400).json({err: 'Cannot remove a card with an inventory attached'});\n        return true;\n      case 'CardRemoved':\n        res.status(200).send('Card successfully removed');\n        return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Delete a card\n */\nexport async function deleteCard(req, res) {\n  try {\n    // Remove card\n    const _cardId = req.params.cardId;\n    const removeValue = await removeCard(_cardId, req.user);\n\n    // Attempt to remove card\n    if (!handleRemoveCardResponse(res, removeValue)) {\n      return res.status(500).json({err: 'Unable to handle card removal'});\n    }\n  }\n   catch (err) {\n    console.log('**************DELETE CARD ERR**********');\n    console.log(err);\n     await ErrorLog.create({\n       method: 'deleteCard',\n       controller: 'card.controller',\n       revision: getGitRev(),\n       stack: err.stack,\n       error: err,\n       user: req.user._id\n     });\n    return res.status(500).json(err);\n  }\n}\n\n/**\n * Make sure we have a valid number for inventory props\n * @param input\n */\nfunction ensureValidInventoryNumber(input) {\n  if (isNaN(input)) {\n    return 0;\n  }\n  if (typeof input !== 'number') {\n    return 0;\n  }\n  return input;\n}\n\n/**\n * Create inventories\n * @param cards\n * @param userTime\n * @param user\n * @param companySettings\n * @param tzOffset Timezone offset\n * @param store Store override\n * @param realUserTime Calculated userTime\n * @param transaction Transaction data, if transaction\n * @param callbackUrl Callback URL for when verified balance is retrieved\n */\nfunction createInventory(cards, userTime, user, companySettings, tzOffset, store = null, realUserTime, transaction = false, callbackUrl) {\n  const inventoryPromises = [];\n  _.forEach(cards, card => {\n    const inventory = new Inventory();\n    // Save the local time that the user created this inventory\n    inventory.userTime = userTime;\n    let balance = parseFloat(card.balance);\n    const buyRate = parseFloat(card.buyRate);\n    const buyAmount = parseFloat(card.buyAmount);\n    inventory.card = card._id;\n    inventory.user = user._id;\n    inventory.store = store || user.store;\n    inventory.company = user.company;\n    inventory.balance = ensureValidInventoryNumber(balance);\n    inventory.buyRate = ensureValidInventoryNumber(buyRate);\n    inventory.buyAmount = ensureValidInventoryNumber(buyAmount);\n    inventory.customer = card.customer;\n    inventory.retailer = card.retailer._id;\n    // Auto-sell\n    inventory.proceedWithSale = companySettings ? companySettings.autoSell : true;\n    // Margin\n    inventory.margin = companySettings ? companySettings.margin : 0.03;\n    // Merchandise\n    inventory.merchandise = card.merchandise;\n    // Transaction\n    inventory.isTransaction = !!transaction;\n    inventory.transaction = transaction;\n    inventory.callbackUrl = callbackUrl;\n    inventory.serviceFee = typeof companySettings.serviceFee === 'number' ? companySettings.serviceFee : config.serviceFee;\n    // Card is already populated with merch values\n    const sellTo = determineSellTo(card.retailer, inventory.balance, companySettings);\n    if (sellTo) {\n      // Rate at the time of purchase\n      inventory.sellRateAtPurchase = sellTo.rate;\n      // Timezone offset\n      inventory.tzOffset = tzOffset;\n      inventory.created = realUserTime;\n      inventory.userTime = realUserTime;\n      inventoryPromises.push(inventory.save());\n    }\n  });\n  return Promise.all(inventoryPromises);\n}\n\n/**\n * Add inventory records to cards after inventory is created\n * @param cards\n * @param dbInventories\n */\nfunction addInventoryToCards(cards, dbInventories) {\n  const cardPromises = [];\n  // Iterate cards\n  cards.forEach(card => {\n    // iterate inventories and find the corresponding inventory for each card\n    dbInventories.forEach(dbInventory => {\n      if (card._id.toString() === dbInventory.card.toString()) {\n        card.inventory = dbInventory._id;\n        cardPromises.push(card.save());\n      }\n    });\n  });\n  return Promise.all(cardPromises);\n}\n\n/**\n * Roll back additions to inventory\n * @param dbCards\n * @param dbInventories\n */\nfunction rollBackInventory(dbCards, dbInventories) {\n  const errorPromises = [];\n  // Roll back cards\n  dbCards.forEach(card => {\n    delete card.inventory;\n    errorPromises.push(card.save());\n  });\n  // Remove inventories\n  dbInventories.forEach(inventory => {\n    errorPromises.push(inventory.remove());\n  });\n  return Promise.all(errorPromises);\n}\n\n/**\n * Determine sale total for display on receipt (reducer)\n * @returns Number\n */\nfunction determineOrderTotal(curr, next) {\n  // Use buy amount explicitly set\n  if (typeof next.buyAmount === 'number') {\n    return curr + next.buyAmount;\n  }\n  const balance = parseFloat(next.balance);\n  const buyRate = parseFloat(next.buyRate);\n  // No balance, ain't worth it\n  if (!balance || !buyRate || isNaN(balance) || isNaN(buyRate)) {\n    return curr + 0;\n  }\n  // Use buy rate and balance\n  if (next.buyRate) {\n    return curr + (buyRate * balance);\n  }\n  // Give up on life, your hopes, your dreams\n  return curr + 0;\n}\n\n/**\n * Add to inventory\n */\nexport async function addToInventory(req, res) {\n  let dbCards = [];\n  let dbInventories = [];\n  try {\n    const {userTime, modifiedDenials, store, transaction = null, callbackUrl = null} = req.body;\n    const user = req.user;\n    let {cards} = req.body;\n    let rejectionTotal = 0, thisOrderPurchaseAmount = 0;\n    const tzOffset = userTime.substr(-6);\n    const realUserTime = moment.utc().add(parseInt(tzOffset), 'hours').toDate();\n    let company;\n    let noSmpCards = [];\n    company = await Company.findById(user.company);\n    const dbCompanySettings = await company.getSettings();\n    // Set buyAmount and balance for each card\n    for (const thisCard of cards) {\n      const $set = {\n        balance: parseFloat(thisCard.balance),\n      };\n      if (thisCard.buyAmount) {\n        $set.buyAmount = parseFloat(thisCard.buyAmount);\n      }\n      const dbCard = await Card.findByIdAndUpdate(thisCard._id, {\n        $set\n      }).populate('retailer');\n      dbCards.push(await dbCard.save());\n    }\n    let continueSale = true;\n    // Check to make sure we can sell all cards\n    dbCards.forEach(card => {\n      // Assign merch values, assume default if not set\n      const retailer = card.retailer.populateMerchValues(card);\n      const sellTo = determineSellTo(retailer, card.balance, dbCompanySettings);\n      if (!sellTo) {\n        continueSale = false;\n        noSmpCards.push(card);\n      }\n    });\n    // Don't continue\n    if (!continueSale) {\n      return res.status(400).json({reason: 'noSmp', cards: noSmpCards});\n    }\n    // Remove any inventories which might exist for whatever reason\n    for (const thisCard of dbCards) {\n      if (thisCard.inventory) {\n        await Inventory.remove({\n          card: thisCard._id\n        });\n      }\n    }\n    // Get customer\n    let customer = await Customer.findOne({_id: cards[0].customer});\n    rejectionTotal = parseFloat(customer.rejectionTotal);\n    // Only subtract a specified amount from this sale if we have modified\n    thisOrderPurchaseAmount = cards.reduce(determineOrderTotal, 0);\n    // If we have a pending denial amount\n    if (customer && (typeof modifiedDenials === 'number' && modifiedDenials < rejectionTotal) ||\n        (!isNaN(rejectionTotal) && rejectionTotal)) {\n      let denialPayment;\n      // This amount is still owed\n      if (rejectionTotal > thisOrderPurchaseAmount || modifiedDenials) {\n        // Modified denials\n        const paidTowardsRejection = typeof modifiedDenials === 'number' && modifiedDenials ? modifiedDenials : thisOrderPurchaseAmount;\n        customer.rejectionTotal = rejectionTotal - paidTowardsRejection;\n        denialPayment = new DenialPayment({\n          amount: paidTowardsRejection,\n          userTime,\n          customer: customer._id\n        });\n        // No further amount owed\n      } else {\n        customer.rejectionTotal = 0;\n      }\n      // Make sure we didn't screw up here\n      customer.rejectionTotal = customer.rejectionTotal < 0 ? 0 : customer.rejectionTotal;\n      if (denialPayment) {\n        denialPayment = await denialPayment.save();\n      }\n      await Promise.all([\n        customer.save(),\n        denialPayment ? denialPayment.save() : null\n      ]);\n    }\n    // Create inventories\n    dbInventories = await createInventory(dbCards, userTime, req.user, dbCompanySettings, tzOffset, store, realUserTime, transaction, callbackUrl);\n    // Requery updated cards\n    const cardIds = [];\n    for (const inventory of dbInventories) {\n      cardIds.push(inventory.card);\n    }\n    dbCards = await Card.find({\n      '_id': {$in: cardIds}\n    });\n    // Add inventory to cards\n    await addInventoryToCards(dbCards, dbInventories);\n    let receipt = new Receipt();\n    // Create receipts\n    dbInventories.forEach((inventory, key) => {\n      if (!key) {\n        receipt.customer = inventory.customer;\n        receipt.userTime = realUserTime;\n        receipt.user = user._id;\n        receipt.store = store || req.user.store;\n        receipt.company = req.user.company;\n        // Amount of pending denials\n        receipt.rejectionTotal = rejectionTotal;\n        // Total amount of receipt\n        receipt.total = thisOrderPurchaseAmount;\n        // Applied towards denials\n        receipt.appliedTowardsDenials = 0;\n        // Grand total\n        receipt.grandTotal = 0;\n        // Amount remaining\n        receipt.remainingDenials = 0;\n        // Modified denial amount if we have one\n        if (typeof modifiedDenials === 'number') {\n          receipt.modifiedDenialAmount = modifiedDenials;\n        }\n        // Determine amount applied towards denials\n        if (rejectionTotal) {\n          // Apply modified amount\n          if (modifiedDenials) {\n            receipt.appliedTowardsDenials = modifiedDenials;\n            // Apply full amount\n          } else if (rejectionTotal >= thisOrderPurchaseAmount) {\n            receipt.appliedTowardsDenials = thisOrderPurchaseAmount;\n            // All denials paid, but receipt is higher value\n          } else {\n            receipt.appliedTowardsDenials = rejectionTotal;\n          }\n          receipt.grandTotal = thisOrderPurchaseAmount - receipt.appliedTowardsDenials;\n          // No denials, all cash\n        } else {\n          receipt.grandTotal = thisOrderPurchaseAmount;\n        }\n      }\n      receipt.inventories.push(inventory._id);\n    });\n    receipt = await receipt.save();\n    // Add receipt to inventories\n    for (const inventory of dbInventories) {\n      inventory.receipt = receipt._id;\n      await inventory.save();\n    }\n    return res.json(receipt);\n  } catch (err) {\n    await ErrorLog.create({\n      method: 'addToInventory',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    console.log('**************ADD TO INVENTORY ERR**********');\n    console.log(err);\n    // Roll back inventory actions\n    await rollBackInventory(dbCards, dbInventories);\n    res.status(500).json(err);\n  }\n}\n\n/**\n * Modify an inventory item (admin)\n */\nexport function modifyInventory(req, res) {\n  const body = req.body;\n  // Find the current inventory\n  Inventory.findById(body.inventory._id)\n  .then(inventory => {\n    switch (body.value) {\n      case 'notAddedToLiquidation':\n        inventory.addedToLiquidation = false;\n        inventory.soldToLiquidation = false;\n        break;\n      case 'addedToLiquidation':\n        inventory.addedToLiquidation = true;\n        inventory.soldToLiquidation = false;\n        break;\n      case 'rateVerified':\n        inventory.addedToLiquidation = true;\n        inventory.soldToLiquidation = false;\n        break;\n      case 'rateVerifiedNotAcceptable':\n        inventory.addedToLiquidation = true;\n        inventory.soldToLiquidation = false;\n        break;\n      case 'soldToLiquidation':\n        inventory.addedToLiquidation = true;\n        inventory.soldToLiquidation = true;\n        break;\n    }\n    inventory.save();\n  })\n  .then(inventory => res.json(inventory))\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'modifyInventory',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    console.log('**************MODIFY INVENTORY ERROR**********');\n    console.log(err);\n    return res.status(500).json(err);\n  });\n}\n\n/**\n * Update specific value on an inventory\n * @param inventory Inventory\n * @param key Key\n * @param value Value\n */\nfunction updateInventoryValue(inventory, key, value) {\n  if (typeof value !== 'undefined') {\n    switch (key) {\n      case 'created':\n        inventory.created = new Date(value);\n        inventory.userTime = new Date(value);\n        break;\n      // Update SMP rate and SMP paid\n      case 'liquidationRate':\n        value = parseFloat(value);\n        value = value > 1 ? value / 100 : value;\n        const balance = typeof inventory.verifiedBalance === 'number' ? inventory.verifiedBalance : inventory.balance;\n        inventory.liquidationRate = value;\n        inventory.liquidationSoldFor = balance * value;\n        break;\n      default:\n        inventory[key] = value;\n        inventory.card[key] = value;\n    }\n  }\n  return inventory;\n}\n\n\n/**\n * Change SMP, PIN, or number for a card\n * @param req\n * @param res\n */\nexport function updateDetails(req, res) {\n  const ids = req.body.ids;\n  const {smp, activityStatus, cqAch, batch} = req.body;\n  const body = req.body;\n  // SMPs\n  const smps = smpIds;\n  Inventory.find({\n    _id: {\n      $in: ids\n    }\n  })\n  .populate('card')\n  .populate('batch')\n  .then(async inventories => {\n    for (let inventory of inventories) {\n      // I have no idea why there are multiple values for liquidationSoldFor\n      const mutable = ['activityStatus', 'orderNumber', 'smpAch', 'cqAch', 'liquidationSoldFor', 'liquidationSoldFor2', 'liquidationRate',\n                       'customer', 'number', 'pin', 'created', 'user', 'store', 'margin', 'serviceFee', 'retailer'];\n      // Update mutable values\n      for (let key of mutable) {\n        inventory = updateInventoryValue(inventory, key, body[key])\n      }\n      if (smp) {\n        inventory.smp = smps[smp.toUpperCase()];\n      }\n      if (batch) {\n        const oldBatch = inventory.batch;\n        // Remove from old batch\n        await oldBatch.update({\n          $pull: {\n            inventories: inventory._id\n          }\n        });\n        // Add to new batch\n        await Batch.update({_id: batch}, {\n          $addToSet: {\n            inventories: inventory._id\n          }\n        });\n        // Update inventory batch\n        inventory.batch = batch;\n      }\n      await inventory.card.save();\n      await inventory.save();\n    }\n    // Send notification\n    if (typeof cqAch !== 'undefined' || activityStatus === 'sentToSmp') {\n      const callback = new Callback();\n      ids.map(id => {\n        Card.findOne({inventory: id})\n        .populate('inventory')\n        .then(card => {\n          if (!card || !card.inventory) {\n            return;\n          }\n          callback.sendCallback(card, card.inventory.cqAch ? 'cqPaymentInitiated' : 'cardFinalized');\n        });\n      });\n    }\n    res.json();\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'updateDetails',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    console.log('**************ERR IN CHANGE SMP**********');\n    console.log(err);\n    return res.status(500).json(err);\n  });\n}\n\n\n\n/**\n * Create fake cards\n */\nexport function createFakeCards(req, res) {\n  const {count, customer} = req.body;\n  let dbCustomer, dbRetailer;\n  const cards = [];\n  let promise;\n  if (customer) {\n    promise = Customer.findById(customer);\n  } else {\n    promise = Customer.findOne();\n  }\n  promise\n  .then(customer => {\n    dbCustomer = customer;\n    return Retailer.find()\n      .limit(20);\n  })\n  .then(retailers => {\n    retailers.forEach(retailer => {\n      if (retailer.sellRates.sellTo !== 'saveya') {\n        dbRetailer = retailer;\n      }\n    });\n  })\n  .then(() => {\n    for (let i = 0; i < count; i++) {\n      cards.push(createNewFakeCard(req.user, {\n        number: i,\n        retailer: dbRetailer._id,\n        uid: 1,\n        pin: i,\n        customer: dbCustomer._id,\n        userTime: new Date(),\n        balance: '1111'\n      }));\n    }\n    return Promise.all(cards);\n  })\n  .then(cards => {\n    return res.json({cards});\n  })\n  .catch(err => {\n    console.log('**************FAKE CARD ERR**********');\n    console.log(err);\n    return res.status(500).json();\n  });\n}\n\n/**\n * Create a fake card record\n * @param user\n * @param body\n */\nfunction createNewFakeCard(user, body) {\n  let dbCustomer, dbCard;\n  return createDefaultCustomer(body, user)\n  .then(customer => {\n    dbCustomer = customer;\n    // See if this card already exists\n    return findCards(body.retailer, body.number)\n    .populate('retailer')\n  })\n  // If card exists, throw error\n  .then(async card => {\n    if (card) {\n      // Don't overwrite test card\n      if (!isTestCard(card) && !card.inventory) {\n        const removeValue = await removeCard(req.params.cardId);\n        // In this case, we don't care about the response, since this is only dealing with fake cards, so errors can be ignored\n        handleRemoveCardResponse(res, removeValue);\n      }\n      dbCard = card;\n      throw Error('Card has already been added to system');\n    }\n  })\n  .then(() => {\n    const card         = new Card(body);\n    card.user          = user._id;\n    card.balanceStatus = 'unchecked';\n    // User time when card was created\n    card.userTime      = body.userTime;\n    card.customer      = dbCustomer;\n    // Save\n    return card.save()\n  })\n  .then(card => {\n    // Retrieve card with retailer\n    return Card.findById(card._id)\n    .populate({\n      path    : 'retailer',\n      populate: {\n        path : 'buyRateRelations',\n        model: 'BuyRate'\n      }\n    })\n    .populate('customer');\n  })\n  // Return\n  .then(card => {\n    dbCard = card;\n    return Company.findById(user.company)\n    .populate({\n      path    : 'settings',\n      populate: {\n        path : 'autoBuyRates',\n        model: 'AutoBuyRate'\n      }\n    });\n  })\n  // Get card buy and sell rate\n  .then(company => {\n    const settings  = company.settings || {margin: 0.03};\n    const retailer  = retailerSetBuyAndSellRates(dbCard.retailer, settings, user.store, null, dbCard.merchandise);\n    dbCard.buyRate  = retailer.buyRate;\n    dbCard.sellRate = retailer.sellRate;\n    return dbCard.save();\n  })\n  .catch(err => {\n    return res.status(500).json(err);\n  })\n}\n\n/**\n * Upload cards\n */\nexport function uploadCards(req, res) {\n  const file = req.files[0];\n  const cards = [];\n  const body = req.body;\n  let dbCustomer, dbCard;\n  const fileName = `${__dirname}/uploads/${file.filename}`;\n  const stream = fs.createReadStream(fileName);\n  const user = req.user;\n  let cardCount = 0;\n  const csvStream = csv()\n    .on(\"data\", function(record){\n      if (cardCount === 0) {\n        cardCount++;\n        return;\n      }\n      /**\n       * Fields:\n       * 1) Retailer ID (either BI, GS, or GCMGR)\n       * 2) Merchant name\n       * 3) Card number\n       * 4) Card pin\n       * 5) Balance\n       */\n      // Create record\n      const thisRecord = {\n        retailerId: record[0],\n        retailerName: record[1],\n        number: record[2]\n      };\n      if (typeof record[3] !== 'undefined' && record[3]) {\n        thisRecord['pin'] = record[3];\n      }\n      if (typeof record[4] !== 'undefined' && record[4]) {\n        thisRecord['balance'] = record[4];\n      }\n      cards.push(thisRecord);\n      cardCount++;\n    })\n    .on('end', () => {\n      const promises = [];\n      cards.forEach(thisCard => {\n        promises.push(// let dbRetailer;\n          new Promise(resolve => {\n            // Find retailer by ID\n            if (/^[0-9a-fA-F]{24}$/.test(thisCard.retailerId)) {\n              return resolve(Retailer.findById(thisCard.retailerId));\n            } else {\n              return resolve(Retailer.findOne({\n                $or: [{gsId: thisCard.retailerId}, {retailerId: thisCard.retailerId}]\n              }));\n            }\n          })\n            .then(retailer => {\n              return new Promise(resolve => {\n                createDefaultCustomer(body, user)\n                  .then(customer => {\n                    resolve({\n                      retailer,\n                      customer\n                    });\n                  })\n              });\n            })\n            .then(data => {\n              return new Promise(resolve => {\n                findCards(data.retailer._id, thisCard.number).populate('retailer')\n                  .then(card => {\n                    // dbCustomer = data.customer;\n                    resolve({\n                      card,\n                      customer: data.customer,\n                      retailer: data.retailer\n                    });\n                  })\n              });\n            })\n            .then(data => {\n              if (data.card) {\n                console.log('**************CARD ALREADY EXISTS DURING UPLOAD**********');\n                console.log(data.card);\n              } else {\n                return data;\n              }\n            })\n            .then(data => {\n              if (!data) {\n                return;\n              }\n              const newCard = new Card(thisCard);\n              newCard.user = user._id;\n              newCard.balanceStatus = 'unchecked';\n              // User time when newCard was created\n              newCard.userTime = Date.now();\n              newCard.customer = data.customer;\n              newCard.retailer = data.retailer._id;\n              newCard.uid = data.retailer.uid;\n              // Save\n              return newCard.save()\n            })\n            .then(newCard => {\n              if (!newCard) {\n                return;\n              }\n              // Retrieve card with retailer\n              return Card.findById(newCard._id)\n                .populate({\n                  path: 'retailer',\n                  populate: {\n                    path: 'buyRateRelations',\n                    model: 'BuyRate'\n                  }\n                })\n                .populate('customer');\n            })\n            // Return\n            .then(newCard => {\n              if (!newCard) {\n                return;\n              }\n              return new Promise(resolve => {\n                Company.findById(user.company)\n                  .populate({\n                    path: 'settings',\n                    populate: {\n                      path: 'autoBuyRates',\n                      model: 'AutoBuyRate'\n                    }\n                  })\n                  .then(company => {\n                    resolve({\n                      company,\n                      card: newCard\n                    });\n                  });\n              });\n            })\n            // Get card buy and sell rate\n            .then(data => {\n              if (!data) {\n                return;\n              }\n              const retailer = retailerSetBuyAndSellRates(data.card.retailer, data.company.settings, user.store, null, data.card.merchandise);\n              data.card.buyRate = retailer.buyRate;\n              data.card.sellRate = retailer.sellRate;\n              return data.card.save();\n            })\n            .catch(err => {\n              console.log('**************UPLOAD ERR**********');\n              console.log(err);\n            }));\n      });\n      Promise.all(promises)\n        .then(() => res.json());\n    });\n\n  stream.pipe(csvStream);\n}\n\nfunction findRetailerFix(retailerName) {\n  return Retailer.findOne({\n    name: new RegExp(retailerName, 'i')\n  })\n}\n\n/**\n * Find card, or else create it\n * @param params DB search params\n * @param input Input from CSV\n * @param user Current user\n */\nfunction findCardToFix(params, input, user) {\n  let foundCard;\n  return Card.find(params)\n    .then(dbCards => {\n      if (dbCards.length === 0) {\n        return findRetailerFix(input.retailerName);\n        // Multiple values (there are none)\n      } else if (dbCards.length > 1) {\n        console.log('**************FOUND MULTIPLE**********');\n        console.log(params);\n        console.log(input);\n        return false;\n      } else {\n        foundCard = dbCards[0];\n        return findRetailerFix(input.retailerName);\n      }\n    })\n    .then(retailer => {\n      if (!retailer) {\n        return;\n      }\n      // Update retailer name\n      if (foundCard) {\n        foundCard.retailer = retailer._id;\n        return foundCard.save();\n      }\n      const newCardValues = {\n        retailer: retailer._id,\n        number: input.number,\n        uid: retailer.uid,\n        buyRate: retailer.sellRates.best - 0.1,\n        sellRate: retailer.sellRates.best - 0.03,\n        user: user._id,\n        customer: '575a44043c01e9134aa2a558'\n      };\n      if (input.pin) {\n        newCardValues.pin = input.pin;\n      }\n      if (input.balance) {\n        newCardValues.balance = input.balance;\n      }\n      // Create new card\n      const newCard = new Card(newCardValues);\n      return newCard.save();\n    });\n}\n\n/**\n * Upload fixes\n */\nexport function uploadFixes(req, res) {\n  const file = req.files[0];\n  const cards = [];\n  const fileName = `${__dirname}/uploads/${file.filename}`;\n  const stream = fs.createReadStream(fileName);\n  const csvStream = csv()\n    .on(\"data\", function(record){\n      /**\n       * Fields:\n       * 1) Retailer ID (either BI, GS, or GCMGR)\n       * 2) Merchant name\n       * 3) Card number\n       * 4) Card pin\n       * 5) Balance\n       */\n        // Create record\n      const thisRecord = {\n          retailerName: record[1],\n          number: record[2]\n        };\n      if (typeof record[3] !== 'undefined' && record[3]) {\n        thisRecord['pin'] = record[3];\n      }\n      if (typeof record[4] !== 'undefined' && record[4]) {\n        thisRecord.balance = record[4].replace(/[^\\d.]/g, '');\n      }\n      cards.push(thisRecord);\n    })\n    .on('end', () => {\n      const promises = [];\n      // Run cards\n      cards.forEach(card => {\n        // Find card\n        const cardParams = {\n          number: new RegExp(card.number, 'i'),\n        };\n        if (card.pin) {\n          cardParams.pin = new RegExp(card.pin, 'i');\n        }\n        if (card.balance) {\n          cardParams.balance = card.balance;\n        }\n        promises.push(findCardToFix(cardParams, card, req.user));\n      });\n      Promise.all(promises)\n        .then(() => res.json());\n    });\n\n  stream.pipe(csvStream);\n}\n\n/**\n * Run BI\n */\nexport function runBi(req, res) {\n  const cards = req.body.cards;\n  const dbCards = [];\n  cards.forEach(card => {\n    dbCards.push(Card.findById(card)\n      .populate('retailer'));\n  });\n  Promise.all(dbCards)\n    .then(foundCards => {\n      let currentCard = 0;\n      const thisInt = setInterval(() => {\n        const dbCard = foundCards[currentCard];\n        currentCard++;\n        if (!dbCard) {\n          clearInterval(thisInt);\n          return res.json();\n        }\n        let retailer;\n        if (dbCard.retailer.gsId) {\n          retailer = dbCard.retailer.gsId;\n        }\n        if (retailer) {\n          balanceInquiry(retailer, dbCard.number, dbCard.pin, dbCard._id, req.user._id, req.user.company);\n        }\n      }, 500);\n    });\n}\n\n/**\n * Move cards over to Upload Sales for sale\n */\nexport function moveForSale(req, res) {\n  let dbCustomer;\n  Customer.findById('5764baef5f244aff7abe6160')\n  .then(customer => {\n    if (!customer) {\n      throw 'noCustomer';\n    }\n    dbCustomer = customer;\n    return Card.find({\n      balance: {$exists: true},\n      customer: req.body.customerId\n    })\n    .populate('retailer');\n  })\n  .then(cards => {\n    const cardPromises = [];\n    cards.forEach(card => {\n      let sellRate, buyRate;\n      try {\n        if (card.sellRate) {\n          sellRate = card.sellRate;\n        } else {\n          sellRate = card.retailer.sellRates.best - 0.03;\n        }\n        if (card.buyRate) {\n          buyRate = card.buyRate;\n        } else {\n          buyRate = card.retailer.sellRates.best - 0.1;\n        }\n      } catch (e) {\n        throw 'noSellRate';\n      }\n      cardPromises.push(card.update({\n        sellRate,\n        buyRate,\n        customer: dbCustomer._id\n      }));\n    });\n    return Promise.all(cardPromises);\n  })\n  .then(() => {\n    return res.json();\n  })\n  .catch(err => {\n    console.log('**************ERR**********');\n    console.log(err);\n    if (err === 'noCustomer') {\n      return res.status(500).json({customer: false});\n    }\n    if (err === 'noSellRate') {\n      return res.status(500).json({sellRate: false});\n    }\n  });\n}\n\n/**\n * Perform balance update for a single card\n * @param cardId\n * @param balance\n * @param userRole\n */\nfunction updateInventoryBalance(cardId, balance) {\n  return Inventory.findById(cardId)\n    .populate('card')\n    .then(inventory => {\n      inventory.balance = balance;\n      return inventory.save();\n    })\n    .then(inventory => {\n      return Card.update({\n        _id: inventory.card._id\n      }, {\n        $set: {\n          balance\n        }\n      });\n    });\n}\n\n/**\n * Edit card balance (admin)\n */\nexport function editBalance(req, res) {\n  const {cardId, balance, ids} = req.body;\n  if (cardId) {\n    return updateInventoryBalance(cardId._id, balance, req.user.role)\n    .then(() => res.json())\n    .catch(async err => {\n      await ErrorLog.create({\n        method: 'editBalance',\n        controller: 'card.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n    });\n  } else if (ids) {\n    const promises = [];\n    ids.forEach(id => {\n      promises.push(updateInventoryBalance(id, balance, req.user.role));\n    });\n    Promise.all(promises)\n    .then(() => res.json())\n    .catch(async err => {\n      await ErrorLog.create({\n        method: 'editBalance',\n        controller: 'card.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n    });\n  }\n}\n\n/**\n * Get inventory fr\n * @param cardId\n * @return {Promise.<void>}\n */\nasync function getInventoryFromCard(cardId) {\n  return Card.findById(cardId).populate('inventory');\n}\n\n/**\n * Set inventory ship status\n */\nexport async function setCardValue(req, res) {\n  const {status, type, transaction, cardId} = req.body;\n  let inventoryId = req.body.inventoryId;\n  const {companyId} = req.params;\n  // Staging testing\n  if (config.isStaging) {\n    const card = await getInventoryFromCard(cardId);\n    if (card) {\n      try {\n        inventoryId = card.inventory._id.toString();\n      } catch (e) {\n        console.log('**************IGNORE**********');\n      }\n    }\n  }\n  return new Promise((resolve, reject) => {\n    // Corporate\n    if (companyId) {\n      Inventory.findById(inventoryId)\n        .populate('company')\n        .then(inventory => {\n          if (inventory.company._id.toString() !== companyId) {\n            return reject();\n          }\n          // Modify transaction\n          if (transaction) {\n            inventory.transaction[type] = status;\n          } else {\n            inventory[type] = status;\n          }\n          resolve(inventory.save());\n        });\n    // Admin\n    } else {\n      let promises = [];\n      Promise.all(promises)\n      .then(() => {\n        Inventory.findById(inventoryId)\n        .then(inventory => {\n          inventory[type] = status;\n          resolve(inventory.save());\n        });\n      });\n    }\n  })\n    .then(() => {\n      if (type === 'activityStatus' && status === 'sentToSmp') {\n        Card.findOne({inventory: inventoryId})\n        .populate('inventory')\n        .then(card => {\n          if (card) {\n            (new Callback()).sendCallback(card, 'cardFinalized');\n          }\n        });\n      }\n\n      res.json();\n    })\n    .catch(async err => {\n      await ErrorLog.create({\n        method: 'setCardValue',\n        controller: 'card.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n      console.log('**************UNABLE TO SET SHIP STATUS**********');\n      console.log(err);\n      return res.status(500).json(err);\n    });\n}\n\n/**\n * Mass update inventories\n */\nexport function massUpdate(req, res) {\n  const {ids, values} = req.body;\n  const {companyId} = req.params;\n  const updateParams = {\n    '_id': {$in: ids}\n  };\n  if (companyId) {\n    updateParams.company = companyId;\n  }\n  Inventory.update(updateParams, {\n    $set: values\n  }, {multi: true})\n    .then(inventories => res.json(inventories))\n    .catch(async err => {\n      await ErrorLog.create({\n        method: 'massUpdate',\n        controller: 'card.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n      console.log('**************ERR IN MASS UPDATE**********');\n      console.log(err);\n      return res.status(err).json(err);\n    });\n}\n\n/**\n * Handle rejection of inventory\n * @param inventory Inventory record\n * @param customerUpdates Customer updates to make\n * @return {Promise.<*>}\n */\nasync function handleInventoryReject(inventory, customerUpdates) {\n  const customerId = inventory.customer._id;\n  if (!customerUpdates[customerId]) {\n    customerUpdates[customerId] = {\n      credits: Array.isArray(inventory.customer.credits) ? inventory.customer.credits : [],\n      rejections: Array.isArray(inventory.customer.rejections) ? inventory.customer.rejections : [],\n      amount: typeof inventory.customer.rejectionTotal === 'number' ? inventory.customer.rejectionTotal : 0\n    };\n  }\n  // Set rejection amount based on difference between paid and what should have been paid\n  if (inventory.verifiedBalance !== 'undefined') {\n    // Original buy amount\n    let buyAmount = inventory.buyAmount;\n    // Assume 10% for API, which has a bug until recently which didn't set buyAmount\n    if (!buyAmount) {\n      buyAmount = inventory.balance * 0.9;\n    }\n    let buyRate = inventory.buyRate > 1 ? inventory.buyRate / 100 : inventory.buyRate;\n\n    if (inventory.isApi) {\n      buyRate = inventory.card.sellRate - 0.1;\n    }\n\n    // Buy amount after adjustment\n    const realBuyAmount = buyRate * inventory.verifiedBalance;\n\n    if (realBuyAmount !== buyAmount) {\n      // Reset amount of previous rejection\n      if (inventory.rejected && inventory.rejectAmount) {\n        customerUpdates[customerId].amount = customerUpdates[customerId].amount - inventory.rejectAmount;\n      }\n\n      // Reset amount of previous credit\n      if (inventory.credited && inventory.creditAmount) {\n        customerUpdates[customerId].amount = customerUpdates[customerId].amount + inventory.creditAmount;\n      }\n\n      const deltaAmount = buyAmount - realBuyAmount;\n      customerUpdates[customerId].amount += deltaAmount;\n\n      if (deltaAmount > 0) {\n        // Add to rejection list\n        if (customerUpdates[customerId].rejections.indexOf(inventory._id) === -1) {\n          customerUpdates[customerId].rejections.push(inventory._id);\n        }\n\n        // Remove from credit list\n        if (customerUpdates[customerId].credits.indexOf(inventory._id) !== -1) {\n          customerUpdates[customerId].credits.splice(\n            customerUpdates[customerId].credits.indexOf(inventory._id),\n            1\n          );\n        }\n      } else {\n        // Add to credit list\n        if (customerUpdates[customerId].credits.indexOf(inventory._id) === -1) {\n          customerUpdates[customerId].credits.push(inventory._id);\n        }\n\n        // Remove from rejection list\n        if (customerUpdates[customerId].rejections.indexOf(inventory._id) !== -1) {\n          customerUpdates[customerId].rejections.splice(\n            customerUpdates[customerId].rejections.indexOf(inventory._id),\n            1\n          );\n        }\n      }\n\n      inventory.rejected = deltaAmount > 0;\n      inventory.rejectedDate = inventory.rejected ? Date.now() : null;\n      inventory.rejectAmount = inventory.rejected ? deltaAmount : null;\n      inventory.credited = deltaAmount < 0;\n      inventory.creditedDate = inventory.credited ? Date.now() : null;\n      inventory.creditAmount = inventory.credited ? Math.abs(deltaAmount) : null;\n      return await inventory.save();\n    }\n  }\n  Promise.resolve(false);\n}\n\n/**\n * Reject selected inventories\n */\nexport async function rejectCards(req, res) {\n  const {inventories: ids} = req.body;\n  const customerUpdates = {};\n  Inventory.find({\n    _id: {\n      $in: ids\n    }\n  })\n  .populate('customer')\n  .populate('card')\n  .populate('retailer')\n  .then(async inventories => {\n    let inventoriesFinal = [];\n    // Handle reject on each inventory\n    for (let inventory of inventories) {\n      inventory = await handleInventoryReject(inventory, customerUpdates);\n      if (inventory === false) {\n        res.status(400).json({err: 'Unable to find inventory to reject'});\n      } else {\n        inventoriesFinal.push(inventory);\n      }\n    }\n    // Send callbacks for credit/rejection\n    for (let inventory of inventories) {\n      if (inventory.card && inventory.isTransaction) {\n        await recalculateTransactionAndReserve(inventory);\n      }\n    }\n    const promises = [];\n    _.forEach(customerUpdates, (update, id) => {\n      promises.push(Customer.update({\n        _id: id\n      }, {\n        $set: {\n          rejectionTotal: update.amount,\n          rejections: update.rejections,\n          credits: update.credits\n        }\n      }).then(() => ({})));\n    });\n  })\n  .then(() => {\n    res.json();\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'rejectCards',\n      controller: 'card.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    console.log('**************ERR ADDING REJECTIONS**********');\n    console.log(err);\n    return res.status(500).json({});\n  });\n}\n\n/**\n * Resell cards which have not already been sent to an SMP to determine new best rates\n */\nexport function resellCards(req, res) {\n  const {inventories} = req.body;\n  // Find inventories not sent to SMP, and without a transaction ID\n  Inventory.find({\n    _id: {$in: inventories}\n  })\n  .populate('card')\n  .then(inventories => {\n    const promises = [];\n    inventories.forEach(inventory => {\n      // Don't resell already sold cards\n      if (inventory.smp !== '1' && inventory.smp !== 'saveya' &&\n          ['sentToSmp', 'receivedSmp', 'rejected'].indexOf(inventory.activityStatus) === -1 && inventory.card) {\n        inventory.soldToLiquidation = false;\n        promises.push(inventory.save());\n      }\n    });\n    return Promise.all(promises);\n  })\n  .then(() => res.json())\n  .catch(err => {\n    console.log('**************ERR IN RESELL CARDS**********');\n    console.log(err);\n    return res.status(500).json();\n  });\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}