{"version":3,"sources":["api/card/card.helpers.js"],"names":["inventory","isTransaction","Promise","resolve","removeReserve","findOne","company","getSettings","companySettings","createReserve","reserve","addToRelatedReserveRecords","findById","card","populate","dbCard","rejected","sendCallback","credited","recalculateTransactionAndReserve","determineSellTo","retailer","balance","availableSmps","sellRates","types","smpType","hardLimits","saveya","min","max","cardcash","cardpool","giftcardzen","Infinity","thisHardLimit","sellTo","rate","smp","type","eligibleSmps","forEach","indexOf","toLowerCase","maxMin","smpMaxMin","maxValid","minValid","hardMinValid","hardMaxValid","smpLower","cardType","push","Object","keys","length","eligible","e","console","log","smpPool","filter","sample"],"mappings":"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","file":"api/card/card.helpers.js","sourcesContent":["import _ from 'lodash';\n\nimport '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport {getActiveSmps} from '../../helpers/smp';\nimport {finalizeTransaction} from '../deferredBalanceInquiries/runDefers';\nimport Callback from '../callbackLog/callback';\nimport Card from '../card/card.model';\nimport Company from '../company/company.model';\nimport Inventory from '../inventory/inventory.model';\n/**\n * Deterine who to sell the card to\n *\n * @return {\n *   rate: rate BEFORE margin\n *   type: card type\n *   smp: smp\n * }\n */\nexport function determineSellTo(retailer, balance, companySettings) {\n  const availableSmps = getActiveSmps();\n  const sellRates = retailer.sellRates;\n  const types = retailer.smpType;\n  // SMP hard limits\n  const hardLimits = {\n    saveya: {\n      min: 20,\n      max: 300\n    },\n    cardcash: {\n      min: 1,\n      max: 2000\n    },\n    cardpool: {\n      min: 25,\n      max: 1000\n    },\n    giftcardzen: {\n      min: -Infinity,\n      max: Infinity\n    }\n  };\n  let thisHardLimit = {\n    min: -Infinity, max: Infinity\n  };\n\n  let sellTo = {\n    rate: 0,\n    smp: null,\n    type: null\n  };\n\n  const eligibleSmps = {};\n\n  // Determine SMP\n  _.forEach(sellRates, (rate, smp) => {\n    if (typeof smp === 'string' && availableSmps.indexOf(smp.toLowerCase()) !== -1) {\n      const maxMin = retailer.smpMaxMin[smp];\n      let maxValid = true;\n      let minValid = true;\n      let hardMinValid = true;\n      let hardMaxValid = true;\n      // If no balance, determine best sell rate\n      if (balance !== null && typeof maxMin !== 'undefined') {\n        maxValid = typeof maxMin.max === 'number' ? maxMin.max >= balance : true;\n        minValid = typeof maxMin.min === 'number' ? maxMin.min <= balance : true;\n      }\n      // Check max/min\n      if (maxValid && minValid) {\n        const smpLower = smp.toLowerCase();\n        if (typeof rate === 'number' && rate >= sellTo.rate && availableSmps.indexOf(smpLower) !== -1 && types[smp] !== 'disabled') {\n          if (companySettings && companySettings.cardType && companySettings.cardType !== 'both' &&\n              companySettings.cardType !== types[smp]) {\n            return;\n          }\n\n          thisHardLimit = hardLimits[smpLower];\n          if (balance !== null) {\n            hardMaxValid = thisHardLimit.max >= balance;\n            hardMinValid = thisHardLimit.min <= balance;\n          }\n          if (hardMaxValid && hardMinValid) {\n            sellTo.rate = rate;\n            sellTo.smp = smp;\n            sellTo.type = types[smp];\n\n            if (eligibleSmps[rate]) {\n              eligibleSmps[rate].push({\n                smp,\n                rate,\n                type: types[smp]\n              });\n            } else {\n              eligibleSmps[rate] = [{\n                smp,\n                rate,\n                type: types[smp]\n              }];\n            }\n          }\n        }\n      }\n    }\n  });\n\n  // No eligible SMPs here\n  if (!Object.keys(eligibleSmps).length) {\n    return false;\n  }\n\n  let eligible = null;\n  // Find eligible\n  try {\n    eligible = eligibleSmps[sellTo.rate];\n  } catch (e) {\n    console.log('**************NO ELIGIBLE SMPs**********');\n    console.log(e);\n    eligible = null;\n  }\n  // None found\n  if (!eligible) {\n    return false;\n  }\n  let smpPool = eligible.filter(smp => smp.type === 'electronic');\n  if (!smpPool.length) {\n    smpPool = eligible;\n  }\n  // Choose SMP randomly from highest rate\n  if (smpPool && smpPool.length) {\n    const smp = _.sample(smpPool);\n    sellTo.smp = smp.smp;\n    sellTo.type = smp.type;\n  }\n\n  // No SMP available\n  if (sellTo.smp === null) {\n    return false;\n  }\n  return sellTo;\n}\n\n/**\n * Recalculate transaction values for a transaction\n * @param inventory\n * @return {Promise.<void>}\n */\nexport async function recalculateTransactionAndReserve(inventory) {\n  // Not a transaction\n  if (!inventory.isTransaction) {\n    return Promise.resolve(false);\n  }\n  // Undo previous reserve\n  await inventory.removeReserve();\n  // Get company settings\n  const company = await Company.findOne(inventory.company);\n  const companySettings = await company.getSettings();\n  inventory = await finalizeTransaction(inventory, companySettings, true);\n  // Create a new reserve\n  const reserve = await inventory.createReserve();\n  await Inventory.addToRelatedReserveRecords(reserve);\n  const dbCard = await Card.findById(inventory.card).populate('inventory');\n  // Rejected\n  if (inventory.rejected) {\n    await (new Callback()).sendCallback(dbCard, 'denial');\n  } else if (inventory.credited) {\n    await (new Callback()).sendCallback(dbCard, 'credit');\n  }\n  return Promise.resolve(true);\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}