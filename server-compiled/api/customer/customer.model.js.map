{"version":3,"sources":["api/customer/customer.model.js"],"names":["mongoose","require","Promise","Schema","CustomerSchema","firstName","type","String","required","lastName","middleName","fullName","stateId","address1","address2","city","state","zip","phone","systemId","created","Date","default","now","rejectionTotal","Number","enabled","Boolean","get","company","Types","ObjectId","ref","store","edits","rejections","credits","email","indexes","path","validate","name","length","respond","constructor","findOne","err","id","pre","next","set","virtuals","getters","module","exports","model"],"mappings":"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","file":"api/customer/customer.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\n\nimport createIndexes from '../../config/indexDb';\n\nconst CustomerSchema = new Schema({\n  // First name\n  firstName: {\n    type: String,\n    required: true\n  },\n  // last name\n  lastName: {\n    type: String,\n    required: true\n  },\n  middleName: String,\n  fullName: {\n    type: String\n  },\n  // State ID, such as driver's license\n  stateId: {\n    type: String,\n    required: true\n  },\n  address1: {\n    type: String,\n    required: true\n  },\n  address2: {\n    type: String\n  },\n  city: {\n    type: String,\n    required: true\n  },\n  state: {\n    type: String,\n    required: true\n  },\n  zip: {\n    type: String,\n    required: true\n  },\n  phone: {\n    type: String,\n    required: true\n  },\n  // System ID, used internally at stores\n  systemId: String,\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  // Rejection total\n  rejectionTotal: {\n    type: Number, default: 0\n  },\n  // Whether customer is active\n  enabled: {type: Boolean, default: true, get: function (enabled) {return !!enabled;}},\n  // Company on which this customer was created\n  company: {type: Schema.Types.ObjectId, ref: 'Company'},\n  // Store relationship\n  store: [{type: Schema.Types.ObjectId, ref: 'Store'}],\n  // Edits\n  edits: [{type: Schema.Types.ObjectId, ref: 'CustomerEdit'}],\n  // Rejected inventories\n  rejections: [{type: Schema.Types.ObjectId, ref: 'Inventory'}],\n  // Credited inventories\n  credits: [{type: Schema.Types.ObjectId, ref: 'Inventory'}],\n  // Email address\n  email: String\n});\n\n// Indexes\nconst indexes = [\n  [{fullName: 1}],\n  [{stateId: 1}],\n  [{phone: 1}],\n  [{systemId: 1}],\n  [{company: 1}],\n  [{address1: 1}],\n  [{city: 1}],\n  [{state: 1}],\n];\ncreateIndexes(CustomerSchema, indexes);\n\n/**\n * Validations\n */\n\n// Validate empty name\nCustomerSchema\n  .path('firstName')\n  .validate(function (name) {\n    return name.length;\n  }, 'First name cannot be blank');\n\nCustomerSchema\n  .path('lastName')\n  .validate(function (name) {\n    return name.length;\n  }, 'Last name cannot be blank');\n\n// Validate duplicate names\nCustomerSchema\n.path('email')\n.validate(function(email, respond) {\n  this.constructor.findOne({\n    email,\n    company: this.company,\n    store: this.store\n  }, (err, store) => {\n    if (err) {\n      throw err;\n    }\n    if (store) {\n      if (this.id === store.id) {\n        return respond(true);\n      }\n      return respond(false);\n    }\n    respond(true);\n  });\n}, 'Email is already taken');\n\n/**\n * Create full name on save\n */\nCustomerSchema\n  .pre('save', function(next) {\n    this.fullName = `${this.firstName}${this.middleName ? ` ${this.middleName} ` : ' '}${this.lastName}`;\n    next();\n  });\n\nCustomerSchema.set('toJSON', {\n  virtuals: true, getters: true\n});\n\nmodule.exports = mongoose.model('Customer', CustomerSchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}