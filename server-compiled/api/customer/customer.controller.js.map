{"version":3,"sources":["api/customer/customer.controller.js"],"names":["req","res","customerId","params","validObjectId","isValidObjectId","findById","populate","path","model","then","json","customer","catch","err","console","log","create","method","controller","revision","stack","error","user","_id","status","defaultCustomer","findCustomerById","searchCustomers","findCustomersThisCompany","getCustomersThisStore","newCustomer","updateCustomer","assignCustomerToCard","findCustomersWithDenials","updateCustomerDenialTotal","getAllCustomers","cashPayment","Types","ObjectId","isValid","name","query","returned","company","replace","find","Object","assign","fullName","RegExp","customers","length","stateId","phone","systemId","$or","companyId","toString","store","customerData","body","companySettings","getSettings","settings","customerDataRequired","forEach","attr","state","save","newCustomerData","update","findOne","editable","key","card","message","sort","rejectionTotal","newTotal","amount","userTime","previousTotal","parseFloat","denialPayment","receipt","total","appliedTowardsDenials","grandTotal","Promise","all","models","payment","data"],"mappings":"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","file":"api/customer/customer.controller.js","sourcesContent":["'use strict';\nimport mongoose from 'mongoose';\n\nimport '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport Customer from './customer.model';\nimport Card from '../card/card.model';\nimport DenialPayment from '../denialPayment/denialPayment.model';\nimport Receipt from '../receipt/receipt.model';\nimport Company from '../company/company.model';\nimport Store from '../stores/store.model';\n\nimport ErrorLog from '../errorLog/errorLog.model';\nimport {getGitRev} from '../../helpers/errors';\n// Valid objectId\nconst isValidObjectId = mongoose.Types.ObjectId.isValid;\n\n/**\n * Search customers\n */\nexport function searchCustomers(req, res) {\n  let {name} = req.query;\n  let returned = false;\n  const company = {\n    company: req.user.company\n  };\n\n  name = name.replace(' ', '.*');\n  // Find all customers who match the input query\n  Customer.find(Object.assign({fullName: new RegExp(name, 'i')}, company))\n  .populate('store')\n  .then(customers => {\n    if (customers.length) {\n      returned = true;\n      res.json(customers);\n      return false;\n    }\n    // Try to search by state id\n    return Customer.find(Object.assign({stateId: new RegExp(name, 'i')}, company));\n  })\n  .then(customers => {\n    // Don't perform another search\n    if (customers === false) {\n      return false;\n    }\n    if (customers.length) {\n      returned = true;\n      return res.json(customers);\n    }\n    // Try to search by phone\n    return Customer.find(Object.assign({phone: new RegExp(name, 'i')}, company));\n  })\n  .then(customers => {\n    if (customers === false) {\n      return false;\n    }\n    if (customers.length) {\n      returned = true;\n      return res.json(customers);\n    }\n    // Try to search by system ID\n    return Customer.find(Object.assign({systemId: new RegExp(name, 'i')}, company));\n  })\n  .then(customers => {\n    if (customers === false) {\n      return false;\n    }\n    if (customers.length) {\n      returned = true;\n      return res.json(customers);\n    }\n    // Try to search by address\n    return Customer.find({\n      company: req.user.company,\n      $or:[\n        {'address1':new RegExp(name, 'i')},\n        {'city':new RegExp(name, 'i')},\n        {'state':new RegExp(name, 'i')}\n      ]});\n  })\n  .then(customers => {\n    if (customers === false) {\n      return false;\n    }\n    if (!returned) {\n      return res.json(customers);\n    }\n  })\n  .catch(async err => {\n    console.log('**************SEARCH CUSTOMERS ERR**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'searchCustomers',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json(err);\n  });\n}\n\n/**\n * Get customers for this company\n */\nexport function findCustomersThisCompany(req, res) {\n  const companyId = req.params.companyId;\n  // Check access\n  if (companyId !== req.user.company.toString()) {\n    return res.status(401).json();\n  }\n  Customer.find({\n    company: companyId\n  })\n  .then(customers => res.json(customers))\n  .catch(async err => {\n    console.log('**************FIND CUSTOMERS BY COMPANY ERROR**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'findCustomersThisCompany',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json({\n      error: 'Could not retrieve customers'\n    });\n  });\n}\n\n/**\n * Retrieve customers for this store\n */\nexport function getCustomersThisStore(req, res) {\n  Customer.find({store: req.params.store})\n  .then(customers => res.json({customers}))\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'getCustomersThisStore',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json({});\n  });\n}\n\n/**\n * Retrieve customer by ID\n * @param req\n * @param res\n */\nexport async function findCustomerById(req, res) {\n  const {customerId} = req.params;\n  const validObjectId = isValidObjectId(customerId);\n  // Valid customer\n  if (validObjectId) {\n    Customer.findById(customerId)\n      .populate('store')\n      .populate({\n        path: 'company',\n        populate: [\n          {\n            path: 'settings',\n            model: 'CompanySettings'\n          }\n        ]\n      })\n      .then(customer => res.json(customer))\n      .catch(async err => {\n        console.log('**************FIND CUSTOMER BY ID ERROR**********');\n        console.log(err);\n        await ErrorLog.create({\n          method: 'findCustomerById',\n          controller: 'customer.controller',\n          revision: getGitRev(),\n          stack: err.stack,\n          error: err,\n          user: req.user._id\n        });\n        return res.status(500).json(err);\n      });\n  // Default, no customer selected\n  } else if (customerId === 'default') {\n    return res.json({\n      defaultCustomer: true\n    });\n  } else {\n    return res.status(500).json({err: 'Invalid customer ID'});\n  }\n}\n\n/**\n * Create a new customer\n * @param req\n * @param res\n */\nexport function newCustomer(req, res) {\n  const {company} = req.user;\n  let store = req.user.store;\n  const customerData = req.body;\n  if (customerData.store) {\n    store = customerData.store;\n  }\n  let companySettings;\n\n  return Store.findById(store)\n  .then(store => {\n    if (!store) {\n      res.status(404).json({err: \"Store not found\"});\n      throw 'noStore';\n    }\n    return Company.findById(company)\n  })\n  .then(company => {\n    return company.getSettings();\n  })\n  .then(settings => {\n    companySettings = settings;\n\n    if (!settings.customerDataRequired) {\n      ['firstName', 'lastName', 'address1', 'city', 'state', 'zip', 'phone', 'fullName', 'email'].forEach(attr => {\n        if (typeof customerData[attr] === 'undefined') {\n          customerData[attr] = ' ';\n        }\n      });\n\n      // Front-end likes to push an object when no state is selected.\n      // Just ignore whatever it is that's not a string.\n      if (typeof customerData.state !== 'string') {\n        customerData.state = ' ';\n      }\n    }\n\n    const customer = new Customer(customerData);\n    customer.company = company;\n    return customer.save();\n  })\n  .then(customer => {\n    if (!companySettings.customerDataRequired) {\n      const newCustomerData = {};\n      ['firstName', 'lastName', 'address1', 'city', 'state', 'zip', 'phone', 'fullName', 'email'].forEach(attr => {\n        if (!customer[attr].replace(/\\s/g, '').length) {\n          newCustomerData[attr] = '';\n        }\n      });\n\n      Customer.update({_id: customer._id}, newCustomerData).then(() => {});\n      return Customer.findById(customer._id);\n    }\n\n    return customer;\n  })\n  .then(customer => {\n    return res.json(customer);\n  })\n  .catch(async err => {\n    if (err === 'noStore') {\n      return;\n    }\n    if (err.name && err.name === 'ValidationError') {\n      return res.status(400).json(err);\n    }\n    await ErrorLog.create({\n      method: 'newCustomer',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n\n    console.log('********************ERROR IN NEWCUSTOMER********************');\n    console.log(err);\n    res.status(500).json(err);\n  });\n}\n\n/**\n * Update customer\n * @param req\n * @param res\n */\nexport function updateCustomer(req, res) {\n  const {customerId} = req.params;\n  const company = req.user.company;\n  const body = req.body;\n\n  Customer.findOne({_id: customerId, company})\n  .then(customer => {\n    if (!customer) {\n      return res.status(404);\n    }\n\n    const editable = [\n      'address1',\n      'address2',\n      'city',\n      'enabled',\n      'firstName',\n      'lastName',\n      'middleName',\n      'phone',\n      'state',\n      'stateId',\n      'zip',\n      'email'\n    ];\n\n    editable.forEach(key => {\n      customer[key] = body[key];\n    });\n    return customer.save();\n  })\n  .then(() => res.json())\n  .catch(async err => {\n    console.log('**************ERR IN UPDATE CUSTOMER**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'updateCustomer',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json(err);\n  })\n}\n\n/**\n * Assign a customer to a card\n */\nexport function assignCustomerToCard(req, res) {\n  const {customer, card} = req.body;\n  Card.findById(card._id)\n  .then(card => {\n    card.customer = customer._id;\n    return card.save();\n  })\n  .then(card => {\n    return Card.findById(card._id)\n      .populate({\n        path: 'retailer',\n        populate: {\n          path: 'buyRateRelations',\n          model: 'BuyRate'\n        }\n      })\n      .populate('customer');\n  })\n  .then(card => res.json(card))\n  .catch(async err => {\n    console.log('**************ASSIGN CUSTOMER TO CARD ERR**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'assignCustomerToCard',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json({\n      message: 'Could not assign customer to card'\n    });\n  });\n}\n\n/**\n * Find customers with denials\n */\nexport function findCustomersWithDenials(req, res) {\n  return Customer\n  .find()\n  .sort({rejectionTotal: -1})\n  .then(customers => res.json({customers}))\n  .catch(async err => {\n    console.log('**************ERR FINDING CUSTOMERS WITH DENIALS**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'findCustomersWithDenials',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json(err);\n  });\n}\n\n/**\n * Update customer denial total\n */\nexport function updateCustomerDenialTotal(req, res) {\n  const {_id, newTotal} = req.body;\n  Customer.findById(_id)\n  .then(customer => {\n    if (customer) {\n      customer.rejectionTotal = newTotal;\n      return customer.save();\n    } else {\n      throw 'notFound';\n    }\n  })\n  .then(customer => res.json(customer))\n  .catch(async err => {\n    console.log('**************ERR IN UPDATE CUSTOMER REJECTION TOTAL**********');\n    console.log(err);\n    await ErrorLog.create({\n      method: 'updateCustomerDenialTotal',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json({err});\n  });\n}\n\n/**\n * Get all customers\n */\nexport function getAllCustomers(req, res) {\n  Customer.find()\n  .then(customers => res.json(customers))\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'getAllCustomers',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json({});\n  });\n}\n\n/**\n * Make a cash payment against denials\n */\nexport function cashPayment(req, res) {\n  const {amount, userTime, rejectionTotal, store, company} = req.body;\n  const user = req.user;\n  Customer.findById(req.params.customerId)\n  .then(customer => {\n    const previousTotal = customer.rejectionTotal;\n    customer.rejectionTotal = previousTotal - parseFloat(amount);\n    const denialPayment = new DenialPayment({\n      amount,\n      userTime,\n      customer: customer._id\n    });\n    const receipt = new Receipt({\n      userTime,\n      rejectionTotal,\n      total: amount,\n      appliedTowardsDenials: amount,\n      grandTotal: amount,\n      company,\n      store,\n      customer: customer._id,\n      user: user._id\n    });\n    return Promise.all([\n      denialPayment.save(),\n      customer.save(),\n      receipt.save()\n    ]);\n  })\n  .then(models => {\n    const [payment, customer, receipt] = models;\n    return res.json({data: receipt});\n  })\n  .catch(async err => {\n    await ErrorLog.create({\n      method: 'cashPayment',\n      controller: 'customer.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json({});\n  });\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}