{"version":3,"sources":["api/biRequestLog/biRequestLog.model.js"],"names":["mongoose","require","Promise","Schema","BiRequestLogSchema","created","type","Date","default","now","pin","String","number","retailerId","Types","ObjectId","ref","card","verificationType","responseDateTime","requestId","responseCode","balance","Number","responseMessage","recheckDateTime","recheck","finalized","Boolean","fixed","prefix","note","user","indexes","methods","getLast4Digits","substring","length","module","exports","model"],"mappings":"AAAA;;AAMA;;;;;;AAJA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACAD,SAASE,OAAT,GAAmBD,QAAQ,UAAR,CAAnB;AACA,IAAME,SAASH,SAASG,MAAxB;;AAIA,IAAMC,qBAAqB,IAAID,MAAJ,CAAW;AACpCE,WAAS;AACPC,UAAMC,IADC;AAEPC,aAASD,KAAKE;AAFP,GAD2B;AAKpC;AACAC,OAAKC,MAN+B;AAOpC;AACAC,UAAQD,MAR4B;AASpC;AACAE,cAAY,EAACP,MAAMH,OAAOW,KAAP,CAAaC,QAApB,EAA8BC,KAAK,UAAnC,EAVwB;AAWpC;AACAC,QAAM,EAACX,MAAMH,OAAOW,KAAP,CAAaC,QAApB,EAA8BC,KAAK,MAAnC,EAZ8B;AAapC;;;AAGAE,oBAAkB,EAACZ,MAAMK,MAAP,EAAeH,SAAS,IAAxB,EAhBkB;AAiBpCW,oBAAkB,EAACb,MAAMK,MAAP,EAAeH,SAAS,IAAxB,EAjBkB;AAkBpCY,aAAW,EAACd,MAAMK,MAAP,EAAeH,SAAS,IAAxB,EAlByB;AAmBpCa,gBAAc,EAACf,MAAMK,MAAP,EAAeH,SAAS,IAAxB,EAnBsB;AAoBpCc,WAAS,EAAChB,MAAMiB,MAAP,EAAef,SAAS,IAAxB,EApB2B;AAqBpCgB,mBAAiB,EAAClB,MAAMK,MAAP,EAAeH,SAAS,IAAxB,EArBmB;AAsBpCiB,mBAAiB,EAACnB,MAAMK,MAAP,EAAeH,SAAS,IAAxB,EAtBmB;AAuBpCkB,WAAS,EAACpB,MAAMK,MAAP,EAAeH,SAAS,IAAxB,EAvB2B;AAwBpC;AACAmB,aAAW,EAACrB,MAAMsB,OAAP,EAAgBpB,SAAS,KAAzB,EAzByB;AA0BpC;AACAqB,SAAO,EAACvB,MAAMsB,OAAP,EAAgBpB,SAAS,KAAzB,EA3B6B;AA4BpC;AACAsB,UAAQnB,MA7B4B;;AA+BpC;AACAoB,QAAMpB,MAhC8B;AAiCpC;AACAqB,QAAM,EAAC1B,MAAMH,OAAOW,KAAP,CAAaC,QAApB,EAA8BC,KAAK,MAAnC;AAlC8B,CAAX,CAA3B;;AAqCA;AACA;AACA,IAAMiB,UAAU,CACd,CAAC,EAACrB,QAAQ,CAAT,EAAYF,KAAK,CAAjB,EAAoBG,YAAY,CAAhC,EAAmCS,SAAS,CAA5C,EAAD,CADc,CAAhB;AAGA,uBAAclB,kBAAd,EAAkC6B,OAAlC;;AAEA7B,mBAAmB8B,OAAnB,CAA2BC,cAA3B,GAA4C,YAAY;AACtD,SAAO,SAAS,KAAKvB,MAAL,CAAYwB,SAAZ,CAAsB,KAAKxB,MAAL,CAAYyB,MAAZ,GAAqB,CAA3C,CAAhB;AACD,CAFD;;AAIAC,OAAOC,OAAP,GAAiBvC,SAASwC,KAAT,CAAe,cAAf,EAA+BpC,kBAA/B,CAAjB","file":"api/biRequestLog/biRequestLog.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\n\nimport createIndexes from '../../config/indexDb';\n\nconst BiRequestLogSchema = new Schema({\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  // Card pin\n  pin: String,\n  // Card number\n  number: String,\n  // Retailer ID\n  retailerId: {type: Schema.Types.ObjectId, ref: 'Retailer'},\n  // Card ID\n  card: {type: Schema.Types.ObjectId, ref: 'Card'},\n  /**\n   * BI response\n   */\n  verificationType: {type: String, default: null},\n  responseDateTime: {type: String, default: null},\n  requestId: {type: String, default: null},\n  responseCode: {type: String, default: null},\n  balance: {type: Number, default: null},\n  responseMessage: {type: String, default: null},\n  recheckDateTime: {type: String, default: null},\n  recheck: {type: String, default: null},\n  // Finalized\n  finalized: {type: Boolean, default: false},\n  // Updated after finalized\n  fixed: {type: Boolean, default: false},\n  // Prefix for vista\n  prefix: String,\n\n  // TEMP\n  note: String,\n  // User that initiated the callback\n  user: {type: Schema.Types.ObjectId, ref: 'User'},\n});\n\n// @todo Enable me after cleaning up the DB\n// // Indexes\nconst indexes = [\n  [{number: 1, pin: 1, retailerId: 1, balance: 1}],\n];\ncreateIndexes(BiRequestLogSchema, indexes);\n\nBiRequestLogSchema.methods.getLast4Digits = function () {\n  return '****' + this.number.substring(this.number.length - 4);\n};\n\nmodule.exports = mongoose.model('BiRequestLog', BiRequestLogSchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}