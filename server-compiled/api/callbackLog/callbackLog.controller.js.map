{"version":3,"sources":["api/callbackLog/callbackLog.controller.js"],"names":["req","res","user","company","status","json","err","params","begin","end","toString","findParams","$gt","Date","$lt","find","logs","create","method","controller","revision","stack","error","_id","getCallbacksInDateRange","card","callbackType","resend","log","findOne","sendCallback","indexOf","inventory","activityStatus","cqAch","credited","retailer","findById","gsId","aiId","console","resendCallback","cardId","populate","noCallbackSent","reFireCallback","cardIds","require","cqPaymentInitiatedBadVb","cardFinalizedBadVb","$in","cards","counter","multiplier","setTimeout","isTransaction","refireCallbackFromList","companyId","body","dateBegin","dateEnd","callbacks","send","$exists","length","$size","inventories","map","i","callback","fireAllCallbacks"],"mappings":";;;;;;;;;AAmBA;;;;qEAGO,iBAAuCA,GAAvC,EAA4CC,GAA5C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAGED,IAAIE,IAAJ,CAASC,OAHX;AAAA;AAAA;AAAA;;AAAA,6CAIMF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,KAAK,iEAAN,EAArB,CAJN;;AAAA;AAAA,0BAMkBN,IAAIO,MANtB,EAMIC,KANJ,eAMIA,KANJ,EAMWC,GANX,eAMWA,GANX;AAOGN,mBAPH,GAOaH,IAAIE,IAAJ,CAASC,OAAT,CAAiBO,QAAjB,EAPb;AAQGC,sBARH,GAQgB,EAACR,gBAAD,EARhB;;AASH,gBAAIK,SAASC,GAAb,EAAkB;AAChBE,yBAAWH,KAAX,GAAmB,EAACI,KAAK,IAAIC,IAAJ,CAASL,KAAT,CAAN,EAAnB;AACAG,yBAAWF,GAAX,GAAiB,EAACK,KAAK,IAAID,IAAJ,CAASJ,GAAT,CAAN,EAAjB;AACD;AACD;AAbG;AAAA,mBAcgB,sBAAYM,IAAZ,CAAiBJ,UAAjB,CAdhB;;AAAA;AAcGK,gBAdH;AAAA,6CAeIf,IAAII,IAAJ,CAASW,IAAT,CAfJ;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAiBG,mBAASC,MAAT,CAAgB;AACpBC,sBAAQ,yBADY;AAEpBC,0BAAY,wBAFQ;AAGpBC,wBAAU,wBAHU;AAIpBC,qBAAO,YAAIA,KAJS;AAKpBC,gCALoB;AAMpBpB,oBAAMF,IAAIE,IAAJ,CAASqB;AANK,aAAhB,CAjBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,uB;;;;;AA4BtB;;;;;;;;;;;sEAQO,kBAA8BvB,GAA9B,EAAmCwB,IAAnC,EAAyCC,YAAzC;AAAA,QAAuDC,MAAvD,uEAAgE,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEKD,YAFL;AAAA,8CAGI,YAHJ,wBAaI,eAbJ,yBA0BI,oBA1BJ,yBAuCI,QAvCJ,yBA6CI,QA7CJ,yBA0DI,2BA1DJ,yBAqEI,gBArEJ;AAAA;;AAAA;AAIOE,eAJP,GAIa,uBAAaC,OAAb,CAAqB,EAACJ,MAAMA,KAAKF,GAAZ,EAArB,CAJb;;AAAA,gBAKMK,GALN;AAAA;AAAA;AAAA;;AAAA,iBAMO3B,GANP;AAAA;AAAA;AAAA;;AAOKA,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,KAAK,8CAAN,EAArB;AAPL,8CAQY,IARZ;;AAAA;AAAA;AAAA,mBAWQ,wBAAD,CAAiBwB,YAAjB,CAA8BL,IAA9B,EAAoC,YAApC,EAAkD,IAAlD,EAAwDE,MAAxD,CAXP;;AAAA;AAAA;;AAAA;AAAA,kBAcK,CAAC,WAAD,EAAc,aAAd,EAA6B,UAA7B,EAAyCI,OAAzC,CAAiDN,KAAKO,SAAL,CAAeC,cAAhE,IAAkF,CAAC,CAdxF;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkBU,wBAAD,CAAiBH,YAAjB,CAA8BL,IAA9B,EAAoC,eAApC,EAAqD,IAArD,EAA2DE,MAA3D,CAlBT;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAoBO1B,GApBP;AAAA;AAAA;AAAA;;AAqBKA,gBAAII,IAAJ,CAAS,EAACC,KAAK,6BAAN,EAAT;AArBL,8CAsBY,IAtBZ;;AAAA;AAAA;;AAAA;AAAA,iBA2BKmB,KAAKO,SAAL,CAAeE,KA3BpB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA+BU,wBAAD,CAAiBJ,YAAjB,CAA8BL,IAA9B,EAAoC,oBAApC,EAA0D,IAA1D,EAAgEE,MAAhE,CA/BT;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAiCO1B,GAjCP;AAAA;AAAA;AAAA;;AAkCKA,gBAAII,IAAJ,CAAS,EAACC,KAAK,wCAAN,EAAT;AAlCL,8CAmCY,IAnCZ;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA2CQ,wBAAD,CAAiBwB,YAAjB,CAA8BL,IAA9B,EAAoC,QAApC,EAA8C,IAA9C,EAAoDE,MAApD,CA3CP;;AAAA;AAAA;;AAAA;AAAA,iBA8CKF,KAAKO,SAAL,CAAeG,QA9CpB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkDU,wBAAD,CAAiBL,YAAjB,CAA8BL,IAA9B,EAAoC,QAApC,EAA8C,IAA9C,EAAoDE,MAApD,CAlDT;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAoDO1B,GApDP;AAAA;AAAA;AAAA;;AAqDKA,gBAAII,IAAJ,CAAS,EAACC,KAAK,4BAAN,EAAT;AArDL,8CAsDY,IAtDZ;;AAAA;AAAA;;AAAA;AA2DO8B,oBA3DP,GA2DkB,mBAASC,QAAT,CAAkBZ,KAAKW,QAAvB,CA3DlB;;AAAA,kBA4DKA,SAASE,IAAT,IAAiBF,SAASG,IA5D/B;AAAA;AAAA;AAAA;;AAAA,iBA6DOtC,GA7DP;AAAA;AAAA;AAAA;;AA8DKA,gBAAII,IAAJ,CAAS,EAACC,KAAK,+BAAN,EAAT;AA9DL,8CA+DY,IA/DZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAkEU,wBAAD,CAAiBwB,YAAjB,CAA8BL,IAA9B,EAAoC,2BAApC,EAAiE,IAAjE,EAAuEE,MAAvE,CAlET;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAsEQ,wBAAD,CAAiBG,YAAjB,CAA8BL,IAA9B,EAAoC,gBAApC,EAAsD,IAAtD,EAA4DE,MAA5D,CAtEP;;AAAA;AAAA;;AAAA;AAAA,8CAyEI,KAzEJ;;AAAA;AAAA;AAAA;;AA2EHa,oBAAQZ,GAAR,CAAY,gDAAZ;AACAY,oBAAQZ,GAAR;;AA5EG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAea,c;;;;;AAgFtB;;;;;;sEAGO,kBAA8BzC,GAA9B,EAAmCC,GAAnC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAE4BD,IAAIO,MAFhC,EAEImC,MAFJ,gBAEIA,MAFJ,EAEYhB,YAFZ,gBAEYA,YAFZ;AAAA;AAAA,mBAGgB,eAAKW,QAAL,CAAcK,MAAd,EAAsBC,QAAtB,CAA+B,WAA/B,CAHhB;;AAAA;AAGGlB,gBAHH;AAAA;AAAA,mBAK0BgB,eAAexC,GAAf,EAAoBwB,IAApB,EAA0BC,YAA1B,EAAwC,IAAxC,CAL1B;;AAAA;AAKGkB,0BALH;;AAAA,iBAOCA,cAPD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,8CAUI3C,IAAII,IAAJ,CAAS,EAAT,CAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAYG,mBAASY,MAAT,CAAgB;AACpBC,sBAAQ,gBADY;AAEpBC,0BAAY,wBAFQ;AAGpBC,wBAAU,wBAHU;AAIpBC,qBAAO,aAAIA,KAJS;AAKpBC,iCALoB;AAMpBpB,oBAAMF,IAAIE,IAAJ,CAASqB;AANK,aAAhB,CAZH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAesB,c;;;;;AAuBtB;;;;;;sEAGO,kBAAsC7C,GAAtC,EAA2CC,GAA3C;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEIyB,kCAFJ,GAEoB1B,IAAIO,MAFxB,CAEImB,YAFJ;AAGCoB,6BAHD;AAAA;;AAKD,0BAAIpB,iBAAiB,oBAArB,EAA2C;AACzCoB,kCAAUC,QAAQ,2BAAR,EAAqCC,uBAA/C;AACD,uBAFD,MAEO,IAAItB,iBAAiB,eAArB,EAAsC;AAC3CoB,kCAAUC,QAAQ,sBAAR,EAAgCE,kBAA1C;AACD;AATA;AAAA;;AAAA;AAAA;AAAA;;AAWDT,8BAAQZ,GAAR,CAAY,6BAAZ;AACAY,8BAAQZ,GAAR;AAZC;AAAA,6BAaK,mBAASX,MAAT,CAAgB;AACpBC,gCAAQ,wBADY;AAEpBC,oCAAY,wBAFQ;AAGpBC,kCAAU,wBAHU;AAIpBC,+BAAO,aAAIA,KAJS;AAKpBC,2CALoB;AAMpBpB,8BAAMF,IAAIE,IAAJ,CAASqB;AANK,uBAAhB,CAbL;;AAAA;AAAA;AAAA,2BAsBMtB,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,KAAK,oCAAN,EAArB;AAtBN;;AAAA;AAAA;AAAA,6BAwBiB,eAAKS,IAAL,CAAU,EAACQ,KAAK;AAClC2B,+BAAKJ;AAD6B,yBAAN,EAAV,EAEhBH,QAFgB,CAEP,WAFO,CAxBjB;;AAAA;AAwBGQ,2BAxBH;AA2BCC,6BA3BD,GA2BW,CA3BX;;AAAA,6CA4BQ3B,IA5BR;AA6BD;AACA;AAAA,8FAAC,kBAAgB4B,UAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,uGAAW;AAAA;AAAA;AAAA;AAAA;AAAA,mDACL7B,KAAKO,SAAL,CAAeuB,aADV;AAAA;AAAA;AAAA;;AAAA;AAAA,qDAEDd,eAAe,IAAf,EAAqBhB,IAArB,EAA2BC,YAA3B,EAAyC,IAAzC,CAFC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAX,IAIG,OAAO2B,UAJV;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAD;;AAAA;AAAA;AAAA;AAAA,6BAMGD,OANH;AAOAA,kCAAUA,UAAU,CAApB;AArCC;;AAAA;AAAA;AAAA;AAAA;;AA4BH,uCAAmBD,KAAnB,uHAA0B;AAAf1B,4BAAe;;AAAA,8BAAfA,IAAe;AAUzB;AAtCE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,2BAuCIxB,IAAII,IAAJ,CAAS,EAAT;AAvCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAyCG,mBAASY,MAAT,CAAgB;AACpBC,sBAAQ,wBADY;AAEpBC,0BAAY,wBAFQ;AAGpBC,wBAAU,wBAHU;AAIpBC,qBAAO,aAAIA,KAJS;AAKpBC,iCALoB;AAMpBpB,oBAAMF,IAAIE,IAAJ,CAASqB;AANK,aAAhB,CAzCH;;AAAA;AAAA,8CAiDItB,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB,CAjDJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAemD,sB;;;;;AAqDtB;;;;;;;sEAIO,mBAAgCxD,GAAhC,EAAqCC,GAArC;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEIwD,+BAFJ,GAEiBzD,IAAIO,MAFrB,CAEIkD,SAFJ;AAAA,kCAGwDzD,IAAI0D,IAH5D,+BAGI/B,MAHJ,EAGIA,MAHJ,oCAGa,KAHb,qDAGoBgC,SAHpB,EAGoBA,SAHpB,uCAGgC,IAHhC,sDAGsCC,OAHtC,EAGsCA,OAHtC,qCAGgD,IAHhD;AAAA,4CAIoB5D,IAAI0D,IAJxB,CAIEG,SAJF,EAIEA,SAJF,uCAIc,EAJd;AAKH;;AALG,4BAMC7D,IAAIE,IAAJ,CAASC,OAAT,CAAiBO,QAAjB,OAAgC+C,SANjC;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAOMxD,IAAIG,MAAJ,CAAW,GAAX,EAAgB0D,IAAhB,CAAqB,cAArB;AAPN;;AAAA;AASGnD,gCATH,GASgB,EAACR,SAASsD,SAAV,EAAqBvB,OAAO,EAAC6B,SAAS,IAAV,EAA5B,EAA6CR,eAAe,IAA5D,EAThB;AAUH;;AACA,0BAAI5B,WAAW,KAAX,IAAoBkC,UAAUG,MAAV,KAAqB,CAA7C,EAAgD;AAC9CrD,mCAAW,uBAAX,IAAsC,EAACsD,OAAO,CAAR,EAAtC;AACAJ,oCAAY,CAAC,eAAD,EAAkB,oBAAlB,EAAwC,QAAxC,EAAkD,QAAlD,CAAZ;AACD;AACD,0BAAID,WAAWD,SAAf,EAA0B;AACxBhD,mCAAW,SAAX,IAAwB,EAACC,KAAK,IAAIC,IAAJ,CAAS8C,SAAT,CAAN,EAA2B7C,KAAK,IAAID,IAAJ,CAAS+C,OAAT,CAAhC,EAAxB;AACD,uBAFD,MAEO,IAAIA,OAAJ,EAAa;AAClBjD,mCAAW,SAAX,IAAwB,EAACG,KAAK,IAAID,IAAJ,CAAS+C,OAAT,CAAN,EAAxB;AACD,uBAFM,MAEA,IAAID,SAAJ,EAAe;AACpBhD,mCAAW,SAAX,IAAwB,EAACC,KAAK,IAAIC,IAAJ,CAAS8C,SAAT,CAAN,EAAxB;AACD;AACD;AAtBG;AAAA,6BAuBuB,oBAAU5C,IAAV,CAAeJ,UAAf,CAvBvB;;AAAA;AAuBGuD,iCAvBH;;AAwBH;AACMpB,6BAzBH,GAyBaoB,YAAYC,GAAZ,CAAgB;AAAA,+BAAKC,EAAE3C,IAAF,CAAOf,QAAP,EAAL;AAAA,uBAAhB,CAzBb;AA0BH;;AA1BG;AAAA,6BA2BiB,eAAKK,IAAL,CAAU,EAACQ,KAAK;AAClC2B,+BAAKJ;AAD6B,yBAAN,EAAV,EAEhBH,QAFgB,CAEP,WAFO,CA3BjB;;AAAA;AA2BGQ,2BA3BH;AA8BCC,6BA9BD,GA8BW,CA9BX;AA+BH;;AA/BG,+CAgCQ3B,IAhCR;AAAA,qDAkCU4C,QAlCV;AAmCC;AACA;AAAA,gGAAC,kBAAgBhB,UAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,yGAAW;AAAA;AAAA;AAAA;AAAA;AAAA,qDACL7B,KAAKO,SAAL,CAAeuB,aADV;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAEDd,eAAe,IAAf,EAAqBhB,IAArB,EAA2B4C,QAA3B,EAAqC1C,MAArC,CAFC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAX,IAIG,OAAO0B,UAJV;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAD;;AAAA;AAAA;AAAA;AAAA,+BAMGD,OANH;AAOAA,oCAAUA,UAAU,CAApB;AA3CD;;AAiCD;AAjCC;AAAA;AAAA;;AAAA;AAkCD,gDAAuBS,SAAvB,mIAAkC;AAAA,gCAAvBQ,QAAuB;;AAAA,mCAAvBA,QAAuB;AAUjC;AA5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgCH,wCAAmBlB,KAAnB,2HAA0B;AAAf1B,4BAAe;;AAAA,+BAAfA,IAAe;AAazB;AA7CE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,2BA8CIxB,IAAII,IAAJ,CAAS,EAAT;AA9CJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAgDG,mBAASY,MAAT,CAAgB;AACpBC,sBAAQ,kBADY;AAEpBC,0BAAY,wBAFQ;AAGpBC,wBAAU,wBAHU;AAIpBC,qBAAO,cAAIA,KAJS;AAKpBC,kCALoB;AAMpBpB,oBAAMF,IAAIE,IAAJ,CAASqB;AANK,aAAhB,CAhDH;;AAAA;AAAA,+CAwDItB,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB,CAxDJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeiE,gB;;;;;AAhOtB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA","file":"api/callbackLog/callbackLog.controller.js","sourcesContent":["import '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport BiRequestLog from '../biRequestLog/biRequestLog.model';\nimport Callback from './callback';\nimport CallbackLog from './callbackLog.model';\nimport Card from '../card/card.model';\nimport Inventory from '../inventory/inventory.model';\nimport Retailer from '../retailer/retailer.model';\nimport ErrorLog from '../errorLog/errorLog.model';\nimport {getGitRev} from '../../helpers/errors';\n\n/**\n * Get callbacks in a date range\n */\nexport async function getCallbacksInDateRange(req, res) {\n  try {\n    // No company, don't proceed\n    if (!req.user.company) {\n      return res.status(400).json({err: 'This user does not have a company associated with their account'});\n    }\n    const {begin, end} = req.params;\n    const company = req.user.company.toString();\n    const findParams = {company};\n    if (begin && end) {\n      findParams.begin = {$gt: new Date(begin)};\n      findParams.end = {$lt: new Date(end)};\n    }\n    // Get all logs for this company\n    const logs = await CallbackLog.find(findParams);\n    return res.json(logs);\n  } catch (err) {\n    await ErrorLog.create({\n      method: 'getCallbacksInDateRange',\n      controller: 'callbackLog.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n  }\n}\n\n/**\n * Resend callbacks for a specific card\n * @param res\n * @param card\n * @param callbackType\n * @param resend Resend a callback which has already been sent\n * @return {Promise.<boolean>}\n */\nexport async function resendCallback(res, card, callbackType, resend = false) {\n  try {\n    switch (callbackType) {\n      case 'biComplete':\n        const log = BiRequestLog.findOne({card: card._id});\n        if (!log) {\n          if (res) {\n            res.status(404).json({err: 'Unable to find BI log for the requested card'});\n            return true;\n          }\n        }\n        await (new Callback()).sendCallback(card, 'biComplete', null, resend);\n        break;\n      case 'cardFinalized':\n        if (['sentToSmp', 'receivedSmp', 'rejected'].indexOf(card.inventory.activityStatus) > -1) {\n          // console.log('**************CARD FINALIZED**********');\n          // console.log(card.inventory._id);\n          // console.log(card.inventory.transaction.callbacks.join(','));\n          await (new Callback()).sendCallback(card, 'cardFinalized', null, resend);\n        } else {\n          if (res) {\n            res.json({err: 'Card has not been finalized'});\n            return true;\n          }\n        }\n        break;\n      case 'cqPaymentInitiated':\n        if (card.inventory.cqAch) {\n          // console.log('**************CQ PAYMENT INITIATED**********');\n          // console.log(card.inventory._id);\n          // console.log(card.inventory.transaction.callbacks.join(','));\n          await (new Callback()).sendCallback(card, 'cqPaymentInitiated', null, resend);\n        } else {\n          if (res) {\n            res.json({err: 'Card has not had payment initiated yet'});\n            return true;\n          }\n        }\n        break;\n      case 'denial':\n        // console.log('**************REJECTED**********');\n        // console.log(card.inventory._id);\n        // console.log(card.inventory.transaction.callbacks.join(','));\n        await (new Callback()).sendCallback(card, 'denial', null, resend);\n        break;\n      case 'credit':\n        if (card.inventory.credited) {\n          // console.log('**************CREDIT**********');\n          // console.log(card.inventory._id);\n          // console.log(card.inventory.transaction.callbacks.join(','));\n          await (new Callback()).sendCallback(card, 'credit', null, resend);\n        } else {\n          if (res) {\n            res.json({err: 'Card has not been credited'});\n            return true;\n          }\n        }\n        break;\n      case 'biUnavailableCardAccepted':\n        const retailer = Retailer.findById(card.retailer);\n        if (retailer.gsId || retailer.aiId) {\n          if (res) {\n            res.json({err: 'BI is available for this card'});\n            return true;\n          }\n        } else {\n          await (new Callback()).sendCallback(card, 'biUnavailableCardAccepted', null, resend);\n        }\n        break;\n      case 'needsAttention':\n        await (new Callback()).sendCallback(card, 'needsAttention', null, resend);\n        break;\n    }\n    return false;\n  } catch (err) {\n    console.log('**************ERR IN RESEND CALLBACK**********');\n    console.log(err);\n  }\n}\n\n/**\n * Fire a callback for a card whether it has been fired before or not\n */\nexport async function reFireCallback(req, res) {\n  try {\n    const {cardId, callbackType} = req.params;\n    const card = await Card.findById(cardId).populate('inventory');\n    // Send callbacks\n    const noCallbackSent = await resendCallback(res, card, callbackType, true);\n    // Callback cannot be sent, so an error has already been returned\n    if (noCallbackSent) {\n      return;\n    }\n    return res.json({});\n  } catch (err) {\n    await ErrorLog.create({\n      method: 'reFireCallback',\n      controller: 'callbackLog.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n  }\n}\n\n/**\n * Refire a callback from a list\n */\nexport async function refireCallbackFromList(req, res) {\n  try {\n    const {callbackType} = req.params;\n    let cardIds;\n    try {\n      if (callbackType === 'cqPaymentInitiated') {\n        cardIds = require('./cqPaymentInitiatedBadVb').cqPaymentInitiatedBadVb;\n      } else if (callbackType === 'cardFinalized') {\n        cardIds = require('./cardFinalizedBadVb').cardFinalizedBadVb;\n      }\n    } catch (err) {\n      console.log('**************ERR**********');\n      console.log(err);\n      await ErrorLog.create({\n        method: 'refireCallbackFromList',\n        controller: 'callbackLog.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err,\n        user: req.user._id\n      });\n\n      return res.status(500).json({err: 'Unable to include list of card IDs'});\n    }\n    const cards = await Card.find({_id: {\n      $in: cardIds\n    }}).populate('inventory');\n    let counter = 1;\n    for (const card of cards) {\n      // Send callbacks\n      (async function (multiplier) {\n        setTimeout(async () => {\n          if (card.inventory.isTransaction) {\n            await resendCallback(null, card, callbackType, true);\n          }\n        }, 1000 * multiplier);\n      })(counter);\n      counter = counter + 1;\n    }\n    return res.json({});\n  } catch (err) {\n    await ErrorLog.create({\n      method: 'refireCallbackFromList',\n      controller: 'callbackLog.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json({});\n  }\n}\n\n/**\n * Fire all callbacks which should have been fired but which were not\n * @return {Promise.<void>}\n */\nexport async function fireAllCallbacks(req, res) {\n  try {\n    const {companyId} = req.params;\n    const {resend = false, dateBegin = null, dateEnd = null} = req.body;\n    let {callbacks = []} = req.body;\n    // Only allow them to do this for their own company\n    if (req.user.company.toString() !== companyId) {\n      return res.status(401).send('Unauthorized');\n    }\n    const findParams = {company: companyId, cqAch: {$exists: true}, isTransaction: true};\n    // If we're not resending, then only do it on new callbacks\n    if (resend === false && callbacks.length === 0) {\n      findParams['transaction.callbacks'] = {$size: 0};\n      callbacks = ['cardFinalized', 'cqPaymentInitiated', 'denial', 'credit']\n    }\n    if (dateEnd && dateBegin) {\n      findParams['created'] = {$gt: new Date(dateBegin), $lt: new Date(dateEnd)};\n    } else if (dateEnd) {\n      findParams['created'] = {$lt: new Date(dateEnd)};\n    } else if (dateBegin) {\n      findParams['created'] = {$gt: new Date(dateBegin)};\n    }\n    // Get inventories\n    const inventories = await Inventory.find(findParams);\n    // Card IDs for those inventories\n    const cardIds = inventories.map(i => i.card.toString());\n    // Get in correct format\n    const cards = await Card.find({_id: {\n      $in: cardIds\n    }}).populate('inventory');\n    let counter = 1;\n    // Iterate cards\n    for (const card of cards) {\n      // Iterate desired callbacks\n      for (const callback of callbacks) {\n        // Wait a second between each callback\n        (async function (multiplier) {\n          setTimeout(async () => {\n            if (card.inventory.isTransaction) {\n              await resendCallback(null, card, callback, resend);\n            }\n          }, 1000 * multiplier);\n        })(counter);\n        counter = counter + 1;\n      }\n    }\n    return res.json({});\n  } catch (err) {\n    await ErrorLog.create({\n      method: 'fireAllCallbacks',\n      controller: 'callbackLog.controller',\n      revision: getGitRev(),\n      stack: err.stack,\n      error: err,\n      user: req.user._id\n    });\n    return res.status(500).json({});\n  }\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}