{"version":3,"sources":["api/callbackLog/callback.js"],"names":["Callback","card","callbackUrl","callbackType","finalized","verifiedBalance","inventory","data","id","_id","number","getLast4Digits","claimedBalance","balance","cqPaid","transaction","netPayout","prefix","cqAch","note","adminActivityNote","debug","console","log","create","pin","success","url","company","statusCode","logEntry","env","post","send","end","err","res","JSON","stringify","text","status","failResponse","save","constructor","modelName","findById","isTransaction","logData","Object","assign","Array","isArray","callbacks","indexOf","push","Promise","resolve","resend","makeCallbackFromLog","name","findOne","populate","updateInventory","getCallbackUrl","activityStatus","makeCallbackFromCard","method","controller","revision","stack","error"],"mappings":"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","file":"api/callbackLog/callback.js","sourcesContent":["import superagent from 'superagent';\n\nimport '../company/autoBuyRate.model';\nimport '../company/companySettings.model';\nimport '../inventory/InventoryCache.model';\nimport '../inventory/inventoryParamCache.model';\nimport '../log/logs.model';\nimport '../company/company.model';\nimport '../card/card.model';\nimport '../stores/store.model';\nimport '../reserve/reserve.model';\n\nimport Card from '../card/card.model';\nimport CallbackLog from './callbackLog.model';\nimport Inventory from '../inventory/inventory.model';\nimport ErrorLog from '../errorLog/errorLog.model';\nimport {getGitRev} from '../../helpers/errors';\n\nimport {recalculateTransactionAndReserve} from '../card/card.helpers';\nimport config from '../../config/environment';\n\nexport default class Callback {\n  // Make a callback as part of a transaction\n  /*\n   {\n   id: string <card ID>,\n   number: string <last 4 digits of card>,\n   claimedBalance: float <balance claimed by user>,\n   verifiedBalance: float <balance verified by BI>,\n   cqPaid: float <the amount CQ is paying before fees>,\n   netPayout: float <the amount CQ is paying after fees>,\n   prefix: string <card prefix>,\n   cqAch: string<the CQ number in our payment to you>,\n   finalized: boolean <whether the sale is finalized>,\n   callbackType: string <type of callback>\n   }\n   */\n  async makeCallbackFromCard(card, callbackUrl, callbackType, finalized) {\n    let verifiedBalance = card.inventory.verifiedBalance;\n    const data = {\n      id: card._id,\n      number: card.getLast4Digits(),\n      claimedBalance: card.balance,\n      verifiedBalance,\n      cqPaid: card.inventory.transaction.cqPaid,\n      netPayout: card.inventory.transaction.netPayout,\n      prefix: card.inventory.transaction.prefix,\n      cqAch: card.inventory.cqAch,\n      finalized,\n      callbackType\n    };\n    if (callbackType === 'cardFinalized' || callbackType === 'cqPaymentInitiated') {\n      if (verifiedBalance === null || typeof verifiedBalance === 'undefined') {\n        data.verifiedBalance = card.inventory.balance;\n      }\n    } else if (callbackType === 'needsAttention') {\n      data.note = card.inventory.adminActivityNote\n    }\n\n    if (config.debug) {\n      console.log('**************CALLBACK DATA FROM TRANSACTION**********');\n      console.log(data);\n    }\n\n    // Save initial log entry\n    let logEntry = await CallbackLog.create({\n      callbackType,\n      number: card.getLast4Digits(),\n      pin: card.pin,\n      claimedBalance: card.balance,\n      verifiedBalance,\n      cqPaid: card.inventory.transaction.cqPaid,\n      netPayout: card.inventory.transaction.netPayout,\n      prefix: card.inventory.transaction.prefix,\n      cqAch: card.inventory.cqAch,\n      finalized,\n      success: false,\n      url: callbackUrl,\n      card: card._id,\n      company: card.inventory.company,\n      statusCode: 0\n    });\n\n    // Don't send from development\n    if (config.env === 'development' || config.env === 'test') {\n      return;\n    }\n\n    superagent.post(callbackUrl).send(data).end(async function (err, res) {\n      if (!err) {\n        if (config.debug) {\n          console.log('Sent '+JSON.stringify(data)+' to '+callbackUrl);\n        }\n      } else {\n        if (config.debug) {\n          console.log('*************ERROR SENDING CALLBACK*************');\n          console.log(err);\n        }\n      }\n      let success = false;\n      let text = '';\n      let statusCode = 404;\n      if (res) {\n        success = res.status ? res.status < 300 : false;\n        text = res.text ? res.text : '';\n        statusCode = res.status;\n      }\n\n      logEntry.failResponse = success ? '' : text;\n      logEntry.statusCode = statusCode;\n      logEntry.success = success;\n      logEntry.finalized = finalized;\n      await logEntry.save();\n    });\n  }\n  // Make a callback directly from a /bi requests\n  /*\n   {\n   number: string <last 4 digits of card>,\n   verifiedBalance: number <balance from BI>,\n   pin: string <card pin>,\n   callbackType: \"balanceCB\",\n   prefix: string <card prefix>\n   }\n   */\n  async makeCallbackFromLog(log, callbackUrl, callbackType) {\n    let inventory = {};\n    // This is actually a card, since we're using a card for BiUnavailable callbacks\n    if (log.constructor.modelName === 'Card' && log.inventory) {\n      inventory = await Inventory.findById(log.inventory);\n    }\n    const data = {\n      number: log.getLast4Digits(),\n      verifiedBalance: log.balance,\n      pin: log.pin,\n      callbackType\n    };\n    // BiLog callback\n    if (log.prefix) {\n      data.prefix = log.prefix\n    // BiUnavailable callback\n    } else if (inventory.isTransaction && inventory.transaction.prefix) {\n      data.prefix = inventory.transaction.prefix;\n    }\n\n    if (config.debug) {\n      console.log('**************CALLBACK DATA FROM LOG**********');\n      console.log(data);\n    }\n\n    const logData = Object.assign(data, {\n      success: false,\n      url: callbackUrl,\n      finalized: false,\n      statusCode: 0\n    });\n    let logEntry = new CallbackLog(logData);\n    logEntry = await logEntry.save();\n\n    // Don't send from development\n    if (config.env === 'development' || config.env === 'test') {\n      return;\n    }\n\n    superagent.post(callbackUrl).send(data).end(async function (err, res) {\n      if (!err) {\n        console.log('Sent '+JSON.stringify(data)+' to '+callbackUrl);\n      } else {\n        console.log('*************ERROR SENDING CALLBACK*************');\n        console.log(err);\n      }\n\n      let success = false;\n      let text = '';\n      let statusCode = 404;\n      if (res) {\n        success = res.status ? res.status < 300 : false;\n        text = res.text ? res.text : '';\n        statusCode = res.status;\n      }\n      // Update log with result\n      logEntry.success = success;\n      logEntry.failResponse = success ? '' : text;\n      logEntry.statusCode = statusCode;\n      logEntry.finalized = log.finalized;\n\n      await logEntry.save();\n    });\n  }\n\n  /**\n   * Update inventory with the type of callback being made\n   * @param inventory Inventory\n   * @param callbackType Callback type\n   * @return {Promise.<void>}\n   */\n  async updateInventory(inventory, callbackType) {\n    if (!Array.isArray(inventory.transaction.callbacks)) {\n      inventory.transaction.callbacks = [];\n    }\n    if (inventory.transaction.callbacks.indexOf(callbackType) === -1) {\n      inventory.transaction.callbacks.push(callbackType);\n      return await inventory.save();\n    }\n    return Promise.resolve(inventory);\n  }\n  /**\n   * Notifies the company of a certain card\n   *\n   * @param {Object} card\n   * @param {String} callbackType One of \"balanceCB\", \"biComplete\", \"cardFinalized\", \"cqPaymentInitiated\"\n   * @param {String} callbackUrl Send a callback directly to this URL\n   * @param {Boolean} resend Resend a callback which has already potentially been sent\n   */\n  async sendCallback(card, callbackType, callbackUrl = null, resend = false) {\n    try {\n      // BI callbacks\n      if (callbackUrl) {\n        return this.makeCallbackFromLog(card, callbackUrl, callbackType)\n      }\n      if (card.constructor.name !== 'model' || !card.inventory) {\n        card = await Card.findOne({_id: card._id}).populate('inventory');\n      }\n      if (!card) {\n        return;\n      }\n      if (card.inventory && card.inventory.isTransaction) {\n        // Don't send the callback again unless we're purposely resending\n        if (resend || card.inventory.transaction.callbacks.indexOf(callbackType) === -1) {\n          // Update inventory with this type of callback\n          card.inventory = await this.updateInventory(card.inventory, callbackType);\n          const callbackUrl = await card.inventory.getCallbackUrl();\n          if (callbackUrl) {\n            let finalized = false;\n            if (['receivedSmp', 'sendToSmp', 'rejected'].indexOf(card.inventory.activityStatus) > -1 || card.inventory.cqAch) {\n              finalized = true;\n              // Recalculate card to see if anything has changes\n              await recalculateTransactionAndReserve(card.inventory);\n              card = await Card.findById(card._id).populate('inventory');\n            }\n            await this.makeCallbackFromCard(card, callbackUrl, callbackType, finalized);\n          }\n        }\n      }\n    } catch (err) {\n      await ErrorLog.create({\n        method: 'refireCallbackFromList',\n        controller: 'callbackLog.controller',\n        revision: getGitRev(),\n        stack: err.stack,\n        error: err\n      });\n    }\n  }\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}