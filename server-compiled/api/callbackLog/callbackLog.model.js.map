{"version":3,"sources":["api/callbackLog/callbackLog.model.js"],"names":["mongoose","require","Promise","Schema","CallbackLog","created","type","Date","default","now","callbackType","String","required","number","pin","claimedBalance","Number","verifiedBalance","cqPaid","netPayout","prefix","cqAch","finalized","Boolean","success","failResponse","url","statusCode","card","Types","ObjectId","ref","company","indexes","expireAfterSeconds","set","virtuals","getters","module","exports","model"],"mappings":"AAAA;;AAMA;;;;AACA;;;;AALA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACAD,SAASE,OAAT,GAAmBD,QAAQ,UAAR,CAAnB;AACA,IAAME,SAASH,SAASG,MAAxB;;AAKA,IAAMC,cAAc,IAAID,MAAJ,CAAW;AAC7BE,WAAS,EAACC,MAAMC,IAAP,EAAaC,SAASD,KAAKE,GAA3B,EADoB;AAE7B;AACAC,gBAAc,EAACJ,MAAMK,MAAP,EAAeC,UAAU,IAAzB,EAHe;AAI7B;AACAC,UAAQ,EAACP,MAAMK,MAAP,EAAeC,UAAU,IAAzB,EALqB;AAM7B;AACAE,OAAKH,MAPwB;AAQ7B;AACAI,kBAAgBC,MATa;AAU7B;AACAC,mBAAiBD,MAXY;AAY7B;AACAE,UAAQF,MAbqB;AAc7B;AACAG,aAAWH,MAfkB;AAgB7B;AACAI,UAAQT,MAjBqB;AAkB7B;AACAU,SAAOV,MAnBsB;AAoB7B;AACAW,aAAW,EAAChB,MAAMiB,OAAP,EAAgBX,UAAU,IAA1B,EAAgCJ,SAAS,KAAzC,EArBkB;AAsB7B;AACAgB,WAAS,EAAClB,MAAMiB,OAAP,EAAgBX,UAAU,IAA1B,EAAgCJ,SAAS,IAAzC,EAvBoB;AAwB7B;AACAiB,gBAAcd,MAzBe;AA0B7B;AACAe,OAAK,EAACpB,MAAMK,MAAP,EAAeC,UAAU,IAAzB,EA3BwB;AA4B7B;AACAe,cAAY,EAACrB,MAAMU,MAAP,EAAeJ,UAAU,IAAzB,EA7BiB;AA8B7B;;;AAGA;AACAgB,QAAM,EAACtB,MAAMH,OAAO0B,KAAP,CAAaC,QAApB,EAA8BC,KAAK,MAAnC,EAlCuB;AAmC7B;AACAC,WAAS,EAAC1B,MAAMH,OAAO0B,KAAP,CAAaC,QAApB,EAA8BC,KAAK,SAAnC;AApCoB,CAAX,CAApB;;AAuCA;AACA,IAAME,UAAU;AACd;AACA,CAAC,EAAC5B,SAAS,CAAV,EAAD,EAAe,EAAC6B,2CAAD,EAAf,CAFc,EAGd,CAAC,EAACF,SAAS,CAAV,EAAD,CAHc,CAAhB;AAKA,uBAAc5B,WAAd,EAA2B6B,OAA3B;;AAEA7B,YAAY+B,GAAZ,CAAgB,QAAhB,EAA0B;AACxBC,YAAU,IADc,EACRC,SAAS;AADD,CAA1B;;AAIAC,OAAOC,OAAP,GAAiBvC,SAASwC,KAAT,CAAe,aAAf,EAA8BpC,WAA9B,CAAjB","file":"api/callbackLog/callbackLog.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\n\nimport createIndexes from '../../config/indexDb';\nimport {eightWeeks} from '../../config/environment';\n\nconst CallbackLog = new Schema({\n  created: {type: Date, default: Date.now},\n  // Callback type\n  callbackType: {type: String, required: true},\n  // Card number\n  number: {type: String, required: true},\n  // Card pin\n  pin: String,\n  // Claimed balance\n  claimedBalance: Number,\n  // Verified balance\n  verifiedBalance: Number,\n  // Amount CQ paid before fees and margin\n  cqPaid: Number,\n  // Amount CQ paid after fees and margin\n  netPayout: Number,\n  // Card prefix\n  prefix: String,\n  // CQ ACH number\n  cqAch: String,\n  // Whether a card has been finalized\n  finalized: {type: Boolean, required: true, default: false},\n  // Whether there was a success or failure\n  success: {type: Boolean, required: true, default: true},\n  // Fail response from the remote server if we encounter an error\n  failResponse: String,\n  // Callback URL\n  url: {type: String, required: true},\n  // Response status code\n  statusCode: {type: Number, required: true},\n  /**\n   * References\n   */\n  // Card\n  card: {type: Schema.Types.ObjectId, ref: 'Card'},\n  // Company making the callback request\n  company: {type: Schema.Types.ObjectId, ref: 'Company'},\n});\n\n// Indexes\nconst indexes = [\n  // Expire logs after two weeks\n  [{created: 1}, {expireAfterSeconds: eightWeeks}],\n  [{company: 1}]\n];\ncreateIndexes(CallbackLog, indexes);\n\nCallbackLog.set('toJSON', {\n  virtuals: true, getters: true\n});\n\nmodule.exports = mongoose.model('CallbackLog', CallbackLog);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}