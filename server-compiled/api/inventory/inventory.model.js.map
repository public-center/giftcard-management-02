{"version":3,"sources":["api/inventory/inventory.model.js"],"names":["mongoose","require","Promise","Schema","inventorySchemaObject","balance","Number","buyRate","buyAmount","transactionId","String","cqTransactionId","smp","type","get","convertToLowerCase","set","status","adminActivityNote","status_message","liquidationSoldFor","liquidationRate","sellRateAtPurchase","disableAddToLiquidation","margin","default","min","max","serviceFee","tzOffset","rejected","Boolean","rejectedDate","Date","rejectAmount","credited","creditedDate","creditAmount","proceedWithSale","soldToLiquidation","saveYaConfirmLastRunTime","now","saveYa","selling","confirmed","rejectReason","saveYaRate","saveYaStatus","underReview","offer","paymentType","error","activityStatus","buyerShipStatus","buyerAch","paidStatus","achNumber","verifiedBalance","defaultsToBalance","hasVerifiedBalance","orderNumber","smpAch","cqAch","created","userTime","systemTime","valid","deduction","locked","merchandise","isTransaction","transaction","memo","nccCardValue","transactionTotal","merchantPayoutAmount","merchantPayoutPercentage","amountDue","cqPaid","reserve","Types","ObjectId","ref","reserveAmount","cqWithheld","netPayout","prefix","creditValuePercentage","maxSpending","vmMemo1","vmMemo2","vmMemo3","vmMemo4","callbacks","callbackUrl","changed","isApi","customer","retailer","store","company","liquidationError","card","required","user","reconciliation","batch","receipt","InventorySchema","indexes","name","unique","statics","cacheInventoryValues","inventory","companyMargin","isNaN","cache","model","_id","corpRateThisInventory","displayMargin","companyActivityStatus","adjustedBuyAmountAfterRejection","realBuyAmount","amountOwed","netAmount","save","getReserveAmount","reserveRate","getCqPaid","rateAfterMargin","getCalculatedValues","resolve","findOne","remove","then","catch","console","log","err","getValues","addReserveToSet","reserveId","reserves","map","r","toString","indexOf","push","reserveTotal","amount","addToRelatedErrorLog","modelType","create","path","params","isError","statusMessage","addToRelatedReserveRecords","findById","update","$set","methods","getCard","getCallbackUrl","settings","getTransactionValues","createReserve","undoReserveValues","$pull","$inc","removeReserve","constructor","stack","pre","next","SAVEYA","CARDCASH","CARDPOOL","GIFTCARDZEN","setSmp","parseInt","toUpperCase","oldInventory","current","toObject","old","JSON","stringify","claimedBalance","useClaimedIfNoVb","whatever","toLowerCase","getters","module","exports"],"mappings":"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","file":"api/inventory/inventory.model.js","sourcesContent":["const mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nimport createIndexes from '../../config/indexDb';\nconst Schema = mongoose.Schema;\n\nimport {smpIds} from '../../config/environment';\nimport {formatFloat} from '../../helpers/number';\n\n\nexport const inventorySchemaObject = {\n  // Balance (either from BI or from manual)\n  balance: Number,\n  // Actual card buy rate, which can differ from buy rate calculated by retailer minus margin\n  buyRate: Number,\n  // Buy amount (the amount that the store bought the card from the customer for)\n  buyAmount: Number,\n  // SMP Transaction ID (not Vista)\n  transactionId: String,\n  // CQ transaction ID (not Vista)\n  cqTransactionId: String,\n  // SMP to whom card is sold\n  // CC: 2\n  // CP: 3\n  smp: String,\n  // Type of card (electronic or physical) as returned from LQAPI\n  type: {type: String, get: convertToLowerCase, set: convertToLowerCase},\n  // Transaction status (pending, shipped, paid, denied)\n  status: String,\n  // Notes added in activity\n  adminActivityNote: String,\n  // Liquidation status message\n  status_message: {type: String},\n  // The amount that CQ receives from the SMP for the sale of a card\n  liquidationSoldFor: {type: Number},\n  // Rate returned from liquidation API (Without margin)\n  liquidationRate: {type: Number},\n  // Rate at purchase (without margin included)\n  sellRateAtPurchase: Number,\n  // Disable adding to liquidation\n  disableAddToLiquidation: {type: String},\n  // Margin at time of adding to liquidation\n  margin: {type: Number, default: 0.03, min: 0, max: 1},\n  // Service fee at time of transaction\n  serviceFee: {type: Number, default: 0.0075, min: 0, max: 1},\n  // User timezone offset\n  tzOffset: String,\n  // Rejected\n  rejected: {type: Boolean, default: false},\n  // Rejected date\n  rejectedDate: Date,\n  // Reject amount\n  rejectAmount: Number,\n  // Credited\n  credited: {type: Boolean, default: false},\n  // Credited date\n  creditedDate: Date,\n  // Credit amount\n  creditAmount: Number,\n  /**\n   * LQ interactions\n   */\n  // Proceed with sale is set to false when auto-sell is turned off, and requires an admin to approve the sale\n  proceedWithSale: {type: Boolean, default: true},\n  // Sold via liquidation\n  soldToLiquidation: {type: Boolean, default: false},\n  /**\n   * SaveYa confirms\n   */\n  saveYaConfirmLastRunTime: {\n    type: Date,\n    default: Date.now\n  },\n  // @todo Save ya info (I wanna delete you, fucker, but we've got some old data that needs you\n  saveYa: {\n    // In the process of selling to SY\n    selling: {type: Boolean},\n    // SaveYa verification\n    confirmed: {type: Boolean, default: false},\n    // Save ya rejected\n    rejected: {type: Boolean, default: false},\n    // Saveya reject reason\n    rejectReason: String,\n    // SaveYa returned balance\n    balance: {type: Number},\n    // SaveYa rate\n    saveYaRate: {type: Number},\n    // SaveYa status (can set if not confirmed)\n    saveYaStatus: {type: String},\n    // Under review by SY\n    underReview: {type: Boolean, default: false},\n    // SY offer\n    offer: Number,\n    // payment type\n    paymentType: String,\n    // Error in connections with SY\n    error: String\n  },\n  // Activity status (THIS IS THE USED STATUS)\n  activityStatus: String,\n  // Corporate ship status (will be set from corporate activity page)\n  // @todo Unused\n  buyerShipStatus: String,\n  // Corporate ACH (will be set from corporate activity page)\n  buyerAch: String,\n  // Paid status\n  paidStatus: String,\n  // Ach number\n  achNumber: String,\n  // Verified balance (set to 0 for invalid cards)\n  verifiedBalance: {type: Number, get: defaultsToBalance, default: null},\n  // Verified balance has been received\n  hasVerifiedBalance: {type: Boolean, default: false},\n  // Order number\n  orderNumber: String,\n  // SMP ACH\n  smpAch: String,\n  // CQ ACH\n  cqAch: String,\n  /**\n   * Created\n   */\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  /**\n   * User time when inventory created\n   */\n  userTime: {\n    type: Date\n  },\n  /**\n   * System time, because we've come full fucking circle\n   */\n  systemTime: {type: Date, default: Date.now},\n\n  // Card is invalid, set either by an admin or by BI response\n  valid: Boolean,\n\n  // Deduction number\n  deduction: String,\n  // Process lock\n  locked: {type: Boolean, default: false},\n  // Merchandise\n  merchandise: {type: Boolean, default: false},\n  /**\n   * Vista data\n   */\n  isTransaction: {type: Boolean, default: false},\n  // Transaction data\n  transaction: {\n    // can be set to whatever they want\n    memo: String,\n    // verifiedBalance * retailer.creditValuePercentage - amount spent\n    nccCardValue: {\n      type: Number,\n    },\n    // Value of the complete transaction, both GC and cash\n    transactionTotal: Number,\n    // Transaction ID\n    transactionId: String,\n    // Amount paid to the merchant for this transaction\n    merchantPayoutAmount: Number,\n    // Percentage paid out to the merchant for this transaction\n    merchantPayoutPercentage: Number,\n    // Amount due in cash for this transaction\n    amountDue: Number,\n    // Amount CQ paid to vista\n    cqPaid: Number,\n    // Reserve\n    reserve: {type: Schema.Types.ObjectId, ref: 'Reserve'},\n    // Reserve amount\n    reserveAmount: Number,\n    // CQ withheld\n    cqWithheld: Number,\n    // Net payout to Vista\n    netPayout: Number,\n    // Prefix (whatever they want this to be, like memo)\n    prefix: String,\n    // Service fees are handled differently for transactions. This is the dollar figure, not the rate\n    serviceFee: Number,\n    // Amount credited based on card balance\n    creditValuePercentage: Number,\n    // Current max spending for this store\n    maxSpending: Number,\n    // VM Memos\n    vmMemo1: String,\n    vmMemo2: String,\n    vmMemo3: String,\n    vmMemo4: String,\n    // Which callbacks have already been sent (we don't want repeat callbacks)\n    callbacks: []\n  },\n  // Callback URL once a VB is determined\n  callbackUrl: String,\n  // Inventory has changed\n  changed: {type: Boolean, default: true},\n  // Is sold via LQ API\n  isApi: {type: Boolean, default: false},\n  /**\n   * Relations\n   */\n  // User checking the card\n  customer: {type: Schema.Types.ObjectId, ref: 'Customer'},\n  // Retailer\n  retailer: {type: Schema.Types.ObjectId, ref: 'Retailer'},\n  // Store\n  store: {type: Schema.Types.ObjectId, ref: 'Store'},\n  // Company\n  company: {type: Schema.Types.ObjectId, ref: 'Company'},\n  // Liquidation error\n  liquidationError: [{type: Schema.Types.ObjectId, ref: 'LiquidationError'}],\n  // Card\n  card: {type: Schema.Types.ObjectId, ref: 'Card', required: true},\n  // User\n  user: {type: Schema.Types.ObjectId, ref: 'User'},\n  // Reconciliation\n  reconciliation: {type: Schema.Types.ObjectId, ref: 'Reconciliation'},\n  // Batch\n  batch: {type: Schema.Types.ObjectId, ref: 'Batch'},\n  // Receipt\n  receipt: {type: Schema.Types.ObjectId, ref: 'Receipt'}\n};\n\n// Schema\nconst InventorySchema = new Schema(inventorySchemaObject);\n\n// Indexes\nconst indexes = [\n  // Unique card index\n  [{card: 1}, {name: 'card', unique: true}],\n  [{soldToLiquidation: 1, proceedWithSale: 1, disableAddToLiquidation: 1, type: 1, locked: 1, isTransaction: 1}],\n];\ncreateIndexes(InventorySchema, indexes);\n\n// Static methods\nInventorySchema.statics = {\n  /**\n   * Cache inventory values\n   * @param inventory\n   */\n  cacheInventoryValues: async function (inventory) {\n    const companyMargin = isNaN(inventory.companyMargin) ? 0 : inventory.companyMargin;\n    const cache = new (this.model('InventoryCache'))({\n      inventory: inventory._id,\n      corpRateThisInventory: inventory.corpRateThisInventory,\n      serviceFee: inventory.serviceFee,\n      companyMargin: companyMargin,\n      displayMargin: inventory.displayMargin,\n      companyActivityStatus: inventory.activityStatus,\n      adjustedBuyAmountAfterRejection: inventory.realBuyAmount,\n      amountOwed: inventory.amountOwed,\n      cqPaid: inventory.cqPaid,\n      netAmount: inventory.netAmount\n    });\n    return cache.save();\n  },\n  /**\n   * Get reserve amount for a card\n   * @param balance Claimed or verified balance\n   * @param reserveRate Reserve rate\n   * @return {Number}\n   */\n  getReserveAmount(balance, reserveRate) {\n    return formatFloat(balance * reserveRate);\n  },\n  /**\n   * Get CQ paid amount\n   * @param balance Claimed or VB\n   * @param rateAfterMargin LQ rate minus margin\n   * @return {number}\n   */\n  getCqPaid(balance, rateAfterMargin) {\n    return formatFloat(balance * rateAfterMargin);\n  },\n  /**\n   * Determine if we have valid calculated values for this inventory\n   */\n  getCalculatedValues: async function getValues(inventory) {\n    return new Promise(async (resolve) => {\n      const changed = inventory.changed;\n      // See if we have calculated values\n      const cache = await (this.model('InventoryCache')).findOne({inventory: inventory._id});\n      // No cache\n      if (!cache) {\n        return resolve(null);\n      }\n      // Unchanged, so calculate\n      if (!changed) {\n        return resolve(cache);\n      } else {\n        cache.remove()\n        .then(() => resolve(null))\n        .catch(err => {\n          console.log('**************ERR REMOVING CACHE**********');\n          console.log(err);\n          resolve(null);\n        })\n      }\n    });\n  },\n  /**\n   * Add new reserve to a company or store set of reserves\n   * @param model Company or Store model\n   * @param reserve Incoming reserve\n   * @return {Promise.<void>}\n   */\n  async addReserveToSet(model, reserve) {\n    const reserveId = reserve._id;\n    if (model.reserves.map(r => r.toString()).indexOf(reserveId) === -1) {\n      model.reserves.push(reserveId);\n      model.reserveTotal = model.reserveTotal + reserve.amount;\n      await model.save();\n    }\n  },\n  /**\n   * Store an error log item if we cannot find a reference that should exist\n   * @param modelType\n   * @return {Promise.<*>}\n   */\n  async addToRelatedErrorLog(modelType) {\n    return await this.model('Log').create({\n      path: 'runDefers/completeTransactions/addToRelatedReserveRecords',\n      params: reserve,\n      isError: true,\n      statusMessage: `Unable to retrieve ${modelType}`\n    });\n  },\n  /**\n   * Add reserve values to store, company, and inventory\n   * @return {Promise.<void>}\n   */\n  async addToRelatedReserveRecords(reserve) {\n    const company = await this.model('Company').findById(reserve.company);\n    // Cannot find company\n    if (!company) {\n      return await this.addToRelatedErrorLog('company')\n    }\n    // Add this reserve to the set if it doesn't exist\n    await this.addReserveToSet(company, reserve);\n    // Update store\n    const store = await (this.model('Store')).findById(reserve.store);\n    if (!company) {\n      return await this.addToRelatedErrorLog('store');\n    }\n    await this.addReserveToSet(store, reserve);\n    // Update inventory\n    await this.update({_id: reserve.inventory}, {\n      $set: {'transaction.reserve': reserve._id, 'transaction.reserveAmount': reserve.amount}\n    });\n  }\n};\n\nInventorySchema.methods = {\n  // Retrieve card associated with inventory\n  getCard: function () {\n    return (this.model('Card')).findOne({inventory: this._id});\n  },\n  getCallbackUrl: async function () {\n    if (this.callbackUrl) {\n      return Promise.resolve(this.callbackUrl);\n    }\n\n    return (this.model('Store')).findOne({_id: this.store})\n    .then(store => {\n      if (store.callbackUrl) {\n        return Promise.resolve(store.callbackUrl);\n      }\n\n      return (this.model('CompanySettings')).findOne({company: this.company})\n      .then(settings => {\n        return Promise.resolve(settings.callbackUrl);\n      });\n    });\n  },\n  /**\n   * Get transaction values\n   * @param reserveAmount Reserve amount\n   * @param cqPaid The amount CQ is paying for the card\n   * @param balance Claimed or VB\n   * @return {InventorySchema.methods}\n   */\n  getTransactionValues(reserveAmount, cqPaid, balance) {\n    this.transaction.cqWithheld = formatFloat(this.transaction.serviceFee + reserveAmount);\n    this.transaction.netPayout = formatFloat((balance * (this.liquidationRate - this.margin)) - this.transaction.cqWithheld);\n    this.transaction.cqPaid = cqPaid;\n    this.cqPaid = cqPaid;\n    return this;\n  },\n  /**\n   * Create a reserve for a transaction\n   * @return {Promise.<*>}\n   */\n  async createReserve() {\n    const company = this.company._id ? this.company._id : this.company;\n    const reserve = new (this.model('Reserve'))({\n      inventory: this._id,\n      amount: this.transaction.reserveAmount,\n      company,\n      store: this.store\n    });\n    return reserve.save();\n  },\n  /**\n   * Mongodb params for removing previously set reserves\n   * @param reserve\n   * @return {{$pull: {reserves: *}, set: {reserveTotal: *}}}\n   */\n  undoReserveValues(reserve) {\n    return {\n      $pull: {\n        reserves: reserve._id\n      },\n      $inc: {reserveTotal: reserve.amount * -1}\n    }\n  },\n  /**\n   * Remove a reserve from a transaction\n   * @return {Promise.<void>}\n   */\n  async removeReserve() {\n    return new Promise(async resolve => {\n      try {\n        const reserveId = this.transaction.reserve;\n        // Remove a reserve from an inventory, company, and store so it can be recalculated\n        if (this.transaction.reserve) {\n          const reserve = await (this.model('Reserve')).findById(this.transaction.reserve);\n          if (reserve) {\n            await (this.model('Reserve')).remove({_id: reserve._id});\n            // Find company and store with this reserve\n            const company = await (this.model('Company')).findOne({reserves: reserve._id});\n            const store = await (this.model('Store')).findOne({reserves: reserve._id});\n            const inventory = await this.constructor.findById(this._id);\n            // Undo company, store, and inventory for this reserve\n            if (company) {\n              await (this.model('Company')).update({_id: company._id}, this.undoReserveValues(reserve));\n            }\n            if (store) {\n              await (this.model('Store')).update({_id: store._id}, this.undoReserveValues(reserve));\n            }\n            if (inventory) {\n              await this.constructor.update({_id: this._id}, {\n                $set: {\n                  'transaction.reserve': null,\n                  'transaction.reserveAmount': 0\n                }\n              });\n            }\n            // Remove this reserve\n            await (this.model('Reserve')).remove({_id: reserveId});\n          }\n        }\n\n        resolve(null);\n      } catch (e) {\n        console.log('**************ERR IN REMOVE RESERVE**********');\n        console.log(e);\n        console.log(e.stack);\n      }\n    });\n  }\n};\n\n// Set number for SMP\nInventorySchema.pre('save', function(next) {\n  if (typeof this.smp !== 'undefined' && [smpIds.SAVEYA, smpIds.CARDCASH, smpIds.CARDPOOL, smpIds.GIFTCARDZEN].indexOf(this.smp) === -1) {\n    const setSmp = parseInt(this.smp);\n    // Change to int\n    if (isNaN(setSmp)) {\n      if (this.smp && [smpIds.SAVEYA, smpIds.CARDCASH, smpIds.CARDPOOL, smpIds.GIFTCARDZEN].indexOf(this.smp) === -1) {\n        const smp = smpIds[this.smp.toUpperCase()];\n        if (smp) {\n          this.smp = smp;\n        }\n      }\n    }\n  }\n  next();\n});\n\n/**\n * Determine if inventory has changed and needs to be recalculated\n */\nInventorySchema.pre('validate', function (next) {\n  try {\n    this.constructor.findById(this._id)\n    .then(oldInventory => {\n      if (!oldInventory) {\n        this.changed = true;\n      } else {\n        // If anything has changed, set as changed\n        const current = this.toObject();\n        const old = oldInventory.toObject();\n        delete old.changed;\n        delete current.changed;\n        if (JSON.stringify(current) !== JSON.stringify(old)) {\n          this.changed = true;\n        }\n      }\n      next();\n    })\n    .catch(err => {\n      this.changed = true;\n      next();\n    })\n  } catch (err) {\n    this.changed = true;\n    next();\n  }\n});\n\n/**\n * Attribute methods\n * @param verifiedBalance\n * @return {*}\n */\nfunction defaultsToBalance(verifiedBalance) {\n  if (typeof verifiedBalance === 'number') {\n    return verifiedBalance\n  }\n  const claimedBalance = this.balance;\n  // Use CB for VB if cqAch is set and VB is not set\n  if (this.cqAch) {\n    return claimedBalance\n  }\n  // Use claimed balance if sent to SMP or received by SMP and VB is unavailable\n  if (this.activityStatus) {\n    const useClaimedIfNoVb = ['sentToSmp', 'receivedSmp'].indexOf(this.activityStatus) > -1;\n    if (useClaimedIfNoVb) {\n      return claimedBalance;\n    }\n  }\n\n  return verifiedBalance;\n}\nfunction convertToLowerCase(whatever) {\n  if (whatever) {\n    return whatever.toLowerCase();\n  }\n}\n\nInventorySchema.set('toJSON', {getters: true});\nInventorySchema.set('toObject', {getters: true});\n\nmodule.exports = mongoose.model('Inventory', InventorySchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}