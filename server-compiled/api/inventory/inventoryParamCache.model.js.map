{"version":3,"sources":["api/inventory/inventoryParamCache.model.js"],"names":["mongoose","require","Promise","Schema","InventoryParamCache","created","type","Date","default","now","beginDate","String","endDate","userRole","batches","Array","companies","stores","statics","getCache","params","removed","findOne","then","cache","diffHours","duration","diff","asHours","remove","storeCache","values","save","module","exports","model"],"mappings":"AAAA;;AAKA;;;;;;AAHA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACAD,SAASE,OAAT,GAAmBD,QAAQ,UAAR,CAAnB;AACA,IAAME,SAASH,SAASG,MAAxB;;;AAGA,IAAMC,sBAAsB,IAAID,MAAJ,CAAW;AACrC;AACAE,WAAS;AACPC,UAAMC,IADC;AAEPC,aAASD,KAAKE;AAFP,GAF4B;AAMrC;AACAC,aAAWC,MAP0B;AAQrC;AACAC,WAASD,MAT4B;AAUrC;AACAE,YAAUF,MAX2B;AAYrC;AACAG,WAASC,KAb4B;AAcrC;AACAC,aAAWD,KAf0B;AAgBrC;AACAE,UAAQF;AAjB6B,CAAX,CAA5B;;AAoBAX,oBAAoBc,OAApB,GAA8B;AAC5B;;;;AAIAC,UAL4B,oBAKnBC,MALmB,EAKX;AACf,QAAIC,UAAU,KAAd;AACA,WAAO,KAAKC,OAAL,CAAa;AAClBZ,iBAAWU,OAAOV,SADA;AAElBE,eAASQ,OAAOR,OAFE;AAGlBC,gBAAUO,OAAOP;AAHC,KAAb,EAKNU,IALM,CAKD,iBAAS;AACb,UAAIC,SAASA,MAAMnB,OAAnB,EAA4B;AAC1B,YAAMI,MAAM,uBAAZ;AACA,YAAMc,OAAO,sBAAOC,MAAMnB,OAAb,CAAb;AACA,YAAMoB,YAAY,iBAAOC,QAAP,CAAgBjB,IAAIkB,IAAJ,CAASJ,IAAT,CAAhB,EAAgCK,OAAhC,EAAlB;AACA;AACA,YAAIH,YAAY,CAAhB,EAAmB;AACjBJ,oBAAU,IAAV;AACA,iBAAOG,MAAMK,MAAN,EAAP;AACD;AACF;AACD,aAAOL,KAAP;AACD,KAjBM,EAkBND,IAlBM,CAkBD,iBAAS;AACb,UAAIC,SAAS,CAACH,OAAd,EAAuB;AACrB,eAAOG,KAAP;AACD;AACD,aAAO,IAAP;AACD,KAvBM,CAAP;AAwBD,GA/B2B;;AAgC5B;AACAM,YAjC4B,sBAiCjBV,MAjCiB,EAiCTW,MAjCS,EAiCD;AACzB,QAAMP,QAAQ,IAAI,IAAJ,CAAS;AACrBd,iBAAWU,OAAOV,SADG;AAErBE,eAASQ,OAAOR,OAFK;AAGrBC,gBAAUO,OAAOP,QAHI;AAIrBC,eAASiB,OAAOjB,OAJK;AAKrBE,iBAAWe,OAAOf,SALG;AAMrBC,cAAQc,OAAOd;AANM,KAAT,CAAd;AAQA,WAAOO,MAAMQ,IAAN,EAAP;AACD;AA3C2B,CAA9B;;AA8CAC,OAAOC,OAAP,GAAiBlC,SAASmC,KAAT,CAAe,qBAAf,EAAsC/B,mBAAtC,CAAjB","file":"api/inventory/inventoryParamCache.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\nimport moment from 'moment';\n\nconst InventoryParamCache = new Schema({\n  // When original record is created\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  // Begin date for search\n  beginDate: String,\n  // End date for search\n  endDate: String,\n  // User role (since params are different for different views)\n  userRole: String,\n  // Batches\n  batches: Array,\n  // Companies\n  companies: Array,\n  // Stores\n  stores: Array\n});\n\nInventoryParamCache.statics = {\n  /**\n   * Retrieve cache if valid\n   * @param params\n   */\n  getCache(params) {\n    let removed = false;\n    return this.findOne({\n      beginDate: params.beginDate,\n      endDate: params.endDate,\n      userRole: params.userRole\n    })\n    .then(cache => {\n      if (cache && cache.created) {\n        const now = moment();\n        const then = moment(cache.created);\n        const diffHours = moment.duration(now.diff(then)).asHours();\n        // Clear cache after 8 hours\n        if (diffHours > 8) {\n          removed = true;\n          return cache.remove();\n        }\n      }\n      return cache;\n    })\n    .then(cache => {\n      if (cache && !removed) {\n        return cache;\n      }\n      return null;\n    });\n  },\n  // Store cache if we don't have one\n  storeCache(params, values) {\n    const cache = new this({\n      beginDate: params.beginDate,\n      endDate: params.endDate,\n      userRole: params.userRole,\n      batches: values.batches,\n      companies: values.companies,\n      stores: values.stores\n    });\n    return cache.save();\n  }\n};\n\nmodule.exports = mongoose.model('InventoryParamCache', InventoryParamCache);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}