{"version":3,"sources":["api/cardUpdates/cardUpdates.model.js"],"names":["mongoose","require","Promise","Schema","CardUpdateSchema","card","type","Types","ObjectId","ref","required","number","String","pin","created","Date","default","now","balanceStatus","validate","validator","v","test","message","valid","Boolean","balance","Number","user","customer","retailer","module","exports","model"],"mappings":"AAAA;;AAEA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACAD,SAASE,OAAT,GAAmBD,QAAQ,UAAR,CAAnB;AACA,IAAME,SAASH,SAASG,MAAxB;;AAEA,IAAMC,mBAAmB,IAAID,MAAJ,CAAW;AAClC;AACAE,QAAM,EAACC,MAAMH,OAAOI,KAAP,CAAaC,QAApB,EAA8BC,KAAK,MAAnC,EAA2CC,UAAU,IAArD,EAF4B;AAGlC;AACAC,UAAQC,MAJ0B;AAKlC;AACAC,OAAKD,MAN6B;AAOlC;AACAE,WAAS;AACPR,UAAMS,IADC;AAEPC,aAASD,KAAKE;AAFP,GARyB;AAYlC;AACAC,iBAAe;AACbZ,UAAMM,MADO;AAEbO,cAAU;AACRC,iBAAW,mBAASC,CAAT,EAAY;AACrB,eAAO,8CAA6CC,IAA7C,CAAkDD,CAAlD;AAAP;AACD,OAHO;AAIRE,eAAS;AAJD;AAFG,GAbmB;AAsBlC;AACAC,SAAOC,OAvB2B;AAwBlC;AACAC,WAASC,MAzByB;AA0BlC;AACAC,QAAM,CAAC,EAACtB,MAAMH,OAAOI,KAAP,CAAaC,QAApB,EAA8BC,KAAK,MAAnC,EAAD,CA3B4B;AA4BlC;AACAoB,YAAU,EAACvB,MAAMH,OAAOI,KAAP,CAAaC,QAApB,EAA8BC,KAAK,UAAnC,EA7BwB;AA8BlC;AACAqB,YAAU,EAACxB,MAAMH,OAAOI,KAAP,CAAaC,QAApB,EAA8BC,KAAK,UAAnC;AA/BwB,CAAX,CAAzB;;AAkCAsB,OAAOC,OAAP,GAAiBhC,SAASiC,KAAT,CAAe,YAAf,EAA6B7B,gBAA7B,CAAjB","file":"api/cardUpdates/cardUpdates.model.js","sourcesContent":["'use strict';\n\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst Schema = mongoose.Schema;\n\nconst CardUpdateSchema = new Schema({\n  // Card\n  card: {type: Schema.Types.ObjectId, ref: 'Card', required: true},\n  // Card number\n  number: String,\n  // Pin\n  pin: String,\n  // When original record is created\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  // Must be one of the strings listed below\n  balanceStatus: {\n    type: String,\n    validate: {\n      validator: function(v) {\n        return /^(unchecked|deferred|received|bad|manual)$/.test(v);\n      },\n      message: 'Balance status must be \"unchecked,\" \"deferred,\" or \"received\"'\n    }\n  },\n  // Whether a card is valid or not. Assumed to be valid until BI returns invalid\n  valid: Boolean,\n  // Balance\n  balance: Number,\n  // Store adding the card\n  user: [{type: Schema.Types.ObjectId, ref: 'User'}],\n  // User checking the card\n  customer: {type: Schema.Types.ObjectId, ref: 'Customer'},\n  // Retailer\n  retailer: {type: Schema.Types.ObjectId, ref: 'Retailer'}\n});\n\nmodule.exports = mongoose.model('CardUpdate', CardUpdateSchema);\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}