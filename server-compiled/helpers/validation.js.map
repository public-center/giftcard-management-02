{"version":3,"sources":["helpers/validation.js"],"names":["validation","body","params","valErrors","Object","entries","k","v","compareVal","get","isPlainObject","thisV","type","options","pushValError","regex","test","notRegex","date","isValid","rule","async","models","model","enum","indexOf","console","log","runValidation","id","isObjectId","findById","recordExists","checkStructuredValidation","convertBodyToStrings","ensureDecimals","returnValidationErrors","isEmail","isNotEmpty","isSimpleDate","isString","isValidObjectId","ObjectId","Card","Company","validationRules","req","res","next","validationFailed","route","path","ruleToUse","assign","length","bodyStrings","i","hasOwnProperty","toString","props","propMaxes","forEach","prop","parseFloat","maxValue","toFixed","push","name","message","status","json","error","errors","val","isLength","trim","min"],"mappings":"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","file":"helpers/validation.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport validator from 'validator';\nimport {Types} from 'mongoose';\nconst isValidObjectId = Types.ObjectId.isValid;\n\nimport Card from '../api/card/card.model';\nimport Company from '../api/company/company.model';\n\nconst models = {\n  Card,\n  Company\n};\n\n/**\n * Check structured validation in middleware\n * @param validationRules Validation rules for endpoints in this route\n */\nexport function checkStructuredValidation(validationRules) {\n  return function (req, res, next) {\n    return async function () {\n      req.validationFailed = false;\n      // No route for some weird reason\n      if (!req.route) {\n        return next();\n      }\n      const route = req.route.path;\n      if (!validationRules) {\n        return next();\n      }\n      // Get this specific validation rule\n      const ruleToUse = validationRules[route];\n      // No validation rules for this endpoint\n      if (!ruleToUse) {\n        return next();\n      }\n      // Check for validation errors\n      const body = Object.assign({}, req.body);\n      const params = Object.assign({}, req.params);\n      const valErrors = await runValidation(ruleToUse, convertBodyToStrings(body), convertBodyToStrings(params));\n      // Return validation errors\n      if (valErrors.length) {\n        returnValidationErrors(res, valErrors);\n        req.validationFailed = true;\n        return;\n      }\n      next();\n    }();\n  }\n}\n\n/**\n * Convert all body props to string\n * @param body Req.body\n * @return {*}\n */\nexport function convertBodyToStrings(body) {\n  const bodyStrings = {};\n  // Convert everything to a string for validation\n  for (let i in body) {\n    if (body.hasOwnProperty(i)) {\n      if (typeof body[i] !== 'undefined' && typeof body[i].toString === 'function') {\n        bodyStrings[i] = body[i].toString();\n      }\n    }\n  }\n  return bodyStrings;\n}\n\n/**\n * Ensure that we have a decimal value, rather than an integer representation of percentages\n * @param next\n * @param props\n * @param propMaxes\n */\nexport function ensureDecimals(next, props, propMaxes = {}) {\n  props.forEach(prop => {\n    if (this[prop]) {\n      // Make sure it's a decimal\n      if (this[prop]) {\n        this[prop] = parseFloat(this[prop]);\n        let maxValue = 1;\n        // margin could potentially be less than \"1\", but entered wrong. It will always be less than 10%\n        if (propMaxes[prop]) {\n          maxValue = propMaxes[prop];\n        }\n        if (this[prop] > maxValue) {\n          this[prop] = (this[prop] / 100).toFixed(3);\n        }\n      }\n    }\n  });\n  next();\n}\n\nfunction pushValError(valErrors, k, v) {\n  valErrors.push({name: k, message: v.message});\n}\n\n/**\n * Return validation errors\n * @param res\n * @param valErrors Validation errors\n */\nexport function returnValidationErrors(res, valErrors) {\n  return res.status(400).json({error: {errors: valErrors}});\n}\n\n/**\n * Run validation on a request body\n * @param validation Validation rules\n * @param body Request body\n * @param params Path params\n * @return {Array}\n */\nexport async function runValidation(validation, body, params = {}) {\n  const valErrors = [];\n  try {\n    for (let [k, v] of Object.entries(validation)) {\n      // Value in body\n      let compareVal = _.get(body, k);\n      // Value in params\n      if (!compareVal) {\n        compareVal = _.get(params, k);\n      }\n      compareVal = typeof compareVal === 'string' ? compareVal : '';\n\n      if (_.isPlainObject(v)) {\n        v = [v];\n      }\n\n      for (const thisV of v) {\n        if (thisV.type && !validator[thisV.type](compareVal, thisV.options)) {\n          // Invalid based on validator.js\n          pushValError(valErrors, k, thisV);\n        } else if (thisV.regex && !thisV.regex.test(compareVal)) {\n          // Invalid based on regex\n          pushValError(valErrors, k, thisV);\n          // Check to make sure string does not match this regex\n        } else if (thisV.notRegex && thisV.notRegex.test(compareVal)) {\n          pushValError(valErrors, k, thisV);\n        } else if (thisV.date && !moment(compareVal).isValid()) {\n          // Invalid based on moment()\n          pushValError(valErrors, k, thisV);\n        } else if (thisV.rule && !thisV.rule(compareVal)) {\n          // Invalid based on custom validation rule\n          pushValError(valErrors, k, thisV);\n        // Invalid based on record existence\n        } else if (thisV.async && !await thisV.async(compareVal, models[thisV.model])) {\n          // Invalid based on async validation rule\n          pushValError(valErrors, k, thisV);\n        } else if (thisV.enum && thisV.enum.indexOf(compareVal) === -1) {\n          pushValError(valErrors, k, thisV);\n        }\n      }\n    }\n    return valErrors;\n  } catch (err) {\n    console.log('**************VALIDATION ERROR**********');\n    console.log(err);\n    return valErrors;\n  }\n}\n\n/**\n * Err on the side of caution here\n */\nexport function isEmail(val) {\n  return /.+@.+\\..+/.test(val);\n}\n\n/**\n * Checks a given string to make sure it's not empty\n *\n * @param {String} val\n * @return {Boolean}\n */\nexport function isNotEmpty(val) {\n  return validator.isLength(validator.trim(val), {min: 1});\n}\n\n/**\n * Check for valid objectId\n * @param val\n */\nexport function isObjectId(val) {\n  return isValidObjectId(val);\n}\n\n/**\n * Test simple date format: YYYY-MM-DD\n * @param val\n * @return {boolean}\n */\nexport function isSimpleDate(val) {\n  return /^\\d{4}-\\d{2}-\\d{2}$/.test(val);\n}\n\n/**\n * Check if value is a string\n */\nexport function isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Check to see if a record exists\n * @param id\n * @param model\n * @return {Promise.<void>}\n */\nexport async function recordExists(id, model) {\n  if (!isObjectId(id)) {\n    return false;\n  }\n  return !!await model.findById(id);\n}\n"],"sourceRoot":"/home/ubuntu14/works/webstromProjects/gcmgr/gulp/es6"}